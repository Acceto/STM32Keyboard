
plagueV1_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093fc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800950c  0800950c  0001950c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096a4  080096a4  0002015c  2**0
                  CONTENTS
  4 .ARM          00000000  080096a4  080096a4  0002015c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080096a4  080096a4  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a4  080096a4  000196a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096a8  080096a8  000196a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  080096ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002144  2000015c  08009808  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022a0  08009808  000222a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c7d1  00000000  00000000  00020185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040c5  00000000  00000000  0003c956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00040a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00041bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005de7  00000000  00000000  00042b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001578a  00000000  00000000  0004896f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f17a  00000000  00000000  0005e0f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed273  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000462c  00000000  00000000  000ed2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000015c 	.word	0x2000015c
 800012c:	00000000 	.word	0x00000000
 8000130:	080094f4 	.word	0x080094f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000160 	.word	0x20000160
 800014c:	080094f4 	.word	0x080094f4

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fae0 	bl	8000718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f834 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f88e 	bl	800027c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f006 f900 	bl	8006364 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000164:	4a0e      	ldr	r2, [pc, #56]	; (80001a0 <main+0x50>)
 8000166:	2100      	movs	r1, #0
 8000168:	480e      	ldr	r0, [pc, #56]	; (80001a4 <main+0x54>)
 800016a:	f006 f961 	bl	8006430 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a0d      	ldr	r2, [pc, #52]	; (80001a8 <main+0x58>)
 8000172:	6013      	str	r3, [r2, #0]

  /* creation of usbCom */
  usbComHandle = osThreadNew(StartUsbCom, NULL, &usbCom_attributes);
 8000174:	4a0d      	ldr	r2, [pc, #52]	; (80001ac <main+0x5c>)
 8000176:	2100      	movs	r1, #0
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <main+0x60>)
 800017a:	f006 f959 	bl	8006430 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a0c      	ldr	r2, [pc, #48]	; (80001b4 <main+0x64>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of keyboardMatrix */
  keyboardMatrixHandle = osThreadNew(StartKeyboardMatrix, NULL, &keyboardMatrix_attributes);
 8000184:	4a0c      	ldr	r2, [pc, #48]	; (80001b8 <main+0x68>)
 8000186:	2100      	movs	r1, #0
 8000188:	480c      	ldr	r0, [pc, #48]	; (80001bc <main+0x6c>)
 800018a:	f006 f951 	bl	8006430 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <main+0x70>)
 8000192:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000194:	f006 f918 	bl	80063c8 <osKernelStart>
 8000198:	2300      	movs	r3, #0

  /*while (1)
  {
  }*/
  /* USER CODE END 3 */
}
 800019a:	4618      	mov	r0, r3
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	08009598 	.word	0x08009598
 80001a4:	08000371 	.word	0x08000371
 80001a8:	20001aa0 	.word	0x20001aa0
 80001ac:	080095bc 	.word	0x080095bc
 80001b0:	08000385 	.word	0x08000385
 80001b4:	20001aa8 	.word	0x20001aa8
 80001b8:	080095e0 	.word	0x080095e0
 80001bc:	080003c5 	.word	0x080003c5
 80001c0:	20001aa4 	.word	0x20001aa4

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b094      	sub	sp, #80	; 0x50
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f009 f986 	bl	80094e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	f107 0314 	add.w	r3, r7, #20
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f4:	2301      	movs	r3, #1
 80001f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000202:	2301      	movs	r3, #1
 8000204:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000206:	2302      	movs	r3, #2
 8000208:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000210:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000214:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021a:	4618      	mov	r0, r3
 800021c:	f002 f91a 	bl	8002454 <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000226:	f000 f8fb 	bl	8000420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000240:	f107 0314 	add.w	r3, r7, #20
 8000244:	2101      	movs	r1, #1
 8000246:	4618      	mov	r0, r3
 8000248:	f002 fb84 	bl	8002954 <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000252:	f000 f8e5 	bl	8000420 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000256:	2310      	movs	r3, #16
 8000258:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800025a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800025e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	4618      	mov	r0, r3
 8000264:	f002 fcde 	bl	8002c24 <HAL_RCCEx_PeriphCLKConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800026e:	f000 f8d7 	bl	8000420 <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3750      	adds	r7, #80	; 0x50
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000282:	f107 0310 	add.w	r3, r7, #16
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000290:	4b34      	ldr	r3, [pc, #208]	; (8000364 <MX_GPIO_Init+0xe8>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a33      	ldr	r2, [pc, #204]	; (8000364 <MX_GPIO_Init+0xe8>)
 8000296:	f043 0320 	orr.w	r3, r3, #32
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b31      	ldr	r3, [pc, #196]	; (8000364 <MX_GPIO_Init+0xe8>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f003 0320 	and.w	r3, r3, #32
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a8:	4b2e      	ldr	r3, [pc, #184]	; (8000364 <MX_GPIO_Init+0xe8>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a2d      	ldr	r2, [pc, #180]	; (8000364 <MX_GPIO_Init+0xe8>)
 80002ae:	f043 0304 	orr.w	r3, r3, #4
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b2b      	ldr	r3, [pc, #172]	; (8000364 <MX_GPIO_Init+0xe8>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0304 	and.w	r3, r3, #4
 80002bc:	60bb      	str	r3, [r7, #8]
 80002be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c0:	4b28      	ldr	r3, [pc, #160]	; (8000364 <MX_GPIO_Init+0xe8>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a27      	ldr	r2, [pc, #156]	; (8000364 <MX_GPIO_Init+0xe8>)
 80002c6:	f043 0308 	orr.w	r3, r3, #8
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b25      	ldr	r3, [pc, #148]	; (8000364 <MX_GPIO_Init+0xe8>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0308 	and.w	r3, r3, #8
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80002d8:	2200      	movs	r2, #0
 80002da:	f64f 41e6 	movw	r1, #64742	; 0xfce6
 80002de:	4822      	ldr	r0, [pc, #136]	; (8000368 <MX_GPIO_Init+0xec>)
 80002e0:	f000 fd25 	bl	8000d2e <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80002ea:	4820      	ldr	r0, [pc, #128]	; (800036c <MX_GPIO_Init+0xf0>)
 80002ec:	f000 fd1f 	bl	8000d2e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80002f0:	23ff      	movs	r3, #255	; 0xff
 80002f2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002f4:	2300      	movs	r3, #0
 80002f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002f8:	2302      	movs	r3, #2
 80002fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002fc:	f107 0310 	add.w	r3, r7, #16
 8000300:	4619      	mov	r1, r3
 8000302:	481a      	ldr	r0, [pc, #104]	; (800036c <MX_GPIO_Init+0xf0>)
 8000304:	f000 fb78 	bl	80009f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000308:	2301      	movs	r3, #1
 800030a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800030c:	2300      	movs	r3, #0
 800030e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000310:	2302      	movs	r3, #2
 8000312:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000314:	f107 0310 	add.w	r3, r7, #16
 8000318:	4619      	mov	r1, r3
 800031a:	4813      	ldr	r0, [pc, #76]	; (8000368 <MX_GPIO_Init+0xec>)
 800031c:	f000 fb6c 	bl	80009f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
         b                  PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000320:	f64f 43e6 	movw	r3, #64742	; 0xfce6
 8000324:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000326:	2301      	movs	r3, #1
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800032a:	2301      	movs	r3, #1
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032e:	2302      	movs	r3, #2
 8000330:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	4619      	mov	r1, r3
 8000338:	480b      	ldr	r0, [pc, #44]	; (8000368 <MX_GPIO_Init+0xec>)
 800033a:	f000 fb5d 	bl	80009f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800033e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000344:	2301      	movs	r3, #1
 8000346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000348:	2301      	movs	r3, #1
 800034a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800034c:	2302      	movs	r3, #2
 800034e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	4805      	ldr	r0, [pc, #20]	; (800036c <MX_GPIO_Init+0xf0>)
 8000358:	f000 fb4e 	bl	80009f8 <HAL_GPIO_Init>

}
 800035c:	bf00      	nop
 800035e:	3720      	adds	r7, #32
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40021000 	.word	0x40021000
 8000368:	40010c00 	.word	0x40010c00
 800036c:	40010800 	.word	0x40010800

08000370 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000378:	f008 fcc8 	bl	8008d0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800037c:	2001      	movs	r0, #1
 800037e:	f006 f901 	bl	8006584 <osDelay>
 8000382:	e7fb      	b.n	800037c <StartDefaultTask+0xc>

08000384 <StartUsbCom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUsbCom */
void StartUsbCom(void *argument)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    //osDelay(1);

    keyboardhid.KEYCODE1 = KEY_B;  // press 'a'
 800038c:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <StartUsbCom+0x38>)
 800038e:	2205      	movs	r2, #5
 8000390:	709a      	strb	r2, [r3, #2]
    USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8000392:	2208      	movs	r2, #8
 8000394:	4909      	ldr	r1, [pc, #36]	; (80003bc <StartUsbCom+0x38>)
 8000396:	480a      	ldr	r0, [pc, #40]	; (80003c0 <StartUsbCom+0x3c>)
 8000398:	f004 fef4 	bl	8005184 <USBD_HID_SendReport>
    osDelay(50);
 800039c:	2032      	movs	r0, #50	; 0x32
 800039e:	f006 f8f1 	bl	8006584 <osDelay>
    keyboardhid.KEYCODE1 = 0x00;  // release key
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <StartUsbCom+0x38>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	709a      	strb	r2, [r3, #2]
    USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 80003a8:	2208      	movs	r2, #8
 80003aa:	4904      	ldr	r1, [pc, #16]	; (80003bc <StartUsbCom+0x38>)
 80003ac:	4804      	ldr	r0, [pc, #16]	; (80003c0 <StartUsbCom+0x3c>)
 80003ae:	f004 fee9 	bl	8005184 <USBD_HID_SendReport>
    osDelay(1000);
 80003b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b6:	f006 f8e5 	bl	8006584 <osDelay>
  {
 80003ba:	e7e7      	b.n	800038c <StartUsbCom+0x8>
 80003bc:	20000178 	.word	0x20000178
 80003c0:	20001af0 	.word	0x20001af0

080003c4 <StartKeyboardMatrix>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartKeyboardMatrix */
void StartKeyboardMatrix(void *argument)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	  int col, row;
	  int keymap;
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003cc:	2001      	movs	r0, #1
 80003ce:	f006 f8d9 	bl	8006584 <osDelay>
	for(col=1;col<=8;col++){
 80003d2:	2301      	movs	r3, #1
 80003d4:	617b      	str	r3, [r7, #20]
 80003d6:	e01c      	b.n	8000412 <StartKeyboardMatrix+0x4e>
	  bWriteColumnState(col,1);
 80003d8:	2101      	movs	r1, #1
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f000 f88a 	bl	80004f4 <bWriteColumnState>
	  if ((row=intReadRowState())!=0){
 80003e0:	f000 f952 	bl	8000688 <intReadRowState>
 80003e4:	6138      	str	r0, [r7, #16]
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d00b      	beq.n	8000404 <StartKeyboardMatrix+0x40>

		  keymap=keymap_azerty[0][row-1][col-1];
 80003ec:	693b      	ldr	r3, [r7, #16]
 80003ee:	1e5a      	subs	r2, r3, #1
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	1e59      	subs	r1, r3, #1
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <StartKeyboardMatrix+0x58>)
 80003f6:	4613      	mov	r3, r2
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	4413      	add	r3, r2
 80003fc:	440b      	add	r3, r1
 80003fe:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000402:	60fb      	str	r3, [r7, #12]

	  }
	  bWriteColumnState(col,0);
 8000404:	2100      	movs	r1, #0
 8000406:	6978      	ldr	r0, [r7, #20]
 8000408:	f000 f874 	bl	80004f4 <bWriteColumnState>
	for(col=1;col<=8;col++){
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	3301      	adds	r3, #1
 8000410:	617b      	str	r3, [r7, #20]
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	2b08      	cmp	r3, #8
 8000416:	dddf      	ble.n	80003d8 <StartKeyboardMatrix+0x14>
    osDelay(1);
 8000418:	e7d8      	b.n	80003cc <StartKeyboardMatrix+0x8>
 800041a:	bf00      	nop
 800041c:	08009604 	.word	0x08009604

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	e7fe      	b.n	8000428 <Error_Handler+0x8>
	...

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000432:	4b18      	ldr	r3, [pc, #96]	; (8000494 <HAL_MspInit+0x68>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a17      	ldr	r2, [pc, #92]	; (8000494 <HAL_MspInit+0x68>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <HAL_MspInit+0x68>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044a:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_MspInit+0x68>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a11      	ldr	r2, [pc, #68]	; (8000494 <HAL_MspInit+0x68>)
 8000450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_MspInit+0x68>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	210f      	movs	r1, #15
 8000466:	f06f 0001 	mvn.w	r0, #1
 800046a:	f000 fa8e 	bl	800098a <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <HAL_MspInit+0x6c>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	4a04      	ldr	r2, [pc, #16]	; (8000498 <HAL_MspInit+0x6c>)
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	bf00      	nop
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	40010000 	.word	0x40010000

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x4>

080004a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ca:	f000 f96b 	bl	80007a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004ce:	f007 fc65 	bl	8007d9c <xTaskGetSchedulerState>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d001      	beq.n	80004dc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004d8:	f008 f9be 	bl	8008858 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}

080004e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004e6:	f000 fd6b 	bl	8000fc0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20001fb4 	.word	0x20001fb4

080004f4 <bWriteColumnState>:
#include "switchMatrix.h"

void bWriteColumnState(int column, uint8_t state){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	70fb      	strb	r3, [r7, #3]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3b01      	subs	r3, #1
 8000504:	2b07      	cmp	r3, #7
 8000506:	d851      	bhi.n	80005ac <bWriteColumnState+0xb8>
 8000508:	a201      	add	r2, pc, #4	; (adr r2, 8000510 <bWriteColumnState+0x1c>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	08000531 	.word	0x08000531
 8000514:	0800053f 	.word	0x0800053f
 8000518:	0800054d 	.word	0x0800054d
 800051c:	0800055d 	.word	0x0800055d
 8000520:	0800056d 	.word	0x0800056d
 8000524:	0800057d 	.word	0x0800057d
 8000528:	0800058d 	.word	0x0800058d
 800052c:	0800059d 	.word	0x0800059d
	switch (column){
		case 1 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,state);
 8000530:	78fb      	ldrb	r3, [r7, #3]
 8000532:	461a      	mov	r2, r3
 8000534:	2102      	movs	r1, #2
 8000536:	481f      	ldr	r0, [pc, #124]	; (80005b4 <bWriteColumnState+0xc0>)
 8000538:	f000 fbf9 	bl	8000d2e <HAL_GPIO_WritePin>
				break;
 800053c:	e036      	b.n	80005ac <bWriteColumnState+0xb8>
		case 2 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,state);
 800053e:	78fb      	ldrb	r3, [r7, #3]
 8000540:	461a      	mov	r2, r3
 8000542:	2104      	movs	r1, #4
 8000544:	481b      	ldr	r0, [pc, #108]	; (80005b4 <bWriteColumnState+0xc0>)
 8000546:	f000 fbf2 	bl	8000d2e <HAL_GPIO_WritePin>
				break;
 800054a:	e02f      	b.n	80005ac <bWriteColumnState+0xb8>
		case 3:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,state);
 800054c:	78fb      	ldrb	r3, [r7, #3]
 800054e:	461a      	mov	r2, r3
 8000550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000554:	4817      	ldr	r0, [pc, #92]	; (80005b4 <bWriteColumnState+0xc0>)
 8000556:	f000 fbea 	bl	8000d2e <HAL_GPIO_WritePin>
				break;
 800055a:	e027      	b.n	80005ac <bWriteColumnState+0xb8>
		case 4 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,state);
 800055c:	78fb      	ldrb	r3, [r7, #3]
 800055e:	461a      	mov	r2, r3
 8000560:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000564:	4813      	ldr	r0, [pc, #76]	; (80005b4 <bWriteColumnState+0xc0>)
 8000566:	f000 fbe2 	bl	8000d2e <HAL_GPIO_WritePin>
				break;
 800056a:	e01f      	b.n	80005ac <bWriteColumnState+0xb8>
		case 5 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,state);
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	461a      	mov	r2, r3
 8000570:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000574:	480f      	ldr	r0, [pc, #60]	; (80005b4 <bWriteColumnState+0xc0>)
 8000576:	f000 fbda 	bl	8000d2e <HAL_GPIO_WritePin>
				break;
 800057a:	e017      	b.n	80005ac <bWriteColumnState+0xb8>
		case 6 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,state);
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	461a      	mov	r2, r3
 8000580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <bWriteColumnState+0xc0>)
 8000586:	f000 fbd2 	bl	8000d2e <HAL_GPIO_WritePin>
				break;
 800058a:	e00f      	b.n	80005ac <bWriteColumnState+0xb8>
		case 7 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,state);
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	461a      	mov	r2, r3
 8000590:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000594:	4807      	ldr	r0, [pc, #28]	; (80005b4 <bWriteColumnState+0xc0>)
 8000596:	f000 fbca 	bl	8000d2e <HAL_GPIO_WritePin>
				break;
 800059a:	e007      	b.n	80005ac <bWriteColumnState+0xb8>
		case 8 :
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,state);
 800059c:	78fb      	ldrb	r3, [r7, #3]
 800059e:	461a      	mov	r2, r3
 80005a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <bWriteColumnState+0xc0>)
 80005a6:	f000 fbc2 	bl	8000d2e <HAL_GPIO_WritePin>
				break;
 80005aa:	bf00      	nop
			}
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40010c00 	.word	0x40010c00

080005b8 <bReadRowState>:


int bReadRowState(int row){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	int state=0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3b01      	subs	r3, #1
 80005c8:	2b08      	cmp	r3, #8
 80005ca:	d854      	bhi.n	8000676 <bReadRowState+0xbe>
 80005cc:	a201      	add	r2, pc, #4	; (adr r2, 80005d4 <bReadRowState+0x1c>)
 80005ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d2:	bf00      	nop
 80005d4:	080005f9 	.word	0x080005f9
 80005d8:	08000607 	.word	0x08000607
 80005dc:	08000615 	.word	0x08000615
 80005e0:	08000623 	.word	0x08000623
 80005e4:	08000631 	.word	0x08000631
 80005e8:	0800063f 	.word	0x0800063f
 80005ec:	0800064d 	.word	0x0800064d
 80005f0:	0800065b 	.word	0x0800065b
 80005f4:	08000669 	.word	0x08000669
	switch (row){
		case 1 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 80005f8:	2101      	movs	r1, #1
 80005fa:	4821      	ldr	r0, [pc, #132]	; (8000680 <bReadRowState+0xc8>)
 80005fc:	f000 fb80 	bl	8000d00 <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	60fb      	str	r3, [r7, #12]
			break;
 8000604:	e037      	b.n	8000676 <bReadRowState+0xbe>
		case 2 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);
 8000606:	2102      	movs	r1, #2
 8000608:	481d      	ldr	r0, [pc, #116]	; (8000680 <bReadRowState+0xc8>)
 800060a:	f000 fb79 	bl	8000d00 <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	60fb      	str	r3, [r7, #12]
			break;
 8000612:	e030      	b.n	8000676 <bReadRowState+0xbe>
		case 3:
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_2);
 8000614:	2104      	movs	r1, #4
 8000616:	481a      	ldr	r0, [pc, #104]	; (8000680 <bReadRowState+0xc8>)
 8000618:	f000 fb72 	bl	8000d00 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	60fb      	str	r3, [r7, #12]
			break;
 8000620:	e029      	b.n	8000676 <bReadRowState+0xbe>
		case 4 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3);
 8000622:	2108      	movs	r1, #8
 8000624:	4816      	ldr	r0, [pc, #88]	; (8000680 <bReadRowState+0xc8>)
 8000626:	f000 fb6b 	bl	8000d00 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	60fb      	str	r3, [r7, #12]
			break;
 800062e:	e022      	b.n	8000676 <bReadRowState+0xbe>
		case 5 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4);
 8000630:	2110      	movs	r1, #16
 8000632:	4813      	ldr	r0, [pc, #76]	; (8000680 <bReadRowState+0xc8>)
 8000634:	f000 fb64 	bl	8000d00 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	60fb      	str	r3, [r7, #12]
			break;
 800063c:	e01b      	b.n	8000676 <bReadRowState+0xbe>
		case 6 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
 800063e:	2120      	movs	r1, #32
 8000640:	480f      	ldr	r0, [pc, #60]	; (8000680 <bReadRowState+0xc8>)
 8000642:	f000 fb5d 	bl	8000d00 <HAL_GPIO_ReadPin>
 8000646:	4603      	mov	r3, r0
 8000648:	60fb      	str	r3, [r7, #12]
			break;
 800064a:	e014      	b.n	8000676 <bReadRowState+0xbe>
		case 7 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6);
 800064c:	2140      	movs	r1, #64	; 0x40
 800064e:	480c      	ldr	r0, [pc, #48]	; (8000680 <bReadRowState+0xc8>)
 8000650:	f000 fb56 	bl	8000d00 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	60fb      	str	r3, [r7, #12]
			break;
 8000658:	e00d      	b.n	8000676 <bReadRowState+0xbe>
		case 8 :
			state=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7);
 800065a:	2180      	movs	r1, #128	; 0x80
 800065c:	4808      	ldr	r0, [pc, #32]	; (8000680 <bReadRowState+0xc8>)
 800065e:	f000 fb4f 	bl	8000d00 <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	60fb      	str	r3, [r7, #12]
			break;
 8000666:	e006      	b.n	8000676 <bReadRowState+0xbe>
		case 9:
			state=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0);
 8000668:	2101      	movs	r1, #1
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <bReadRowState+0xcc>)
 800066c:	f000 fb48 	bl	8000d00 <HAL_GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
 8000672:	60fb      	str	r3, [r7, #12]
			break;
 8000674:	bf00      	nop
	}
	return state;
 8000676:	68fb      	ldr	r3, [r7, #12]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40010800 	.word	0x40010800
 8000684:	40010c00 	.word	0x40010c00

08000688 <intReadRowState>:


int intReadRowState(void){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	int i,row=0;
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
	for (i=1;i<=9;i++)
 8000692:	2301      	movs	r3, #1
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	e00b      	b.n	80006b0 <intReadRowState+0x28>
	{
		if (bReadRowState(i))
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ff8d 	bl	80005b8 <bReadRowState>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d002      	beq.n	80006aa <intReadRowState+0x22>
		{
			row=i;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	603b      	str	r3, [r7, #0]
			break;
 80006a8:	e005      	b.n	80006b6 <intReadRowState+0x2e>
	for (i=1;i<=9;i++)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3301      	adds	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b09      	cmp	r3, #9
 80006b4:	ddf0      	ble.n	8000698 <intReadRowState+0x10>
		}
	}
	return row;
 80006b6:	683b      	ldr	r3, [r7, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006ce:	e003      	b.n	80006d8 <LoopCopyDataInit>

080006d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006d6:	3104      	adds	r1, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006e0:	d3f6      	bcc.n	80006d0 <CopyDataInit>
  ldr r2, =_sbss
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006e4:	e002      	b.n	80006ec <LoopFillZerobss>

080006e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006e8:	f842 3b04 	str.w	r3, [r2], #4

080006ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006f0:	d3f9      	bcc.n	80006e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006f2:	f7ff ffe5 	bl	80006c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f6:	f008 fec3 	bl	8009480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fa:	f7ff fd29 	bl	8000150 <main>
  bx lr
 80006fe:	4770      	bx	lr
  ldr r3, =_sidata
 8000700:	080096ac 	.word	0x080096ac
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000708:	2000015c 	.word	0x2000015c
  ldr r2, =_sbss
 800070c:	2000015c 	.word	0x2000015c
  ldr r3, = _ebss
 8000710:	200022a0 	.word	0x200022a0

08000714 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000714:	e7fe      	b.n	8000714 <ADC1_2_IRQHandler>
	...

08000718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_Init+0x28>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <HAL_Init+0x28>)
 8000722:	f043 0310 	orr.w	r3, r3, #16
 8000726:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f923 	bl	8000974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072e:	200f      	movs	r0, #15
 8000730:	f000 f808 	bl	8000744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000734:	f7ff fe7a 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40022000 	.word	0x40022000

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_InitTick+0x54>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x58>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075a:	fbb3 f3f1 	udiv	r3, r3, r1
 800075e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f93b 	bl	80009de <HAL_SYSTICK_Config>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e00e      	b.n	8000790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b0f      	cmp	r3, #15
 8000776:	d80a      	bhi.n	800078e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000778:	2200      	movs	r2, #0
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f000 f903 	bl	800098a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <HAL_InitTick+0x5c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000000 	.word	0x20000000
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000004 	.word	0x20000004

080007a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_IncTick+0x1c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_IncTick+0x20>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a03      	ldr	r2, [pc, #12]	; (80007c4 <HAL_IncTick+0x20>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20001aac 	.word	0x20001aac

080007c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return uwTick;
 80007cc:	4b02      	ldr	r3, [pc, #8]	; (80007d8 <HAL_GetTick+0x10>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	20001aac 	.word	0x20001aac

080007dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f8:	4013      	ands	r3, r2
 80007fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080e:	4a04      	ldr	r2, [pc, #16]	; (8000820 <__NVIC_SetPriorityGrouping+0x44>)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	60d3      	str	r3, [r2, #12]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <__NVIC_GetPriorityGrouping+0x18>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	f003 0307 	and.w	r3, r3, #7
}
 8000832:	4618      	mov	r0, r3
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084e:	2b00      	cmp	r3, #0
 8000850:	db0b      	blt.n	800086a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	f003 021f 	and.w	r2, r3, #31
 8000858:	4906      	ldr	r1, [pc, #24]	; (8000874 <__NVIC_EnableIRQ+0x34>)
 800085a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085e:	095b      	lsrs	r3, r3, #5
 8000860:	2001      	movs	r0, #1
 8000862:	fa00 f202 	lsl.w	r2, r0, r2
 8000866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	e000e100 	.word	0xe000e100

08000878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000888:	2b00      	cmp	r3, #0
 800088a:	db0a      	blt.n	80008a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	b2da      	uxtb	r2, r3
 8000890:	490c      	ldr	r1, [pc, #48]	; (80008c4 <__NVIC_SetPriority+0x4c>)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	0112      	lsls	r2, r2, #4
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	440b      	add	r3, r1
 800089c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a0:	e00a      	b.n	80008b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4908      	ldr	r1, [pc, #32]	; (80008c8 <__NVIC_SetPriority+0x50>)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	f003 030f 	and.w	r3, r3, #15
 80008ae:	3b04      	subs	r3, #4
 80008b0:	0112      	lsls	r2, r2, #4
 80008b2:	b2d2      	uxtb	r2, r2
 80008b4:	440b      	add	r3, r1
 80008b6:	761a      	strb	r2, [r3, #24]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b089      	sub	sp, #36	; 0x24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	f1c3 0307 	rsb	r3, r3, #7
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	bf28      	it	cs
 80008ea:	2304      	movcs	r3, #4
 80008ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3304      	adds	r3, #4
 80008f2:	2b06      	cmp	r3, #6
 80008f4:	d902      	bls.n	80008fc <NVIC_EncodePriority+0x30>
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3b03      	subs	r3, #3
 80008fa:	e000      	b.n	80008fe <NVIC_EncodePriority+0x32>
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000900:	f04f 32ff 	mov.w	r2, #4294967295
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43da      	mvns	r2, r3
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	401a      	ands	r2, r3
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000914:	f04f 31ff 	mov.w	r1, #4294967295
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	fa01 f303 	lsl.w	r3, r1, r3
 800091e:	43d9      	mvns	r1, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000924:	4313      	orrs	r3, r2
         );
}
 8000926:	4618      	mov	r0, r3
 8000928:	3724      	adds	r7, #36	; 0x24
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000940:	d301      	bcc.n	8000946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000942:	2301      	movs	r3, #1
 8000944:	e00f      	b.n	8000966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <SysTick_Config+0x40>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094e:	210f      	movs	r1, #15
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f7ff ff90 	bl	8000878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <SysTick_Config+0x40>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <SysTick_Config+0x40>)
 8000960:	2207      	movs	r2, #7
 8000962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	e000e010 	.word	0xe000e010

08000974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ff2d 	bl	80007dc <__NVIC_SetPriorityGrouping>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
 8000996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800099c:	f7ff ff42 	bl	8000824 <__NVIC_GetPriorityGrouping>
 80009a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	6978      	ldr	r0, [r7, #20]
 80009a8:	f7ff ff90 	bl	80008cc <NVIC_EncodePriority>
 80009ac:	4602      	mov	r2, r0
 80009ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b2:	4611      	mov	r1, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff5f 	bl	8000878 <__NVIC_SetPriority>
}
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4603      	mov	r3, r0
 80009ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff35 	bl	8000840 <__NVIC_EnableIRQ>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffa2 	bl	8000930 <SysTick_Config>
 80009ec:	4603      	mov	r3, r0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b08b      	sub	sp, #44	; 0x2c
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0a:	e169      	b.n	8000ce0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	69fa      	ldr	r2, [r7, #28]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	f040 8158 	bne.w	8000cda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	4a9a      	ldr	r2, [pc, #616]	; (8000c98 <HAL_GPIO_Init+0x2a0>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d05e      	beq.n	8000af2 <HAL_GPIO_Init+0xfa>
 8000a34:	4a98      	ldr	r2, [pc, #608]	; (8000c98 <HAL_GPIO_Init+0x2a0>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d875      	bhi.n	8000b26 <HAL_GPIO_Init+0x12e>
 8000a3a:	4a98      	ldr	r2, [pc, #608]	; (8000c9c <HAL_GPIO_Init+0x2a4>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d058      	beq.n	8000af2 <HAL_GPIO_Init+0xfa>
 8000a40:	4a96      	ldr	r2, [pc, #600]	; (8000c9c <HAL_GPIO_Init+0x2a4>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d86f      	bhi.n	8000b26 <HAL_GPIO_Init+0x12e>
 8000a46:	4a96      	ldr	r2, [pc, #600]	; (8000ca0 <HAL_GPIO_Init+0x2a8>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d052      	beq.n	8000af2 <HAL_GPIO_Init+0xfa>
 8000a4c:	4a94      	ldr	r2, [pc, #592]	; (8000ca0 <HAL_GPIO_Init+0x2a8>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d869      	bhi.n	8000b26 <HAL_GPIO_Init+0x12e>
 8000a52:	4a94      	ldr	r2, [pc, #592]	; (8000ca4 <HAL_GPIO_Init+0x2ac>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d04c      	beq.n	8000af2 <HAL_GPIO_Init+0xfa>
 8000a58:	4a92      	ldr	r2, [pc, #584]	; (8000ca4 <HAL_GPIO_Init+0x2ac>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d863      	bhi.n	8000b26 <HAL_GPIO_Init+0x12e>
 8000a5e:	4a92      	ldr	r2, [pc, #584]	; (8000ca8 <HAL_GPIO_Init+0x2b0>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d046      	beq.n	8000af2 <HAL_GPIO_Init+0xfa>
 8000a64:	4a90      	ldr	r2, [pc, #576]	; (8000ca8 <HAL_GPIO_Init+0x2b0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d85d      	bhi.n	8000b26 <HAL_GPIO_Init+0x12e>
 8000a6a:	2b12      	cmp	r3, #18
 8000a6c:	d82a      	bhi.n	8000ac4 <HAL_GPIO_Init+0xcc>
 8000a6e:	2b12      	cmp	r3, #18
 8000a70:	d859      	bhi.n	8000b26 <HAL_GPIO_Init+0x12e>
 8000a72:	a201      	add	r2, pc, #4	; (adr r2, 8000a78 <HAL_GPIO_Init+0x80>)
 8000a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a78:	08000af3 	.word	0x08000af3
 8000a7c:	08000acd 	.word	0x08000acd
 8000a80:	08000adf 	.word	0x08000adf
 8000a84:	08000b21 	.word	0x08000b21
 8000a88:	08000b27 	.word	0x08000b27
 8000a8c:	08000b27 	.word	0x08000b27
 8000a90:	08000b27 	.word	0x08000b27
 8000a94:	08000b27 	.word	0x08000b27
 8000a98:	08000b27 	.word	0x08000b27
 8000a9c:	08000b27 	.word	0x08000b27
 8000aa0:	08000b27 	.word	0x08000b27
 8000aa4:	08000b27 	.word	0x08000b27
 8000aa8:	08000b27 	.word	0x08000b27
 8000aac:	08000b27 	.word	0x08000b27
 8000ab0:	08000b27 	.word	0x08000b27
 8000ab4:	08000b27 	.word	0x08000b27
 8000ab8:	08000b27 	.word	0x08000b27
 8000abc:	08000ad5 	.word	0x08000ad5
 8000ac0:	08000ae9 	.word	0x08000ae9
 8000ac4:	4a79      	ldr	r2, [pc, #484]	; (8000cac <HAL_GPIO_Init+0x2b4>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d013      	beq.n	8000af2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aca:	e02c      	b.n	8000b26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	623b      	str	r3, [r7, #32]
          break;
 8000ad2:	e029      	b.n	8000b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	623b      	str	r3, [r7, #32]
          break;
 8000adc:	e024      	b.n	8000b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	3308      	adds	r3, #8
 8000ae4:	623b      	str	r3, [r7, #32]
          break;
 8000ae6:	e01f      	b.n	8000b28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	330c      	adds	r3, #12
 8000aee:	623b      	str	r3, [r7, #32]
          break;
 8000af0:	e01a      	b.n	8000b28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d102      	bne.n	8000b00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000afa:	2304      	movs	r3, #4
 8000afc:	623b      	str	r3, [r7, #32]
          break;
 8000afe:	e013      	b.n	8000b28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d105      	bne.n	8000b14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69fa      	ldr	r2, [r7, #28]
 8000b10:	611a      	str	r2, [r3, #16]
          break;
 8000b12:	e009      	b.n	8000b28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b14:	2308      	movs	r3, #8
 8000b16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	69fa      	ldr	r2, [r7, #28]
 8000b1c:	615a      	str	r2, [r3, #20]
          break;
 8000b1e:	e003      	b.n	8000b28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
          break;
 8000b24:	e000      	b.n	8000b28 <HAL_GPIO_Init+0x130>
          break;
 8000b26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	2bff      	cmp	r3, #255	; 0xff
 8000b2c:	d801      	bhi.n	8000b32 <HAL_GPIO_Init+0x13a>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	e001      	b.n	8000b36 <HAL_GPIO_Init+0x13e>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	2bff      	cmp	r3, #255	; 0xff
 8000b3c:	d802      	bhi.n	8000b44 <HAL_GPIO_Init+0x14c>
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	e002      	b.n	8000b4a <HAL_GPIO_Init+0x152>
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	3b08      	subs	r3, #8
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	210f      	movs	r1, #15
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	fa01 f303 	lsl.w	r3, r1, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	6a39      	ldr	r1, [r7, #32]
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	fa01 f303 	lsl.w	r3, r1, r3
 8000b64:	431a      	orrs	r2, r3
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f000 80b1 	beq.w	8000cda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b78:	4b4d      	ldr	r3, [pc, #308]	; (8000cb0 <HAL_GPIO_Init+0x2b8>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a4c      	ldr	r2, [pc, #304]	; (8000cb0 <HAL_GPIO_Init+0x2b8>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b4a      	ldr	r3, [pc, #296]	; (8000cb0 <HAL_GPIO_Init+0x2b8>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b90:	4a48      	ldr	r2, [pc, #288]	; (8000cb4 <HAL_GPIO_Init+0x2bc>)
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	3302      	adds	r3, #2
 8000b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba0:	f003 0303 	and.w	r3, r3, #3
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	220f      	movs	r2, #15
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a40      	ldr	r2, [pc, #256]	; (8000cb8 <HAL_GPIO_Init+0x2c0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d013      	beq.n	8000be4 <HAL_GPIO_Init+0x1ec>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a3f      	ldr	r2, [pc, #252]	; (8000cbc <HAL_GPIO_Init+0x2c4>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d00d      	beq.n	8000be0 <HAL_GPIO_Init+0x1e8>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a3e      	ldr	r2, [pc, #248]	; (8000cc0 <HAL_GPIO_Init+0x2c8>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d007      	beq.n	8000bdc <HAL_GPIO_Init+0x1e4>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a3d      	ldr	r2, [pc, #244]	; (8000cc4 <HAL_GPIO_Init+0x2cc>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d101      	bne.n	8000bd8 <HAL_GPIO_Init+0x1e0>
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	e006      	b.n	8000be6 <HAL_GPIO_Init+0x1ee>
 8000bd8:	2304      	movs	r3, #4
 8000bda:	e004      	b.n	8000be6 <HAL_GPIO_Init+0x1ee>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e002      	b.n	8000be6 <HAL_GPIO_Init+0x1ee>
 8000be0:	2301      	movs	r3, #1
 8000be2:	e000      	b.n	8000be6 <HAL_GPIO_Init+0x1ee>
 8000be4:	2300      	movs	r3, #0
 8000be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be8:	f002 0203 	and.w	r2, r2, #3
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	4093      	lsls	r3, r2
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bf6:	492f      	ldr	r1, [pc, #188]	; (8000cb4 <HAL_GPIO_Init+0x2bc>)
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d006      	beq.n	8000c1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c10:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	492c      	ldr	r1, [pc, #176]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	600b      	str	r3, [r1, #0]
 8000c1c:	e006      	b.n	8000c2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c1e:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	4928      	ldr	r1, [pc, #160]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c28:	4013      	ands	r3, r2
 8000c2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d006      	beq.n	8000c46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c38:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	4922      	ldr	r1, [pc, #136]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	604b      	str	r3, [r1, #4]
 8000c44:	e006      	b.n	8000c54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	491e      	ldr	r1, [pc, #120]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d006      	beq.n	8000c6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	4918      	ldr	r1, [pc, #96]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	608b      	str	r3, [r1, #8]
 8000c6c:	e006      	b.n	8000c7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	4914      	ldr	r1, [pc, #80]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c78:	4013      	ands	r3, r2
 8000c7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d021      	beq.n	8000ccc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	60cb      	str	r3, [r1, #12]
 8000c94:	e021      	b.n	8000cda <HAL_GPIO_Init+0x2e2>
 8000c96:	bf00      	nop
 8000c98:	10320000 	.word	0x10320000
 8000c9c:	10310000 	.word	0x10310000
 8000ca0:	10220000 	.word	0x10220000
 8000ca4:	10210000 	.word	0x10210000
 8000ca8:	10120000 	.word	0x10120000
 8000cac:	10110000 	.word	0x10110000
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010000 	.word	0x40010000
 8000cb8:	40010800 	.word	0x40010800
 8000cbc:	40010c00 	.word	0x40010c00
 8000cc0:	40011000 	.word	0x40011000
 8000cc4:	40011400 	.word	0x40011400
 8000cc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_GPIO_Init+0x304>)
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	4909      	ldr	r1, [pc, #36]	; (8000cfc <HAL_GPIO_Init+0x304>)
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	3301      	adds	r3, #1
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f47f ae8e 	bne.w	8000a0c <HAL_GPIO_Init+0x14>
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
 8000cf4:	372c      	adds	r7, #44	; 0x2c
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	40010400 	.word	0x40010400

08000d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	887b      	ldrh	r3, [r7, #2]
 8000d12:	4013      	ands	r3, r2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d002      	beq.n	8000d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
 8000d1c:	e001      	b.n	8000d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	460b      	mov	r3, r1
 8000d38:	807b      	strh	r3, [r7, #2]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d3e:	787b      	ldrb	r3, [r7, #1]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d44:	887a      	ldrh	r2, [r7, #2]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d4a:	e003      	b.n	8000d54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	041a      	lsls	r2, r3, #16
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	611a      	str	r2, [r3, #16]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr

08000d5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d60:	b08b      	sub	sp, #44	; 0x2c
 8000d62:	af06      	add	r7, sp, #24
 8000d64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e0fd      	b.n	8000f6c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d106      	bne.n	8000d8a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f008 f8f5 	bl	8008f74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 f820 	bl	8002ddc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	687e      	ldr	r6, [r7, #4]
 8000da4:	466d      	mov	r5, sp
 8000da6:	f106 0410 	add.w	r4, r6, #16
 8000daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dae:	6823      	ldr	r3, [r4, #0]
 8000db0:	602b      	str	r3, [r5, #0]
 8000db2:	1d33      	adds	r3, r6, #4
 8000db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000db6:	6838      	ldr	r0, [r7, #0]
 8000db8:	f001 ffea 	bl	8002d90 <USB_CoreInit>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d005      	beq.n	8000dce <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e0ce      	b.n	8000f6c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 f81b 	bl	8002e10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73fb      	strb	r3, [r7, #15]
 8000dde:	e04c      	b.n	8000e7a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	440b      	add	r3, r1
 8000df0:	3301      	adds	r3, #1
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000df6:	7bfb      	ldrb	r3, [r7, #15]
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	440b      	add	r3, r1
 8000e06:	7bfa      	ldrb	r2, [r7, #15]
 8000e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e0a:	7bfa      	ldrb	r2, [r7, #15]
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	b298      	uxth	r0, r3
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	4413      	add	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	440b      	add	r3, r1
 8000e1c:	3336      	adds	r3, #54	; 0x36
 8000e1e:	4602      	mov	r2, r0
 8000e20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	440b      	add	r3, r1
 8000e32:	3303      	adds	r3, #3
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e38:	7bfa      	ldrb	r2, [r7, #15]
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	440b      	add	r3, r1
 8000e46:	3338      	adds	r3, #56	; 0x38
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e4c:	7bfa      	ldrb	r2, [r7, #15]
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	440b      	add	r3, r1
 8000e5a:	333c      	adds	r3, #60	; 0x3c
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e60:	7bfa      	ldrb	r2, [r7, #15]
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	440b      	add	r3, r1
 8000e6e:	3340      	adds	r3, #64	; 0x40
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	3301      	adds	r3, #1
 8000e78:	73fb      	strb	r3, [r7, #15]
 8000e7a:	7bfa      	ldrb	r2, [r7, #15]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d3ad      	bcc.n	8000de0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e044      	b.n	8000f14 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	440b      	add	r3, r1
 8000e98:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ea0:	7bfa      	ldrb	r2, [r7, #15]
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	00db      	lsls	r3, r3, #3
 8000eac:	440b      	add	r3, r1
 8000eae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000eb2:	7bfa      	ldrb	r2, [r7, #15]
 8000eb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ecc:	7bfa      	ldrb	r2, [r7, #15]
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	440b      	add	r3, r1
 8000eda:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	440b      	add	r3, r1
 8000ef0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	3301      	adds	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d3b5      	bcc.n	8000e8a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	687e      	ldr	r6, [r7, #4]
 8000f26:	466d      	mov	r5, sp
 8000f28:	f106 0410 	add.w	r4, r6, #16
 8000f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f30:	6823      	ldr	r3, [r4, #0]
 8000f32:	602b      	str	r3, [r5, #0]
 8000f34:	1d33      	adds	r3, r6, #4
 8000f36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f38:	6838      	ldr	r0, [r7, #0]
 8000f3a:	f001 ff75 	bl	8002e28 <USB_DevInit>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d005      	beq.n	8000f50 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2202      	movs	r2, #2
 8000f48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e00d      	b.n	8000f6c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 ff0f 	bl	8004d88 <USB_DevDisconnect>

  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d101      	bne.n	8000f8a <HAL_PCD_Start+0x16>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e016      	b.n	8000fb8 <HAL_PCD_Start+0x44>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 ff0a 	bl	8002db0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f008 fa37 	bl	8009412 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 fee3 	bl	8004d74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f003 fee5 	bl	8004d9c <USB_ReadInterrupts>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fdc:	d102      	bne.n	8000fe4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 fb4a 	bl	8001678 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f003 fed7 	bl	8004d9c <USB_ReadInterrupts>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff8:	d112      	bne.n	8001020 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001002:	b29a      	uxth	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800100c:	b292      	uxth	r2, r2
 800100e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f008 f829 	bl	800906a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001018:	2100      	movs	r1, #0
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f925 	bl	800126a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f003 feb9 	bl	8004d9c <USB_ReadInterrupts>
 800102a:	4603      	mov	r3, r0
 800102c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001034:	d10b      	bne.n	800104e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800103e:	b29a      	uxth	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001048:	b292      	uxth	r2, r2
 800104a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f003 fea2 	bl	8004d9c <USB_ReadInterrupts>
 8001058:	4603      	mov	r3, r0
 800105a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800105e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001062:	d10b      	bne.n	800107c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800106c:	b29a      	uxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001076:	b292      	uxth	r2, r2
 8001078:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f003 fe8b 	bl	8004d9c <USB_ReadInterrupts>
 8001086:	4603      	mov	r3, r0
 8001088:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800108c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001090:	d126      	bne.n	80010e0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800109a:	b29a      	uxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 0204 	bic.w	r2, r2, #4
 80010a4:	b292      	uxth	r2, r2
 80010a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f022 0208 	bic.w	r2, r2, #8
 80010bc:	b292      	uxth	r2, r2
 80010be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f008 f80a 	bl	80090dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010da:	b292      	uxth	r2, r2
 80010dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f003 fe59 	bl	8004d9c <USB_ReadInterrupts>
 80010ea:	4603      	mov	r3, r0
 80010ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010f4:	f040 8084 	bne.w	8001200 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	77fb      	strb	r3, [r7, #31]
 80010fc:	e011      	b.n	8001122 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	7ffb      	ldrb	r3, [r7, #31]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	441a      	add	r2, r3
 800110a:	7ffb      	ldrb	r3, [r7, #31]
 800110c:	8812      	ldrh	r2, [r2, #0]
 800110e:	b292      	uxth	r2, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	f107 0120 	add.w	r1, r7, #32
 8001116:	440b      	add	r3, r1
 8001118:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800111c:	7ffb      	ldrb	r3, [r7, #31]
 800111e:	3301      	adds	r3, #1
 8001120:	77fb      	strb	r3, [r7, #31]
 8001122:	7ffb      	ldrb	r3, [r7, #31]
 8001124:	2b07      	cmp	r3, #7
 8001126:	d9ea      	bls.n	80010fe <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001130:	b29a      	uxth	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f042 0201 	orr.w	r2, r2, #1
 800113a:	b292      	uxth	r2, r2
 800113c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001148:	b29a      	uxth	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0201 	bic.w	r2, r2, #1
 8001152:	b292      	uxth	r2, r2
 8001154:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001158:	bf00      	nop
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001162:	b29b      	uxth	r3, r3
 8001164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f6      	beq.n	800115a <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001174:	b29a      	uxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800117e:	b292      	uxth	r2, r2
 8001180:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001184:	2300      	movs	r3, #0
 8001186:	77fb      	strb	r3, [r7, #31]
 8001188:	e010      	b.n	80011ac <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800118a:	7ffb      	ldrb	r3, [r7, #31]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	4611      	mov	r1, r2
 8001192:	7ffa      	ldrb	r2, [r7, #31]
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	440a      	add	r2, r1
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	f107 0120 	add.w	r1, r7, #32
 800119e:	440b      	add	r3, r1
 80011a0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80011a4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80011a6:	7ffb      	ldrb	r3, [r7, #31]
 80011a8:	3301      	adds	r3, #1
 80011aa:	77fb      	strb	r3, [r7, #31]
 80011ac:	7ffb      	ldrb	r3, [r7, #31]
 80011ae:	2b07      	cmp	r3, #7
 80011b0:	d9eb      	bls.n	800118a <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 0208 	orr.w	r2, r2, #8
 80011c4:	b292      	uxth	r2, r2
 80011c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011dc:	b292      	uxth	r2, r2
 80011de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f042 0204 	orr.w	r2, r2, #4
 80011f4:	b292      	uxth	r2, r2
 80011f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f007 ff54 	bl	80090a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fdc9 	bl	8004d9c <USB_ReadInterrupts>
 800120a:	4603      	mov	r3, r0
 800120c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001214:	d10e      	bne.n	8001234 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800121e:	b29a      	uxth	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001228:	b292      	uxth	r2, r2
 800122a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f007 ff0d 	bl	800904e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f003 fdaf 	bl	8004d9c <USB_ReadInterrupts>
 800123e:	4603      	mov	r3, r0
 8001240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001248:	d10b      	bne.n	8001262 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001252:	b29a      	uxth	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800125c:	b292      	uxth	r2, r2
 800125e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <HAL_PCD_SetAddress+0x1a>
 8001280:	2302      	movs	r3, #2
 8001282:	e013      	b.n	80012ac <HAL_PCD_SetAddress+0x42>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	78fa      	ldrb	r2, [r7, #3]
 8001290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	78fa      	ldrb	r2, [r7, #3]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f003 fd56 	bl	8004d4e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	4608      	mov	r0, r1
 80012be:	4611      	mov	r1, r2
 80012c0:	461a      	mov	r2, r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	70fb      	strb	r3, [r7, #3]
 80012c6:	460b      	mov	r3, r1
 80012c8:	803b      	strh	r3, [r7, #0]
 80012ca:	4613      	mov	r3, r2
 80012cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	da0e      	bge.n	80012f8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2201      	movs	r2, #1
 80012f4:	705a      	strb	r2, [r3, #1]
 80012f6:	e00e      	b.n	8001316 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	f003 0207 	and.w	r2, r3, #7
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001316:	78fb      	ldrb	r3, [r7, #3]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	b2da      	uxtb	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001322:	883a      	ldrh	r2, [r7, #0]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	78ba      	ldrb	r2, [r7, #2]
 800132c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	785b      	ldrb	r3, [r3, #1]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b29a      	uxth	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001340:	78bb      	ldrb	r3, [r7, #2]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d102      	bne.n	800134c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001352:	2b01      	cmp	r3, #1
 8001354:	d101      	bne.n	800135a <HAL_PCD_EP_Open+0xa6>
 8001356:	2302      	movs	r3, #2
 8001358:	e00e      	b.n	8001378 <HAL_PCD_EP_Open+0xc4>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68f9      	ldr	r1, [r7, #12]
 8001368:	4618      	mov	r0, r3
 800136a:	f001 fd7d 	bl	8002e68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001376:	7afb      	ldrb	r3, [r7, #11]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800138c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001390:	2b00      	cmp	r3, #0
 8001392:	da0e      	bge.n	80013b2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2201      	movs	r2, #1
 80013ae:	705a      	strb	r2, [r3, #1]
 80013b0:	e00e      	b.n	80013d0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	f003 0207 	and.w	r2, r3, #7
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_PCD_EP_Close+0x6a>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e00e      	b.n	8001408 <HAL_PCD_EP_Close+0x88>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68f9      	ldr	r1, [r7, #12]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f002 f89f 	bl	800353c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	460b      	mov	r3, r1
 800141e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	f003 0207 	and.w	r2, r3, #7
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	4413      	add	r3, r2
 8001436:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2200      	movs	r2, #0
 800144e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001450:	7afb      	ldrb	r3, [r7, #11]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	b2da      	uxtb	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800145c:	7afb      	ldrb	r3, [r7, #11]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	2b00      	cmp	r3, #0
 8001464:	d106      	bne.n	8001474 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6979      	ldr	r1, [r7, #20]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fa51 	bl	8003914 <USB_EPStartXfer>
 8001472:	e005      	b.n	8001480 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6979      	ldr	r1, [r7, #20]
 800147a:	4618      	mov	r0, r3
 800147c:	f002 fa4a 	bl	8003914 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	60f8      	str	r0, [r7, #12]
 8001492:	607a      	str	r2, [r7, #4]
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	460b      	mov	r3, r1
 8001498:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800149a:	7afb      	ldrb	r3, [r7, #11]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4413      	add	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2200      	movs	r2, #0
 80014ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2201      	movs	r2, #1
 80014d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014d6:	7afb      	ldrb	r3, [r7, #11]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80014e2:	7afb      	ldrb	r3, [r7, #11]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d106      	bne.n	80014fa <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6979      	ldr	r1, [r7, #20]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fa0e 	bl	8003914 <USB_EPStartXfer>
 80014f8:	e005      	b.n	8001506 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6979      	ldr	r1, [r7, #20]
 8001500:	4618      	mov	r0, r3
 8001502:	f002 fa07 	bl	8003914 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	f003 0207 	and.w	r2, r3, #7
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	429a      	cmp	r2, r3
 8001528:	d901      	bls.n	800152e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e04c      	b.n	80015c8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800152e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001532:	2b00      	cmp	r3, #0
 8001534:	da0e      	bge.n	8001554 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	f003 0307 	and.w	r3, r3, #7
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2201      	movs	r2, #1
 8001550:	705a      	strb	r2, [r3, #1]
 8001552:	e00c      	b.n	800156e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001554:	78fa      	ldrb	r2, [r7, #3]
 8001556:	4613      	mov	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2201      	movs	r2, #1
 8001572:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	b2da      	uxtb	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_PCD_EP_SetStall+0x7e>
 800158a:	2302      	movs	r3, #2
 800158c:	e01c      	b.n	80015c8 <HAL_PCD_EP_SetStall+0xb8>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68f9      	ldr	r1, [r7, #12]
 800159c:	4618      	mov	r0, r3
 800159e:	f003 fad9 	bl	8004b54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d108      	bne.n	80015be <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80015b6:	4619      	mov	r1, r3
 80015b8:	4610      	mov	r0, r2
 80015ba:	f003 fbfe 	bl	8004dba <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	f003 020f 	and.w	r2, r3, #15
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d901      	bls.n	80015ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e040      	b.n	8001670 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	da0e      	bge.n	8001614 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2201      	movs	r2, #1
 8001610:	705a      	strb	r2, [r3, #1]
 8001612:	e00e      	b.n	8001632 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	f003 0207 	and.w	r2, r3, #7
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	b2da      	uxtb	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_PCD_EP_ClrStall+0x82>
 800164e:	2302      	movs	r3, #2
 8001650:	e00e      	b.n	8001670 <HAL_PCD_EP_ClrStall+0xa0>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68f9      	ldr	r1, [r7, #12]
 8001660:	4618      	mov	r0, r3
 8001662:	f003 fac7 	bl	8004bf4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08e      	sub	sp, #56	; 0x38
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001680:	e2df      	b.n	8001c42 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800168a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800168c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001698:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800169c:	2b00      	cmp	r3, #0
 800169e:	f040 8158 	bne.w	8001952 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80016a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d152      	bne.n	8001752 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80016b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016bc:	81fb      	strh	r3, [r7, #14]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	89fb      	ldrh	r3, [r7, #14]
 80016c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3328      	adds	r3, #40	; 0x28
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016de:	b29b      	uxth	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4413      	add	r3, r2
 80016ea:	3302      	adds	r3, #2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	441a      	add	r2, r3
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001710:	2100      	movs	r1, #0
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f007 fc81 	bl	800901a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 828e 	beq.w	8001c42 <PCD_EP_ISR_Handler+0x5ca>
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f040 8289 	bne.w	8001c42 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800173c:	b2da      	uxtb	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	b292      	uxth	r2, r2
 8001744:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001750:	e277      	b.n	8001c42 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001762:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001768:	2b00      	cmp	r3, #0
 800176a:	d034      	beq.n	80017d6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001774:	b29b      	uxth	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	3306      	adds	r3, #6
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6812      	ldr	r2, [r2, #0]
 8001788:	4413      	add	r3, r2
 800178a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	f003 fb55 	bl	8004e5a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017bc:	4013      	ands	r3, r2
 80017be:	823b      	strh	r3, [r7, #16]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	8a3a      	ldrh	r2, [r7, #16]
 80017c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017ca:	b292      	uxth	r2, r2
 80017cc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f007 fbf6 	bl	8008fc0 <HAL_PCD_SetupStageCallback>
 80017d4:	e235      	b.n	8001c42 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017d6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f280 8231 	bge.w	8001c42 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017ec:	4013      	ands	r3, r2
 80017ee:	83bb      	strh	r3, [r7, #28]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	8bba      	ldrh	r2, [r7, #28]
 80017f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017fa:	b292      	uxth	r2, r2
 80017fc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001806:	b29b      	uxth	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	4413      	add	r3, r2
 8001812:	3306      	adds	r3, #6
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	4413      	add	r3, r2
 800181c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d019      	beq.n	8001866 <PCD_EP_ISR_Handler+0x1ee>
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d015      	beq.n	8001866 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	6959      	ldr	r1, [r3, #20]
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800184a:	b29b      	uxth	r3, r3
 800184c:	f003 fb05 	bl	8004e5a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	695a      	ldr	r2, [r3, #20]
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	441a      	add	r2, r3
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800185e:	2100      	movs	r1, #0
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f007 fbbf 	bl	8008fe4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001874:	b29b      	uxth	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	4413      	add	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d112      	bne.n	80018b4 <PCD_EP_ISR_Handler+0x23c>
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	b29b      	uxth	r3, r3
 8001894:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001898:	b29a      	uxth	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	801a      	strh	r2, [r3, #0]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	801a      	strh	r2, [r3, #0]
 80018b2:	e02f      	b.n	8001914 <PCD_EP_ISR_Handler+0x29c>
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	2b3e      	cmp	r3, #62	; 0x3e
 80018ba:	d813      	bhi.n	80018e4 <PCD_EP_ISR_Handler+0x26c>
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	633b      	str	r3, [r7, #48]	; 0x30
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <PCD_EP_ISR_Handler+0x25e>
 80018d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d2:	3301      	adds	r3, #1
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
 80018d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d8:	b29b      	uxth	r3, r3
 80018da:	029b      	lsls	r3, r3, #10
 80018dc:	b29a      	uxth	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	801a      	strh	r2, [r3, #0]
 80018e2:	e017      	b.n	8001914 <PCD_EP_ISR_Handler+0x29c>
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	095b      	lsrs	r3, r3, #5
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d102      	bne.n	80018fe <PCD_EP_ISR_Handler+0x286>
 80018f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018fa:	3b01      	subs	r3, #1
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
 80018fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001900:	b29b      	uxth	r3, r3
 8001902:	029b      	lsls	r3, r3, #10
 8001904:	b29b      	uxth	r3, r3
 8001906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800190a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800190e:	b29a      	uxth	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001924:	827b      	strh	r3, [r7, #18]
 8001926:	8a7b      	ldrh	r3, [r7, #18]
 8001928:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800192c:	827b      	strh	r3, [r7, #18]
 800192e:	8a7b      	ldrh	r3, [r7, #18]
 8001930:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001934:	827b      	strh	r3, [r7, #18]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	8a7b      	ldrh	r3, [r7, #18]
 800193c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194c:	b29b      	uxth	r3, r3
 800194e:	8013      	strh	r3, [r2, #0]
 8001950:	e177      	b.n	8001c42 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001964:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001968:	2b00      	cmp	r3, #0
 800196a:	f280 80ea 	bge.w	8001b42 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	b29a      	uxth	r2, r3
 8001980:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001984:	4013      	ands	r3, r2
 8001986:	853b      	strh	r3, [r7, #40]	; 0x28
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001998:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800199c:	b292      	uxth	r2, r2
 800199e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80019a0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	7b1b      	ldrb	r3, [r3, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d122      	bne.n	8001a04 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4413      	add	r3, r2
 80019d2:	3306      	adds	r3, #6
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6812      	ldr	r2, [r2, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019e6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80019e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8087 	beq.w	8001afe <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	6959      	ldr	r1, [r3, #20]
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	88da      	ldrh	r2, [r3, #6]
 80019fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019fe:	f003 fa2c 	bl	8004e5a <USB_ReadPMA>
 8001a02:	e07c      	b.n	8001afe <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	78db      	ldrb	r3, [r3, #3]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d108      	bne.n	8001a1e <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a0e:	461a      	mov	r2, r3
 8001a10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f923 	bl	8001c5e <HAL_PCD_EP_DB_Receive>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001a1c:	e06f      	b.n	8001afe <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a38:	847b      	strh	r3, [r7, #34]	; 0x22
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	441a      	add	r2, r3
 8001a48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d021      	beq.n	8001abc <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aa0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001aa2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d02a      	beq.n	8001afe <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	6959      	ldr	r1, [r3, #20]
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	891a      	ldrh	r2, [r3, #8]
 8001ab4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ab6:	f003 f9d0 	bl	8004e5a <USB_ReadPMA>
 8001aba:	e020      	b.n	8001afe <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4413      	add	r3, r2
 8001ad0:	3306      	adds	r3, #6
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	4413      	add	r3, r2
 8001ada:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ae4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001ae6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	6959      	ldr	r1, [r3, #20]
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	895a      	ldrh	r2, [r3, #10]
 8001af8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001afa:	f003 f9ae 	bl	8004e5a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b04:	441a      	add	r2, r3
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b10:	441a      	add	r2, r3
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d004      	beq.n	8001b28 <PCD_EP_ISR_Handler+0x4b0>
 8001b1e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d206      	bcs.n	8001b36 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f007 fa58 	bl	8008fe4 <HAL_PCD_DataOutStageCallback>
 8001b34:	e005      	b.n	8001b42 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f001 fee9 	bl	8003914 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d07a      	beq.n	8001c42 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b50:	1c5a      	adds	r2, r3, #1
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b7a:	843b      	strh	r3, [r7, #32]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	441a      	add	r2, r3
 8001b8a:	8c3b      	ldrh	r3, [r7, #32]
 8001b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	78db      	ldrb	r3, [r3, #3]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d108      	bne.n	8001bb2 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d146      	bne.n	8001c36 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001ba8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d141      	bne.n	8001c36 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bda:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	699a      	ldr	r2, [r3, #24]
 8001be0:	8bfb      	ldrh	r3, [r7, #30]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d906      	bls.n	8001bf4 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	8bfb      	ldrh	r3, [r7, #30]
 8001bec:	1ad2      	subs	r2, r2, r3
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	619a      	str	r2, [r3, #24]
 8001bf2:	e002      	b.n	8001bfa <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	4619      	mov	r1, r3
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f007 fa06 	bl	800901a <HAL_PCD_DataInStageCallback>
 8001c0e:	e018      	b.n	8001c42 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	8bfb      	ldrh	r3, [r7, #30]
 8001c16:	441a      	add	r2, r3
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	69da      	ldr	r2, [r3, #28]
 8001c20:	8bfb      	ldrh	r3, [r7, #30]
 8001c22:	441a      	add	r2, r3
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f001 fe70 	bl	8003914 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001c34:	e005      	b.n	8001c42 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001c36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f91b 	bl	8001e78 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f6ff ad17 	blt.w	8001682 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3738      	adds	r7, #56	; 0x38
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b088      	sub	sp, #32
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d07e      	beq.n	8001d74 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c9e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	699a      	ldr	r2, [r3, #24]
 8001ca4:	8b7b      	ldrh	r3, [r7, #26]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d306      	bcc.n	8001cb8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	8b7b      	ldrh	r3, [r7, #26]
 8001cb0:	1ad2      	subs	r2, r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	619a      	str	r2, [r3, #24]
 8001cb6:	e002      	b.n	8001cbe <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d123      	bne.n	8001d0e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ce0:	833b      	strh	r3, [r7, #24]
 8001ce2:	8b3b      	ldrh	r3, [r7, #24]
 8001ce4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ce8:	833b      	strh	r3, [r7, #24]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	441a      	add	r2, r3
 8001cf8:	8b3b      	ldrh	r3, [r7, #24]
 8001cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01f      	beq.n	8001d58 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d32:	82fb      	strh	r3, [r7, #22]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	441a      	add	r2, r3
 8001d42:	8afb      	ldrh	r3, [r7, #22]
 8001d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d58:	8b7b      	ldrh	r3, [r7, #26]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8087 	beq.w	8001e6e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	6959      	ldr	r1, [r3, #20]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	891a      	ldrh	r2, [r3, #8]
 8001d6c:	8b7b      	ldrh	r3, [r7, #26]
 8001d6e:	f003 f874 	bl	8004e5a <USB_ReadPMA>
 8001d72:	e07c      	b.n	8001e6e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	3306      	adds	r3, #6
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d9c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	8b7b      	ldrh	r3, [r7, #26]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d306      	bcc.n	8001db6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	699a      	ldr	r2, [r3, #24]
 8001dac:	8b7b      	ldrh	r3, [r7, #26]
 8001dae:	1ad2      	subs	r2, r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	619a      	str	r2, [r3, #24]
 8001db4:	e002      	b.n	8001dbc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d123      	bne.n	8001e0c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dde:	83fb      	strh	r3, [r7, #30]
 8001de0:	8bfb      	ldrh	r3, [r7, #30]
 8001de2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001de6:	83fb      	strh	r3, [r7, #30]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	441a      	add	r2, r3
 8001df6:	8bfb      	ldrh	r3, [r7, #30]
 8001df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d11f      	bne.n	8001e56 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e30:	83bb      	strh	r3, [r7, #28]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	441a      	add	r2, r3
 8001e40:	8bbb      	ldrh	r3, [r7, #28]
 8001e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e56:	8b7b      	ldrh	r3, [r7, #26]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	6959      	ldr	r1, [r3, #20]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	895a      	ldrh	r2, [r3, #10]
 8001e68:	8b7b      	ldrh	r3, [r7, #26]
 8001e6a:	f002 fff6 	bl	8004e5a <USB_ReadPMA>
    }
  }

  return count;
 8001e6e:	8b7b      	ldrh	r3, [r7, #26]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b094      	sub	sp, #80	; 0x50
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	4613      	mov	r3, r2
 8001e84:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8138 	beq.w	8002102 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d907      	bls.n	8001eda <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ed2:	1ad2      	subs	r2, r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	619a      	str	r2, [r3, #24]
 8001ed8:	e002      	b.n	8001ee0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d12c      	bne.n	8001f42 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	4619      	mov	r1, r3
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f007 f893 	bl	800901a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 823a 	beq.w	8002374 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1a:	82fb      	strh	r3, [r7, #22]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	441a      	add	r2, r3
 8001f2a:	8afb      	ldrh	r3, [r7, #22]
 8001f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	8013      	strh	r3, [r2, #0]
 8001f40:	e218      	b.n	8002374 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d01f      	beq.n	8001f8c <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f66:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	441a      	add	r2, r3
 8001f76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	f040 81ee 	bne.w	8002374 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001fa0:	441a      	add	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001fae:	441a      	add	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d309      	bcc.n	8001fd4 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	6a1a      	ldr	r2, [r3, #32]
 8001fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fcc:	1ad2      	subs	r2, r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	621a      	str	r2, [r3, #32]
 8001fd2:	e015      	b.n	8002000 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d107      	bne.n	8001fec <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8001fdc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001fe0:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fea:	e009      	b.n	8002000 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	785b      	ldrb	r3, [r3, #1]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d155      	bne.n	80020b4 <HAL_PCD_EP_DB_Transmit+0x23c>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	4413      	add	r3, r2
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	011a      	lsls	r2, r3, #4
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	4413      	add	r3, r2
 800202a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002032:	2b00      	cmp	r3, #0
 8002034:	d112      	bne.n	800205c <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002040:	b29a      	uxth	r2, r3
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	801a      	strh	r2, [r3, #0]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002054:	b29a      	uxth	r2, r3
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	801a      	strh	r2, [r3, #0]
 800205a:	e047      	b.n	80020ec <HAL_PCD_EP_DB_Transmit+0x274>
 800205c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800205e:	2b3e      	cmp	r3, #62	; 0x3e
 8002060:	d811      	bhi.n	8002086 <HAL_PCD_EP_DB_Transmit+0x20e>
 8002062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002064:	085b      	lsrs	r3, r3, #1
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_PCD_EP_DB_Transmit+0x200>
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	3301      	adds	r3, #1
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207a:	b29b      	uxth	r3, r3
 800207c:	029b      	lsls	r3, r3, #10
 800207e:	b29a      	uxth	r2, r3
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	801a      	strh	r2, [r3, #0]
 8002084:	e032      	b.n	80020ec <HAL_PCD_EP_DB_Transmit+0x274>
 8002086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002088:	095b      	lsrs	r3, r3, #5
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800208c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800208e:	f003 031f 	and.w	r3, r3, #31
 8002092:	2b00      	cmp	r3, #0
 8002094:	d102      	bne.n	800209c <HAL_PCD_EP_DB_Transmit+0x224>
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	3b01      	subs	r3, #1
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	b29b      	uxth	r3, r3
 80020a0:	029b      	lsls	r3, r3, #10
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	801a      	strh	r2, [r3, #0]
 80020b2:	e01b      	b.n	80020ec <HAL_PCD_EP_DB_Transmit+0x274>
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	785b      	ldrb	r3, [r3, #1]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d117      	bne.n	80020ec <HAL_PCD_EP_DB_Transmit+0x274>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	4413      	add	r3, r2
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	011a      	lsls	r2, r3, #4
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	4413      	add	r3, r2
 80020de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020e2:	623b      	str	r3, [r7, #32]
 80020e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	6959      	ldr	r1, [r3, #20]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	891a      	ldrh	r2, [r3, #8]
 80020f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	f002 fe68 	bl	8004dd0 <USB_WritePMA>
 8002100:	e138      	b.n	8002374 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800210a:	b29b      	uxth	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	3306      	adds	r3, #6
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	4413      	add	r3, r2
 8002120:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800212a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002136:	429a      	cmp	r2, r3
 8002138:	d307      	bcc.n	800214a <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002142:	1ad2      	subs	r2, r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	619a      	str	r2, [r3, #24]
 8002148:	e002      	b.n	8002150 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d12e      	bne.n	80021b6 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f006 ff5b 	bl	800901a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216a:	2b00      	cmp	r3, #0
 800216c:	f040 8102 	bne.w	8002374 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	b29b      	uxth	r3, r3
 8002182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	441a      	add	r2, r3
 800219c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	8013      	strh	r3, [r2, #0]
 80021b4:	e0de      	b.n	8002374 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d11f      	bne.n	8002200 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021da:	867b      	strh	r3, [r7, #50]	; 0x32
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	441a      	add	r2, r3
 80021ea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80021ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002206:	2b01      	cmp	r3, #1
 8002208:	f040 80b4 	bne.w	8002374 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002214:	441a      	add	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002222:	441a      	add	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	6a1a      	ldr	r2, [r3, #32]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	429a      	cmp	r2, r3
 8002232:	d309      	bcc.n	8002248 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	6a1a      	ldr	r2, [r3, #32]
 800223e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002240:	1ad2      	subs	r2, r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	621a      	str	r2, [r3, #32]
 8002246:	e015      	b.n	8002274 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d107      	bne.n	8002260 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8002250:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002254:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800225e:	e009      	b.n	8002274 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2200      	movs	r2, #0
 800226a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	643b      	str	r3, [r7, #64]	; 0x40
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	785b      	ldrb	r3, [r3, #1]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d155      	bne.n	800232e <HAL_PCD_EP_DB_Transmit+0x4b6>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	63bb      	str	r3, [r7, #56]	; 0x38
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002290:	b29b      	uxth	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002296:	4413      	add	r3, r2
 8002298:	63bb      	str	r3, [r7, #56]	; 0x38
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	011a      	lsls	r2, r3, #4
 80022a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a2:	4413      	add	r3, r2
 80022a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
 80022aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d112      	bne.n	80022d6 <HAL_PCD_EP_DB_Transmit+0x45e>
 80022b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022be:	801a      	strh	r2, [r3, #0]
 80022c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d2:	801a      	strh	r2, [r3, #0]
 80022d4:	e044      	b.n	8002360 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80022d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d8:	2b3e      	cmp	r3, #62	; 0x3e
 80022da:	d811      	bhi.n	8002300 <HAL_PCD_EP_DB_Transmit+0x488>
 80022dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_PCD_EP_DB_Transmit+0x47a>
 80022ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ee:	3301      	adds	r3, #1
 80022f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	029b      	lsls	r3, r3, #10
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fc:	801a      	strh	r2, [r3, #0]
 80022fe:	e02f      	b.n	8002360 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002308:	f003 031f 	and.w	r3, r3, #31
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <HAL_PCD_EP_DB_Transmit+0x49e>
 8002310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002312:	3b01      	subs	r3, #1
 8002314:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002318:	b29b      	uxth	r3, r3
 800231a:	029b      	lsls	r3, r3, #10
 800231c:	b29b      	uxth	r3, r3
 800231e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002326:	b29a      	uxth	r2, r3
 8002328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232a:	801a      	strh	r2, [r3, #0]
 800232c:	e018      	b.n	8002360 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d114      	bne.n	8002360 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233e:	b29b      	uxth	r3, r3
 8002340:	461a      	mov	r2, r3
 8002342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002344:	4413      	add	r3, r2
 8002346:	643b      	str	r3, [r7, #64]	; 0x40
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	011a      	lsls	r2, r3, #4
 800234e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002350:	4413      	add	r3, r2
 8002352:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235a:	b29a      	uxth	r2, r3
 800235c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800235e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	6959      	ldr	r1, [r3, #20]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	895a      	ldrh	r2, [r3, #10]
 800236c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236e:	b29b      	uxth	r3, r3
 8002370:	f002 fd2e 	bl	8004dd0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800238a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800238e:	82bb      	strh	r3, [r7, #20]
 8002390:	8abb      	ldrh	r3, [r7, #20]
 8002392:	f083 0310 	eor.w	r3, r3, #16
 8002396:	82bb      	strh	r3, [r7, #20]
 8002398:	8abb      	ldrh	r3, [r7, #20]
 800239a:	f083 0320 	eor.w	r3, r3, #32
 800239e:	82bb      	strh	r3, [r7, #20]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	441a      	add	r2, r3
 80023ae:	8abb      	ldrh	r3, [r7, #20]
 80023b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3750      	adds	r7, #80	; 0x50
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b087      	sub	sp, #28
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	817b      	strh	r3, [r7, #10]
 80023dc:	4613      	mov	r3, r2
 80023de:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80023e0:	897b      	ldrh	r3, [r7, #10]
 80023e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00b      	beq.n	8002404 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023ec:	897b      	ldrh	r3, [r7, #10]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e009      	b.n	8002418 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002404:	897a      	ldrh	r2, [r7, #10]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4413      	add	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002418:	893b      	ldrh	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d107      	bne.n	800242e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2200      	movs	r2, #0
 8002422:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	b29a      	uxth	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	80da      	strh	r2, [r3, #6]
 800242c:	e00b      	b.n	8002446 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2201      	movs	r2, #1
 8002432:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	b29a      	uxth	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	0c1b      	lsrs	r3, r3, #16
 8002440:	b29a      	uxth	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
	...

08002454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e26c      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8087 	beq.w	8002582 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002474:	4b92      	ldr	r3, [pc, #584]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b04      	cmp	r3, #4
 800247e:	d00c      	beq.n	800249a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002480:	4b8f      	ldr	r3, [pc, #572]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b08      	cmp	r3, #8
 800248a:	d112      	bne.n	80024b2 <HAL_RCC_OscConfig+0x5e>
 800248c:	4b8c      	ldr	r3, [pc, #560]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d10b      	bne.n	80024b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249a:	4b89      	ldr	r3, [pc, #548]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d06c      	beq.n	8002580 <HAL_RCC_OscConfig+0x12c>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d168      	bne.n	8002580 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e246      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x76>
 80024bc:	4b80      	ldr	r3, [pc, #512]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a7f      	ldr	r2, [pc, #508]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	e02e      	b.n	8002528 <HAL_RCC_OscConfig+0xd4>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x98>
 80024d2:	4b7b      	ldr	r3, [pc, #492]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a7a      	ldr	r2, [pc, #488]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b78      	ldr	r3, [pc, #480]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a77      	ldr	r2, [pc, #476]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e01d      	b.n	8002528 <HAL_RCC_OscConfig+0xd4>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f4:	d10c      	bne.n	8002510 <HAL_RCC_OscConfig+0xbc>
 80024f6:	4b72      	ldr	r3, [pc, #456]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a71      	ldr	r2, [pc, #452]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	4b6f      	ldr	r3, [pc, #444]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a6e      	ldr	r2, [pc, #440]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e00b      	b.n	8002528 <HAL_RCC_OscConfig+0xd4>
 8002510:	4b6b      	ldr	r3, [pc, #428]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a6a      	ldr	r2, [pc, #424]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b68      	ldr	r3, [pc, #416]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a67      	ldr	r2, [pc, #412]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002526:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d013      	beq.n	8002558 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7fe f94a 	bl	80007c8 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7fe f946 	bl	80007c8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e1fa      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b5d      	ldr	r3, [pc, #372]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0xe4>
 8002556:	e014      	b.n	8002582 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7fe f936 	bl	80007c8 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002560:	f7fe f932 	bl	80007c8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e1e6      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002572:	4b53      	ldr	r3, [pc, #332]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x10c>
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d063      	beq.n	8002656 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800258e:	4b4c      	ldr	r3, [pc, #304]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00b      	beq.n	80025b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800259a:	4b49      	ldr	r3, [pc, #292]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d11c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x18c>
 80025a6:	4b46      	ldr	r3, [pc, #280]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d116      	bne.n	80025e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b2:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_RCC_OscConfig+0x176>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d001      	beq.n	80025ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e1ba      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ca:	4b3d      	ldr	r3, [pc, #244]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4939      	ldr	r1, [pc, #228]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025de:	e03a      	b.n	8002656 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d020      	beq.n	800262a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e8:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe f8eb 	bl	80007c8 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f6:	f7fe f8e7 	bl	80007c8 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e19b      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002608:	4b2d      	ldr	r3, [pc, #180]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002614:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4927      	ldr	r1, [pc, #156]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 8002624:	4313      	orrs	r3, r2
 8002626:	600b      	str	r3, [r1, #0]
 8002628:	e015      	b.n	8002656 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800262a:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <HAL_RCC_OscConfig+0x270>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe f8ca 	bl	80007c8 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002638:	f7fe f8c6 	bl	80007c8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e17a      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d03a      	beq.n	80026d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d019      	beq.n	800269e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800266a:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 800266c:	2201      	movs	r2, #1
 800266e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002670:	f7fe f8aa 	bl	80007c8 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002678:	f7fe f8a6 	bl	80007c8 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e15a      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268a:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_RCC_OscConfig+0x26c>)
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002696:	2001      	movs	r0, #1
 8002698:	f000 faa6 	bl	8002be8 <RCC_Delay>
 800269c:	e01c      	b.n	80026d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_RCC_OscConfig+0x274>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a4:	f7fe f890 	bl	80007c8 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026aa:	e00f      	b.n	80026cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ac:	f7fe f88c 	bl	80007c8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d908      	bls.n	80026cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e140      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	42420000 	.word	0x42420000
 80026c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026cc:	4b9e      	ldr	r3, [pc, #632]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1e9      	bne.n	80026ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80a6 	beq.w	8002832 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ea:	4b97      	ldr	r3, [pc, #604]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10d      	bne.n	8002712 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	4b94      	ldr	r3, [pc, #592]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	4a93      	ldr	r2, [pc, #588]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	61d3      	str	r3, [r2, #28]
 8002702:	4b91      	ldr	r3, [pc, #580]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800270e:	2301      	movs	r3, #1
 8002710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002712:	4b8e      	ldr	r3, [pc, #568]	; (800294c <HAL_RCC_OscConfig+0x4f8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d118      	bne.n	8002750 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800271e:	4b8b      	ldr	r3, [pc, #556]	; (800294c <HAL_RCC_OscConfig+0x4f8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a8a      	ldr	r2, [pc, #552]	; (800294c <HAL_RCC_OscConfig+0x4f8>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272a:	f7fe f84d 	bl	80007c8 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002732:	f7fe f849 	bl	80007c8 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b64      	cmp	r3, #100	; 0x64
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e0fd      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	4b81      	ldr	r3, [pc, #516]	; (800294c <HAL_RCC_OscConfig+0x4f8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x312>
 8002758:	4b7b      	ldr	r3, [pc, #492]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4a7a      	ldr	r2, [pc, #488]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6213      	str	r3, [r2, #32]
 8002764:	e02d      	b.n	80027c2 <HAL_RCC_OscConfig+0x36e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x334>
 800276e:	4b76      	ldr	r3, [pc, #472]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4a75      	ldr	r2, [pc, #468]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6213      	str	r3, [r2, #32]
 800277a:	4b73      	ldr	r3, [pc, #460]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4a72      	ldr	r2, [pc, #456]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	f023 0304 	bic.w	r3, r3, #4
 8002784:	6213      	str	r3, [r2, #32]
 8002786:	e01c      	b.n	80027c2 <HAL_RCC_OscConfig+0x36e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b05      	cmp	r3, #5
 800278e:	d10c      	bne.n	80027aa <HAL_RCC_OscConfig+0x356>
 8002790:	4b6d      	ldr	r3, [pc, #436]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4a6c      	ldr	r2, [pc, #432]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 8002796:	f043 0304 	orr.w	r3, r3, #4
 800279a:	6213      	str	r3, [r2, #32]
 800279c:	4b6a      	ldr	r3, [pc, #424]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	4a69      	ldr	r2, [pc, #420]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6213      	str	r3, [r2, #32]
 80027a8:	e00b      	b.n	80027c2 <HAL_RCC_OscConfig+0x36e>
 80027aa:	4b67      	ldr	r3, [pc, #412]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4a66      	ldr	r2, [pc, #408]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6213      	str	r3, [r2, #32]
 80027b6:	4b64      	ldr	r3, [pc, #400]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4a63      	ldr	r2, [pc, #396]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	f023 0304 	bic.w	r3, r3, #4
 80027c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d015      	beq.n	80027f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ca:	f7fd fffd 	bl	80007c8 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fd fff9 	bl	80007c8 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e0ab      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e8:	4b57      	ldr	r3, [pc, #348]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ee      	beq.n	80027d2 <HAL_RCC_OscConfig+0x37e>
 80027f4:	e014      	b.n	8002820 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f6:	f7fd ffe7 	bl	80007c8 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fd ffe3 	bl	80007c8 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	; 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e095      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002814:	4b4c      	ldr	r3, [pc, #304]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1ee      	bne.n	80027fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002820:	7dfb      	ldrb	r3, [r7, #23]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d105      	bne.n	8002832 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002826:	4b48      	ldr	r3, [pc, #288]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4a47      	ldr	r2, [pc, #284]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 800282c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002830:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 8081 	beq.w	800293e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800283c:	4b42      	ldr	r3, [pc, #264]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 030c 	and.w	r3, r3, #12
 8002844:	2b08      	cmp	r3, #8
 8002846:	d061      	beq.n	800290c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d146      	bne.n	80028de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002850:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <HAL_RCC_OscConfig+0x4fc>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002856:	f7fd ffb7 	bl	80007c8 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7fd ffb3 	bl	80007c8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e067      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002870:	4b35      	ldr	r3, [pc, #212]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002884:	d108      	bne.n	8002898 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002886:	4b30      	ldr	r3, [pc, #192]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	492d      	ldr	r1, [pc, #180]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002898:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a19      	ldr	r1, [r3, #32]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	430b      	orrs	r3, r1
 80028aa:	4927      	ldr	r1, [pc, #156]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b0:	4b27      	ldr	r3, [pc, #156]	; (8002950 <HAL_RCC_OscConfig+0x4fc>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b6:	f7fd ff87 	bl	80007c8 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028be:	f7fd ff83 	bl	80007c8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e037      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0x46a>
 80028dc:	e02f      	b.n	800293e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <HAL_RCC_OscConfig+0x4fc>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fd ff70 	bl	80007c8 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fd ff6c 	bl	80007c8 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e020      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fe:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x498>
 800290a:	e018      	b.n	800293e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e013      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_OscConfig+0x4f4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	429a      	cmp	r2, r3
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d001      	beq.n	800293e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	40007000 	.word	0x40007000
 8002950:	42420060 	.word	0x42420060

08002954 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0d0      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002968:	4b6a      	ldr	r3, [pc, #424]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d910      	bls.n	8002998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b67      	ldr	r3, [pc, #412]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 0207 	bic.w	r2, r3, #7
 800297e:	4965      	ldr	r1, [pc, #404]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b63      	ldr	r3, [pc, #396]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0b8      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b0:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4a58      	ldr	r2, [pc, #352]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c8:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4a52      	ldr	r2, [pc, #328]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b50      	ldr	r3, [pc, #320]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	494d      	ldr	r1, [pc, #308]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d040      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d115      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e07f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a12:	4b41      	ldr	r3, [pc, #260]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e073      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a22:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e06b      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a32:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f023 0203 	bic.w	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4936      	ldr	r1, [pc, #216]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a44:	f7fd fec0 	bl	80007c8 <HAL_GetTick>
 8002a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a4c:	f7fd febc 	bl	80007c8 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e053      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a62:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 020c 	and.w	r2, r3, #12
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d1eb      	bne.n	8002a4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a74:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d210      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a82:	4b24      	ldr	r3, [pc, #144]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 0207 	bic.w	r2, r3, #7
 8002a8a:	4922      	ldr	r1, [pc, #136]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e032      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4916      	ldr	r1, [pc, #88]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	490e      	ldr	r1, [pc, #56]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ae2:	f000 f821 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	490a      	ldr	r1, [pc, #40]	; (8002b1c <HAL_RCC_ClockConfig+0x1c8>)
 8002af4:	5ccb      	ldrb	r3, [r1, r3]
 8002af6:	fa22 f303 	lsr.w	r3, r2, r3
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1cc>)
 8002afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x1d0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd fe1e 	bl	8000744 <HAL_InitTick>

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40022000 	.word	0x40022000
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	08009694 	.word	0x08009694
 8002b20:	20000000 	.word	0x20000000
 8002b24:	20000004 	.word	0x20000004

08002b28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b28:	b490      	push	{r4, r7}
 8002b2a:	b08a      	sub	sp, #40	; 0x28
 8002b2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b30:	1d3c      	adds	r4, r7, #4
 8002b32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b38:	f240 2301 	movw	r3, #513	; 0x201
 8002b3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	2300      	movs	r3, #0
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b52:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d002      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x40>
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d003      	beq.n	8002b6e <HAL_RCC_GetSysClockFreq+0x46>
 8002b66:	e02d      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b6a:	623b      	str	r3, [r7, #32]
      break;
 8002b6c:	e02d      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	0c9b      	lsrs	r3, r3, #18
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	0c5b      	lsrs	r3, r3, #17
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ba0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ba6:	fb02 f203 	mul.w	r2, r2, r3
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb2:	e004      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	4a0b      	ldr	r2, [pc, #44]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bb8:	fb02 f303 	mul.w	r3, r2, r3
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	623b      	str	r3, [r7, #32]
      break;
 8002bc2:	e002      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bc6:	623b      	str	r3, [r7, #32]
      break;
 8002bc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bca:	6a3b      	ldr	r3, [r7, #32]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3728      	adds	r7, #40	; 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc90      	pop	{r4, r7}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	08009530 	.word	0x08009530
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	007a1200 	.word	0x007a1200
 8002be4:	003d0900 	.word	0x003d0900

08002be8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <RCC_Delay+0x34>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <RCC_Delay+0x38>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	0a5b      	lsrs	r3, r3, #9
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	fb02 f303 	mul.w	r3, r2, r3
 8002c02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c04:	bf00      	nop
  }
  while (Delay --);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1e5a      	subs	r2, r3, #1
 8002c0a:	60fa      	str	r2, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f9      	bne.n	8002c04 <RCC_Delay+0x1c>
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	10624dd3 	.word	0x10624dd3

08002c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d07d      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002c40:	2300      	movs	r3, #0
 8002c42:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c44:	4b4f      	ldr	r3, [pc, #316]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10d      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c50:	4b4c      	ldr	r3, [pc, #304]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	4a4b      	ldr	r2, [pc, #300]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	61d3      	str	r3, [r2, #28]
 8002c5c:	4b49      	ldr	r3, [pc, #292]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	4b46      	ldr	r3, [pc, #280]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d118      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c78:	4b43      	ldr	r3, [pc, #268]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a42      	ldr	r2, [pc, #264]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c84:	f7fd fda0 	bl	80007c8 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8a:	e008      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8c:	f7fd fd9c 	bl	80007c8 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b64      	cmp	r3, #100	; 0x64
 8002c98:	d901      	bls.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e06d      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002caa:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d02e      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d027      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cc8:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cd2:	4b2e      	ldr	r3, [pc, #184]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd8:	4b2c      	ldr	r3, [pc, #176]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cde:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d014      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fd fd6b 	bl	80007c8 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf4:	e00a      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf6:	f7fd fd67 	bl	80007c8 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e036      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0ee      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d18:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4917      	ldr	r1, [pc, #92]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d2a:	7dfb      	ldrb	r3, [r7, #23]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d48:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	490b      	ldr	r1, [pc, #44]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	4904      	ldr	r1, [pc, #16]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	42420440 	.word	0x42420440

08002d90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d90:	b084      	sub	sp, #16
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	f107 0014 	add.w	r0, r7, #20
 8002d9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	b004      	add	sp, #16
 8002dae:	4770      	bx	lr

08002db0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002dc0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002dc4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002de4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002de8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e28:	b084      	sub	sp, #16
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	f107 0014 	add.w	r0, r7, #20
 8002e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	b004      	add	sp, #16
 8002e66:	4770      	bx	lr

08002e68 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b09b      	sub	sp, #108	; 0x6c
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	78db      	ldrb	r3, [r3, #3]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d81f      	bhi.n	8002eda <USB_ActivateEndpoint+0x72>
 8002e9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <USB_ActivateEndpoint+0x38>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002eb1 	.word	0x08002eb1
 8002ea4:	08002ecd 	.word	0x08002ecd
 8002ea8:	08002ee3 	.word	0x08002ee3
 8002eac:	08002ebf 	.word	0x08002ebf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002eb0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002eb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eb8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002ebc:	e012      	b.n	8002ee4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002ebe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ec2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002ec6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002eca:	e00b      	b.n	8002ee4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002ecc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ed0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ed4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002ed8:	e004      	b.n	8002ee4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002ee0:	e000      	b.n	8002ee4 <USB_ActivateEndpoint+0x7c>
      break;
 8002ee2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	441a      	add	r2, r3
 8002eee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	441a      	add	r2, r3
 8002f34:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	7b1b      	ldrb	r3, [r3, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f040 8149 	bne.w	80031e8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	785b      	ldrb	r3, [r3, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 8084 	beq.w	8003068 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	4413      	add	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	011a      	lsls	r2, r3, #4
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	88db      	ldrh	r3, [r3, #6]
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	81fb      	strh	r3, [r7, #14]
 8002fa2:	89fb      	ldrh	r3, [r7, #14]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01b      	beq.n	8002fe4 <USB_ActivateEndpoint+0x17c>
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc2:	81bb      	strh	r3, [r7, #12]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	441a      	add	r2, r3
 8002fce:	89bb      	ldrh	r3, [r7, #12]
 8002fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	78db      	ldrb	r3, [r3, #3]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d020      	beq.n	800302e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003002:	813b      	strh	r3, [r7, #8]
 8003004:	893b      	ldrh	r3, [r7, #8]
 8003006:	f083 0320 	eor.w	r3, r3, #32
 800300a:	813b      	strh	r3, [r7, #8]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	441a      	add	r2, r3
 8003016:	893b      	ldrh	r3, [r7, #8]
 8003018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800301c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003028:	b29b      	uxth	r3, r3
 800302a:	8013      	strh	r3, [r2, #0]
 800302c:	e27f      	b.n	800352e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003044:	817b      	strh	r3, [r7, #10]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	441a      	add	r2, r3
 8003050:	897b      	ldrh	r3, [r7, #10]
 8003052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800305a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003062:	b29b      	uxth	r3, r3
 8003064:	8013      	strh	r3, [r2, #0]
 8003066:	e262      	b.n	800352e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003072:	b29b      	uxth	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	4413      	add	r3, r2
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	011a      	lsls	r2, r3, #4
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	4413      	add	r3, r2
 8003086:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	88db      	ldrh	r3, [r3, #6]
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	b29b      	uxth	r3, r3
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	4413      	add	r3, r2
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	011a      	lsls	r2, r3, #4
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	4413      	add	r3, r2
 80030ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030be:	623b      	str	r3, [r7, #32]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d112      	bne.n	80030ee <USB_ActivateEndpoint+0x286>
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	801a      	strh	r2, [r3, #0]
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	801a      	strh	r2, [r3, #0]
 80030ec:	e02f      	b.n	800314e <USB_ActivateEndpoint+0x2e6>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b3e      	cmp	r3, #62	; 0x3e
 80030f4:	d813      	bhi.n	800311e <USB_ActivateEndpoint+0x2b6>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	663b      	str	r3, [r7, #96]	; 0x60
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <USB_ActivateEndpoint+0x2a8>
 800310a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800310c:	3301      	adds	r3, #1
 800310e:	663b      	str	r3, [r7, #96]	; 0x60
 8003110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003112:	b29b      	uxth	r3, r3
 8003114:	029b      	lsls	r3, r3, #10
 8003116:	b29a      	uxth	r2, r3
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	801a      	strh	r2, [r3, #0]
 800311c:	e017      	b.n	800314e <USB_ActivateEndpoint+0x2e6>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	663b      	str	r3, [r7, #96]	; 0x60
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <USB_ActivateEndpoint+0x2d0>
 8003132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003134:	3b01      	subs	r3, #1
 8003136:	663b      	str	r3, [r7, #96]	; 0x60
 8003138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800313a:	b29b      	uxth	r3, r3
 800313c:	029b      	lsls	r3, r3, #10
 800313e:	b29b      	uxth	r3, r3
 8003140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003148:	b29a      	uxth	r2, r3
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	83fb      	strh	r3, [r7, #30]
 800315c:	8bfb      	ldrh	r3, [r7, #30]
 800315e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01b      	beq.n	800319e <USB_ActivateEndpoint+0x336>
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317c:	83bb      	strh	r3, [r7, #28]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	441a      	add	r2, r3
 8003188:	8bbb      	ldrh	r3, [r7, #28]
 800318a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800318e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003192:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319a:	b29b      	uxth	r3, r3
 800319c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b4:	837b      	strh	r3, [r7, #26]
 80031b6:	8b7b      	ldrh	r3, [r7, #26]
 80031b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80031bc:	837b      	strh	r3, [r7, #26]
 80031be:	8b7b      	ldrh	r3, [r7, #26]
 80031c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031c4:	837b      	strh	r3, [r7, #26]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	441a      	add	r2, r3
 80031d0:	8b7b      	ldrh	r3, [r7, #26]
 80031d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	8013      	strh	r3, [r2, #0]
 80031e6:	e1a2      	b.n	800352e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031fe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	441a      	add	r2, r3
 800320c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003218:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800321c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003220:	b29b      	uxth	r3, r3
 8003222:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	65bb      	str	r3, [r7, #88]	; 0x58
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800322e:	b29b      	uxth	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003234:	4413      	add	r3, r2
 8003236:	65bb      	str	r3, [r7, #88]	; 0x58
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	011a      	lsls	r2, r3, #4
 800323e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003240:	4413      	add	r3, r2
 8003242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003246:	657b      	str	r3, [r7, #84]	; 0x54
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	891b      	ldrh	r3, [r3, #8]
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	b29b      	uxth	r3, r3
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003256:	801a      	strh	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	653b      	str	r3, [r7, #80]	; 0x50
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003262:	b29b      	uxth	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003268:	4413      	add	r3, r2
 800326a:	653b      	str	r3, [r7, #80]	; 0x50
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	011a      	lsls	r2, r3, #4
 8003272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003274:	4413      	add	r3, r2
 8003276:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800327a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	895b      	ldrh	r3, [r3, #10]
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	b29b      	uxth	r3, r3
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800328a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	785b      	ldrb	r3, [r3, #1]
 8003290:	2b00      	cmp	r3, #0
 8003292:	f040 8091 	bne.w	80033b8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80032a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80032a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d01b      	beq.n	80032e6 <USB_ActivateEndpoint+0x47e>
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	441a      	add	r2, r3
 80032d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80032d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	873b      	strh	r3, [r7, #56]	; 0x38
 80032f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80032f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01b      	beq.n	8003336 <USB_ActivateEndpoint+0x4ce>
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	b29b      	uxth	r3, r3
 800330c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003314:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	441a      	add	r2, r3
 8003320:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800332a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800332e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003332:	b29b      	uxth	r3, r3
 8003334:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800334e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003350:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003354:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003356:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003358:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800335c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	441a      	add	r2, r3
 8003368:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800336a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800336e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337a:	b29b      	uxth	r3, r3
 800337c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003394:	867b      	strh	r3, [r7, #50]	; 0x32
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	441a      	add	r2, r3
 80033a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80033a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	8013      	strh	r3, [r2, #0]
 80033b6:	e0ba      	b.n	800352e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80033c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01d      	beq.n	8003410 <USB_ActivateEndpoint+0x5a8>
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	441a      	add	r2, r3
 80033f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340c:	b29b      	uxth	r3, r3
 800340e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003420:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01d      	beq.n	8003468 <USB_ActivateEndpoint+0x600>
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800343e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003442:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	441a      	add	r2, r3
 8003450:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800345c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003460:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003464:	b29b      	uxth	r3, r3
 8003466:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	78db      	ldrb	r3, [r3, #3]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d024      	beq.n	80034ba <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003486:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800348a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800348e:	f083 0320 	eor.w	r3, r3, #32
 8003492:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	441a      	add	r2, r3
 80034a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	8013      	strh	r3, [r2, #0]
 80034b8:	e01d      	b.n	80034f6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	441a      	add	r2, r3
 80034de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80034e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	441a      	add	r2, r3
 8003518:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800351a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800351e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352a:	b29b      	uxth	r3, r3
 800352c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800352e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003532:	4618      	mov	r0, r3
 8003534:	376c      	adds	r7, #108	; 0x6c
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800353c:	b480      	push	{r7}
 800353e:	b08d      	sub	sp, #52	; 0x34
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	7b1b      	ldrb	r3, [r3, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f040 808e 	bne.w	800366c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	785b      	ldrb	r3, [r3, #1]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d044      	beq.n	80035e2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	81bb      	strh	r3, [r7, #12]
 8003566:	89bb      	ldrh	r3, [r7, #12]
 8003568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01b      	beq.n	80035a8 <USB_DeactivateEndpoint+0x6c>
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	b29b      	uxth	r3, r3
 800357e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003586:	817b      	strh	r3, [r7, #10]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	441a      	add	r2, r3
 8003592:	897b      	ldrh	r3, [r7, #10]
 8003594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800359c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035be:	813b      	strh	r3, [r7, #8]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	441a      	add	r2, r3
 80035ca:	893b      	ldrh	r3, [r7, #8]
 80035cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035dc:	b29b      	uxth	r3, r3
 80035de:	8013      	strh	r3, [r2, #0]
 80035e0:	e192      	b.n	8003908 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	827b      	strh	r3, [r7, #18]
 80035f0:	8a7b      	ldrh	r3, [r7, #18]
 80035f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01b      	beq.n	8003632 <USB_DeactivateEndpoint+0xf6>
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	b29b      	uxth	r3, r3
 8003608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003610:	823b      	strh	r3, [r7, #16]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	441a      	add	r2, r3
 800361c:	8a3b      	ldrh	r3, [r7, #16]
 800361e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800362a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800362e:	b29b      	uxth	r3, r3
 8003630:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003648:	81fb      	strh	r3, [r7, #14]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	441a      	add	r2, r3
 8003654:	89fb      	ldrh	r3, [r7, #14]
 8003656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800365a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800365e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003666:	b29b      	uxth	r3, r3
 8003668:	8013      	strh	r3, [r2, #0]
 800366a:	e14d      	b.n	8003908 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	785b      	ldrb	r3, [r3, #1]
 8003670:	2b00      	cmp	r3, #0
 8003672:	f040 80a5 	bne.w	80037c0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	843b      	strh	r3, [r7, #32]
 8003684:	8c3b      	ldrh	r3, [r7, #32]
 8003686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d01b      	beq.n	80036c6 <USB_DeactivateEndpoint+0x18a>
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a4:	83fb      	strh	r3, [r7, #30]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	441a      	add	r2, r3
 80036b0:	8bfb      	ldrh	r3, [r7, #30]
 80036b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	83bb      	strh	r3, [r7, #28]
 80036d4:	8bbb      	ldrh	r3, [r7, #28]
 80036d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d01b      	beq.n	8003716 <USB_DeactivateEndpoint+0x1da>
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f4:	837b      	strh	r3, [r7, #26]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	441a      	add	r2, r3
 8003700:	8b7b      	ldrh	r3, [r7, #26]
 8003702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800370a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800370e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003712:	b29b      	uxth	r3, r3
 8003714:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	881b      	ldrh	r3, [r3, #0]
 8003722:	b29b      	uxth	r3, r3
 8003724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372c:	833b      	strh	r3, [r7, #24]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	441a      	add	r2, r3
 8003738:	8b3b      	ldrh	r3, [r7, #24]
 800373a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800373e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003746:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800374a:	b29b      	uxth	r3, r3
 800374c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	b29b      	uxth	r3, r3
 800375c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003764:	82fb      	strh	r3, [r7, #22]
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	441a      	add	r2, r3
 8003770:	8afb      	ldrh	r3, [r7, #22]
 8003772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800377a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800377e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003782:	b29b      	uxth	r3, r3
 8003784:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	b29b      	uxth	r3, r3
 8003794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379c:	82bb      	strh	r3, [r7, #20]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	441a      	add	r2, r3
 80037a8:	8abb      	ldrh	r3, [r7, #20]
 80037aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	8013      	strh	r3, [r2, #0]
 80037be:	e0a3      	b.n	8003908 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80037ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01b      	beq.n	8003810 <USB_DeactivateEndpoint+0x2d4>
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80037fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003804:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800380c:	b29b      	uxth	r3, r3
 800380e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800381e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01b      	beq.n	8003860 <USB_DeactivateEndpoint+0x324>
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	b29b      	uxth	r3, r3
 8003836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800383a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	441a      	add	r2, r3
 800384a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800384c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003858:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800385c:	b29b      	uxth	r3, r3
 800385e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	b29b      	uxth	r3, r3
 800386e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003876:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	441a      	add	r2, r3
 8003882:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800388c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003894:	b29b      	uxth	r3, r3
 8003896:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	441a      	add	r2, r3
 80038ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	441a      	add	r2, r3
 80038f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80038f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003904:	b29b      	uxth	r3, r3
 8003906:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3734      	adds	r7, #52	; 0x34
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b0c4      	sub	sp, #272	; 0x110
 8003918:	af00      	add	r7, sp, #0
 800391a:	1d3b      	adds	r3, r7, #4
 800391c:	6018      	str	r0, [r3, #0]
 800391e:	463b      	mov	r3, r7
 8003920:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003922:	463b      	mov	r3, r7
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	785b      	ldrb	r3, [r3, #1]
 8003928:	2b01      	cmp	r3, #1
 800392a:	f040 8557 	bne.w	80043dc <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800392e:	463b      	mov	r3, r7
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699a      	ldr	r2, [r3, #24]
 8003934:	463b      	mov	r3, r7
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	429a      	cmp	r2, r3
 800393c:	d905      	bls.n	800394a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800393e:	463b      	mov	r3, r7
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003948:	e004      	b.n	8003954 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800394a:	463b      	mov	r3, r7
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003954:	463b      	mov	r3, r7
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	7b1b      	ldrb	r3, [r3, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d12c      	bne.n	80039b8 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800395e:	463b      	mov	r3, r7
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6959      	ldr	r1, [r3, #20]
 8003964:	463b      	mov	r3, r7
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	88da      	ldrh	r2, [r3, #6]
 800396a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800396e:	b29b      	uxth	r3, r3
 8003970:	1d38      	adds	r0, r7, #4
 8003972:	6800      	ldr	r0, [r0, #0]
 8003974:	f001 fa2c 	bl	8004dd0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003978:	1d3b      	adds	r3, r7, #4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003986:	b29b      	uxth	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	4413      	add	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	463b      	mov	r3, r7
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	011a      	lsls	r2, r3, #4
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	4413      	add	r3, r2
 800399c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80039a0:	f107 0310 	add.w	r3, r7, #16
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	f107 0310 	add.w	r3, r7, #16
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	801a      	strh	r2, [r3, #0]
 80039b4:	f000 bcdd 	b.w	8004372 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80039b8:	463b      	mov	r3, r7
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	78db      	ldrb	r3, [r3, #3]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	f040 8347 	bne.w	8004052 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80039c4:	463b      	mov	r3, r7
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a1a      	ldr	r2, [r3, #32]
 80039ca:	463b      	mov	r3, r7
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	f240 82eb 	bls.w	8003fac <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80039d6:	1d3b      	adds	r3, r7, #4
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	463b      	mov	r3, r7
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	463b      	mov	r3, r7
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	441a      	add	r2, r3
 8003a02:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a0e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a24:	1ad2      	subs	r2, r2, r3
 8003a26:	463b      	mov	r3, r7
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003a2c:	1d3b      	adds	r3, r7, #4
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	463b      	mov	r3, r7
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 8159 	beq.w	8003cfa <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003a48:	1d3b      	adds	r3, r7, #4
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4e:	463b      	mov	r3, r7
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	785b      	ldrb	r3, [r3, #1]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d164      	bne.n	8003b22 <USB_EPStartXfer+0x20e>
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a5e:	1d3b      	adds	r3, r7, #4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	4413      	add	r3, r2
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a70:	463b      	mov	r3, r7
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	011a      	lsls	r2, r3, #4
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d112      	bne.n	8003ab0 <USB_EPStartXfer+0x19c>
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	801a      	strh	r2, [r3, #0]
 8003aae:	e054      	b.n	8003b5a <USB_EPStartXfer+0x246>
 8003ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab4:	2b3e      	cmp	r3, #62	; 0x3e
 8003ab6:	d817      	bhi.n	8003ae8 <USB_EPStartXfer+0x1d4>
 8003ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ac2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d004      	beq.n	8003ad8 <USB_EPStartXfer+0x1c4>
 8003ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	029b      	lsls	r3, r3, #10
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	801a      	strh	r2, [r3, #0]
 8003ae6:	e038      	b.n	8003b5a <USB_EPStartXfer+0x246>
 8003ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003af2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <USB_EPStartXfer+0x1f4>
 8003afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b02:	3b01      	subs	r3, #1
 8003b04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	029b      	lsls	r3, r3, #10
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	801a      	strh	r2, [r3, #0]
 8003b20:	e01b      	b.n	8003b5a <USB_EPStartXfer+0x246>
 8003b22:	463b      	mov	r3, r7
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d116      	bne.n	8003b5a <USB_EPStartXfer+0x246>
 8003b2c:	1d3b      	adds	r3, r7, #4
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3a:	4413      	add	r3, r2
 8003b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b3e:	463b      	mov	r3, r7
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	011a      	lsls	r2, r3, #4
 8003b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b48:	4413      	add	r3, r2
 8003b4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003b5a:	463b      	mov	r3, r7
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	895b      	ldrh	r3, [r3, #10]
 8003b60:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b64:	463b      	mov	r3, r7
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6959      	ldr	r1, [r3, #20]
 8003b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003b74:	1d38      	adds	r0, r7, #4
 8003b76:	6800      	ldr	r0, [r0, #0]
 8003b78:	f001 f92a 	bl	8004dd0 <USB_WritePMA>
            ep->xfer_buff += len;
 8003b7c:	463b      	mov	r3, r7
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b86:	441a      	add	r2, r3
 8003b88:	463b      	mov	r3, r7
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003b8e:	463b      	mov	r3, r7
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a1a      	ldr	r2, [r3, #32]
 8003b94:	463b      	mov	r3, r7
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d909      	bls.n	8003bb2 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8003b9e:	463b      	mov	r3, r7
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6a1a      	ldr	r2, [r3, #32]
 8003ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba8:	1ad2      	subs	r2, r2, r3
 8003baa:	463b      	mov	r3, r7
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	621a      	str	r2, [r3, #32]
 8003bb0:	e008      	b.n	8003bc4 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003bb2:	463b      	mov	r3, r7
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003bbc:	463b      	mov	r3, r7
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003bc4:	463b      	mov	r3, r7
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	785b      	ldrb	r3, [r3, #1]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d164      	bne.n	8003c98 <USB_EPStartXfer+0x384>
 8003bce:	1d3b      	adds	r3, r7, #4
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	1d3b      	adds	r3, r7, #4
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	4413      	add	r3, r2
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	463b      	mov	r3, r7
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	011a      	lsls	r2, r3, #4
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bf6:	61bb      	str	r3, [r7, #24]
 8003bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d112      	bne.n	8003c26 <USB_EPStartXfer+0x312>
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	801a      	strh	r2, [r3, #0]
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	801a      	strh	r2, [r3, #0]
 8003c24:	e057      	b.n	8003cd6 <USB_EPStartXfer+0x3c2>
 8003c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c2a:	2b3e      	cmp	r3, #62	; 0x3e
 8003c2c:	d817      	bhi.n	8003c5e <USB_EPStartXfer+0x34a>
 8003c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d004      	beq.n	8003c4e <USB_EPStartXfer+0x33a>
 8003c44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c48:	3301      	adds	r3, #1
 8003c4a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	029b      	lsls	r3, r3, #10
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	801a      	strh	r2, [r3, #0]
 8003c5c:	e03b      	b.n	8003cd6 <USB_EPStartXfer+0x3c2>
 8003c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d104      	bne.n	8003c7e <USB_EPStartXfer+0x36a>
 8003c74:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003c7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	029b      	lsls	r3, r3, #10
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	e01e      	b.n	8003cd6 <USB_EPStartXfer+0x3c2>
 8003c98:	463b      	mov	r3, r7
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	785b      	ldrb	r3, [r3, #1]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d119      	bne.n	8003cd6 <USB_EPStartXfer+0x3c2>
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca8:	1d3b      	adds	r3, r7, #4
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	4413      	add	r3, r2
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cba:	463b      	mov	r3, r7
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	011a      	lsls	r2, r3, #4
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cca:	623b      	str	r3, [r7, #32]
 8003ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003cd6:	463b      	mov	r3, r7
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	891b      	ldrh	r3, [r3, #8]
 8003cdc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ce0:	463b      	mov	r3, r7
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6959      	ldr	r1, [r3, #20]
 8003ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003cf0:	1d38      	adds	r0, r7, #4
 8003cf2:	6800      	ldr	r0, [r0, #0]
 8003cf4:	f001 f86c 	bl	8004dd0 <USB_WritePMA>
 8003cf8:	e33b      	b.n	8004372 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cfa:	463b      	mov	r3, r7
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	785b      	ldrb	r3, [r3, #1]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d164      	bne.n	8003dce <USB_EPStartXfer+0x4ba>
 8003d04:	1d3b      	adds	r3, r7, #4
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d0a:	1d3b      	adds	r3, r7, #4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d18:	4413      	add	r3, r2
 8003d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d1c:	463b      	mov	r3, r7
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	011a      	lsls	r2, r3, #4
 8003d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d26:	4413      	add	r3, r2
 8003d28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d112      	bne.n	8003d5c <USB_EPStartXfer+0x448>
 8003d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d44:	801a      	strh	r2, [r3, #0]
 8003d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d58:	801a      	strh	r2, [r3, #0]
 8003d5a:	e057      	b.n	8003e0c <USB_EPStartXfer+0x4f8>
 8003d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d60:	2b3e      	cmp	r3, #62	; 0x3e
 8003d62:	d817      	bhi.n	8003d94 <USB_EPStartXfer+0x480>
 8003d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d004      	beq.n	8003d84 <USB_EPStartXfer+0x470>
 8003d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d7e:	3301      	adds	r3, #1
 8003d80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	029b      	lsls	r3, r3, #10
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d90:	801a      	strh	r2, [r3, #0]
 8003d92:	e03b      	b.n	8003e0c <USB_EPStartXfer+0x4f8>
 8003d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d104      	bne.n	8003db4 <USB_EPStartXfer+0x4a0>
 8003daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dae:	3b01      	subs	r3, #1
 8003db0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	029b      	lsls	r3, r3, #10
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dca:	801a      	strh	r2, [r3, #0]
 8003dcc:	e01e      	b.n	8003e0c <USB_EPStartXfer+0x4f8>
 8003dce:	463b      	mov	r3, r7
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	785b      	ldrb	r3, [r3, #1]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d119      	bne.n	8003e0c <USB_EPStartXfer+0x4f8>
 8003dd8:	1d3b      	adds	r3, r7, #4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	657b      	str	r3, [r7, #84]	; 0x54
 8003dde:	1d3b      	adds	r3, r7, #4
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dec:	4413      	add	r3, r2
 8003dee:	657b      	str	r3, [r7, #84]	; 0x54
 8003df0:	463b      	mov	r3, r7
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	011a      	lsls	r2, r3, #4
 8003df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e00:	653b      	str	r3, [r7, #80]	; 0x50
 8003e02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e0a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003e0c:	463b      	mov	r3, r7
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	891b      	ldrh	r3, [r3, #8]
 8003e12:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e16:	463b      	mov	r3, r7
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6959      	ldr	r1, [r3, #20]
 8003e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003e26:	1d38      	adds	r0, r7, #4
 8003e28:	6800      	ldr	r0, [r0, #0]
 8003e2a:	f000 ffd1 	bl	8004dd0 <USB_WritePMA>
            ep->xfer_buff += len;
 8003e2e:	463b      	mov	r3, r7
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e38:	441a      	add	r2, r3
 8003e3a:	463b      	mov	r3, r7
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003e40:	463b      	mov	r3, r7
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6a1a      	ldr	r2, [r3, #32]
 8003e46:	463b      	mov	r3, r7
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d909      	bls.n	8003e64 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003e50:	463b      	mov	r3, r7
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6a1a      	ldr	r2, [r3, #32]
 8003e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e5a:	1ad2      	subs	r2, r2, r3
 8003e5c:	463b      	mov	r3, r7
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	621a      	str	r2, [r3, #32]
 8003e62:	e008      	b.n	8003e76 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003e64:	463b      	mov	r3, r7
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003e6e:	463b      	mov	r3, r7
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2200      	movs	r2, #0
 8003e74:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e76:	1d3b      	adds	r3, r7, #4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e7c:	463b      	mov	r3, r7
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	785b      	ldrb	r3, [r3, #1]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d164      	bne.n	8003f50 <USB_EPStartXfer+0x63c>
 8003e86:	1d3b      	adds	r3, r7, #4
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e8c:	1d3b      	adds	r3, r7, #4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9a:	4413      	add	r3, r2
 8003e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	011a      	lsls	r2, r3, #4
 8003ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d112      	bne.n	8003ede <USB_EPStartXfer+0x5ca>
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	801a      	strh	r2, [r3, #0]
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eda:	801a      	strh	r2, [r3, #0]
 8003edc:	e054      	b.n	8003f88 <USB_EPStartXfer+0x674>
 8003ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ee4:	d817      	bhi.n	8003f16 <USB_EPStartXfer+0x602>
 8003ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eea:	085b      	lsrs	r3, r3, #1
 8003eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d004      	beq.n	8003f06 <USB_EPStartXfer+0x5f2>
 8003efc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f00:	3301      	adds	r3, #1
 8003f02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	029b      	lsls	r3, r3, #10
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	801a      	strh	r2, [r3, #0]
 8003f14:	e038      	b.n	8003f88 <USB_EPStartXfer+0x674>
 8003f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f24:	f003 031f 	and.w	r3, r3, #31
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d104      	bne.n	8003f36 <USB_EPStartXfer+0x622>
 8003f2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f30:	3b01      	subs	r3, #1
 8003f32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	029b      	lsls	r3, r3, #10
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	801a      	strh	r2, [r3, #0]
 8003f4e:	e01b      	b.n	8003f88 <USB_EPStartXfer+0x674>
 8003f50:	463b      	mov	r3, r7
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	785b      	ldrb	r3, [r3, #1]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d116      	bne.n	8003f88 <USB_EPStartXfer+0x674>
 8003f5a:	1d3b      	adds	r3, r7, #4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f68:	4413      	add	r3, r2
 8003f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003f6c:	463b      	mov	r3, r7
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	011a      	lsls	r2, r3, #4
 8003f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f76:	4413      	add	r3, r2
 8003f78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003f88:	463b      	mov	r3, r7
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	895b      	ldrh	r3, [r3, #10]
 8003f8e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f92:	463b      	mov	r3, r7
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6959      	ldr	r1, [r3, #20]
 8003f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003fa2:	1d38      	adds	r0, r7, #4
 8003fa4:	6800      	ldr	r0, [r0, #0]
 8003fa6:	f000 ff13 	bl	8004dd0 <USB_WritePMA>
 8003faa:	e1e2      	b.n	8004372 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003fac:	463b      	mov	r3, r7
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003fb6:	1d3b      	adds	r3, r7, #4
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	463b      	mov	r3, r7
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003fd4:	1d3b      	adds	r3, r7, #4
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	463b      	mov	r3, r7
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	663b      	str	r3, [r7, #96]	; 0x60
 8004000:	1d3b      	adds	r3, r7, #4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004008:	b29b      	uxth	r3, r3
 800400a:	461a      	mov	r2, r3
 800400c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800400e:	4413      	add	r3, r2
 8004010:	663b      	str	r3, [r7, #96]	; 0x60
 8004012:	463b      	mov	r3, r7
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	011a      	lsls	r2, r3, #4
 800401a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800401c:	4413      	add	r3, r2
 800401e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004022:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004024:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004028:	b29a      	uxth	r2, r3
 800402a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800402c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800402e:	463b      	mov	r3, r7
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	891b      	ldrh	r3, [r3, #8]
 8004034:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004038:	463b      	mov	r3, r7
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6959      	ldr	r1, [r3, #20]
 800403e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004042:	b29b      	uxth	r3, r3
 8004044:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004048:	1d38      	adds	r0, r7, #4
 800404a:	6800      	ldr	r0, [r0, #0]
 800404c:	f000 fec0 	bl	8004dd0 <USB_WritePMA>
 8004050:	e18f      	b.n	8004372 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004052:	1d3b      	adds	r3, r7, #4
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	463b      	mov	r3, r7
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 808f 	beq.w	800418c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800406e:	1d3b      	adds	r3, r7, #4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	67bb      	str	r3, [r7, #120]	; 0x78
 8004074:	463b      	mov	r3, r7
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	785b      	ldrb	r3, [r3, #1]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d164      	bne.n	8004148 <USB_EPStartXfer+0x834>
 800407e:	1d3b      	adds	r3, r7, #4
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	673b      	str	r3, [r7, #112]	; 0x70
 8004084:	1d3b      	adds	r3, r7, #4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800408c:	b29b      	uxth	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004092:	4413      	add	r3, r2
 8004094:	673b      	str	r3, [r7, #112]	; 0x70
 8004096:	463b      	mov	r3, r7
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	011a      	lsls	r2, r3, #4
 800409e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040a0:	4413      	add	r3, r2
 80040a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d112      	bne.n	80040d6 <USB_EPStartXfer+0x7c2>
 80040b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040be:	801a      	strh	r2, [r3, #0]
 80040c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d2:	801a      	strh	r2, [r3, #0]
 80040d4:	e054      	b.n	8004180 <USB_EPStartXfer+0x86c>
 80040d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040da:	2b3e      	cmp	r3, #62	; 0x3e
 80040dc:	d817      	bhi.n	800410e <USB_EPStartXfer+0x7fa>
 80040de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e2:	085b      	lsrs	r3, r3, #1
 80040e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80040e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d004      	beq.n	80040fe <USB_EPStartXfer+0x7ea>
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f8:	3301      	adds	r3, #1
 80040fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80040fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004102:	b29b      	uxth	r3, r3
 8004104:	029b      	lsls	r3, r3, #10
 8004106:	b29a      	uxth	r2, r3
 8004108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410a:	801a      	strh	r2, [r3, #0]
 800410c:	e038      	b.n	8004180 <USB_EPStartXfer+0x86c>
 800410e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	2b00      	cmp	r3, #0
 8004122:	d104      	bne.n	800412e <USB_EPStartXfer+0x81a>
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004128:	3b01      	subs	r3, #1
 800412a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004132:	b29b      	uxth	r3, r3
 8004134:	029b      	lsls	r3, r3, #10
 8004136:	b29b      	uxth	r3, r3
 8004138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800413c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004140:	b29a      	uxth	r2, r3
 8004142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004144:	801a      	strh	r2, [r3, #0]
 8004146:	e01b      	b.n	8004180 <USB_EPStartXfer+0x86c>
 8004148:	463b      	mov	r3, r7
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	785b      	ldrb	r3, [r3, #1]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d116      	bne.n	8004180 <USB_EPStartXfer+0x86c>
 8004152:	1d3b      	adds	r3, r7, #4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415a:	b29b      	uxth	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004160:	4413      	add	r3, r2
 8004162:	67bb      	str	r3, [r7, #120]	; 0x78
 8004164:	463b      	mov	r3, r7
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	011a      	lsls	r2, r3, #4
 800416c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800416e:	4413      	add	r3, r2
 8004170:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004174:	677b      	str	r3, [r7, #116]	; 0x74
 8004176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417a:	b29a      	uxth	r2, r3
 800417c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800417e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004180:	463b      	mov	r3, r7
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	895b      	ldrh	r3, [r3, #10]
 8004186:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800418a:	e097      	b.n	80042bc <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800418c:	463b      	mov	r3, r7
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	785b      	ldrb	r3, [r3, #1]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d168      	bne.n	8004268 <USB_EPStartXfer+0x954>
 8004196:	1d3b      	adds	r3, r7, #4
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800419e:	1d3b      	adds	r3, r7, #4
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041ae:	4413      	add	r3, r2
 80041b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041b4:	463b      	mov	r3, r7
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	011a      	lsls	r2, r3, #4
 80041bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041c0:	4413      	add	r3, r2
 80041c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d112      	bne.n	80041f6 <USB_EPStartXfer+0x8e2>
 80041d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041da:	b29a      	uxth	r2, r3
 80041dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041de:	801a      	strh	r2, [r3, #0]
 80041e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041f2:	801a      	strh	r2, [r3, #0]
 80041f4:	e05d      	b.n	80042b2 <USB_EPStartXfer+0x99e>
 80041f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041fa:	2b3e      	cmp	r3, #62	; 0x3e
 80041fc:	d817      	bhi.n	800422e <USB_EPStartXfer+0x91a>
 80041fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <USB_EPStartXfer+0x90a>
 8004214:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004218:	3301      	adds	r3, #1
 800421a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800421e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004222:	b29b      	uxth	r3, r3
 8004224:	029b      	lsls	r3, r3, #10
 8004226:	b29a      	uxth	r2, r3
 8004228:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800422a:	801a      	strh	r2, [r3, #0]
 800422c:	e041      	b.n	80042b2 <USB_EPStartXfer+0x99e>
 800422e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <USB_EPStartXfer+0x93a>
 8004244:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004248:	3b01      	subs	r3, #1
 800424a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800424e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004252:	b29b      	uxth	r3, r3
 8004254:	029b      	lsls	r3, r3, #10
 8004256:	b29b      	uxth	r3, r3
 8004258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800425c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004260:	b29a      	uxth	r2, r3
 8004262:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004264:	801a      	strh	r2, [r3, #0]
 8004266:	e024      	b.n	80042b2 <USB_EPStartXfer+0x99e>
 8004268:	463b      	mov	r3, r7
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	785b      	ldrb	r3, [r3, #1]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d11f      	bne.n	80042b2 <USB_EPStartXfer+0x99e>
 8004272:	1d3b      	adds	r3, r7, #4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800427a:	1d3b      	adds	r3, r7, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004282:	b29b      	uxth	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800428a:	4413      	add	r3, r2
 800428c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004290:	463b      	mov	r3, r7
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	011a      	lsls	r2, r3, #4
 8004298:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800429c:	4413      	add	r3, r2
 800429e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042b0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80042b2:	463b      	mov	r3, r7
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	891b      	ldrh	r3, [r3, #8]
 80042b8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042bc:	463b      	mov	r3, r7
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6959      	ldr	r1, [r3, #20]
 80042c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80042cc:	1d38      	adds	r0, r7, #4
 80042ce:	6800      	ldr	r0, [r0, #0]
 80042d0:	f000 fd7e 	bl	8004dd0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80042d4:	463b      	mov	r3, r7
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	785b      	ldrb	r3, [r3, #1]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d122      	bne.n	8004324 <USB_EPStartXfer+0xa10>
 80042de:	1d3b      	adds	r3, r7, #4
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	463b      	mov	r3, r7
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80042fc:	1d3b      	adds	r3, r7, #4
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	463b      	mov	r3, r7
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	441a      	add	r2, r3
 800430a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800430e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800431a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800431e:	b29b      	uxth	r3, r3
 8004320:	8013      	strh	r3, [r2, #0]
 8004322:	e026      	b.n	8004372 <USB_EPStartXfer+0xa5e>
 8004324:	463b      	mov	r3, r7
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	785b      	ldrb	r3, [r3, #1]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d121      	bne.n	8004372 <USB_EPStartXfer+0xa5e>
 800432e:	1d3b      	adds	r3, r7, #4
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	463b      	mov	r3, r7
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	b29b      	uxth	r3, r3
 8004340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004348:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800434c:	1d3b      	adds	r3, r7, #4
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	463b      	mov	r3, r7
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800435e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004366:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800436a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436e:	b29b      	uxth	r3, r3
 8004370:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004372:	1d3b      	adds	r3, r7, #4
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	463b      	mov	r3, r7
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	f107 020e 	add.w	r2, r7, #14
 8004388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004390:	8013      	strh	r3, [r2, #0]
 8004392:	f107 030e 	add.w	r3, r7, #14
 8004396:	f107 020e 	add.w	r2, r7, #14
 800439a:	8812      	ldrh	r2, [r2, #0]
 800439c:	f082 0210 	eor.w	r2, r2, #16
 80043a0:	801a      	strh	r2, [r3, #0]
 80043a2:	f107 030e 	add.w	r3, r7, #14
 80043a6:	f107 020e 	add.w	r2, r7, #14
 80043aa:	8812      	ldrh	r2, [r2, #0]
 80043ac:	f082 0220 	eor.w	r2, r2, #32
 80043b0:	801a      	strh	r2, [r3, #0]
 80043b2:	1d3b      	adds	r3, r7, #4
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	463b      	mov	r3, r7
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	441a      	add	r2, r3
 80043c0:	f107 030e 	add.w	r3, r7, #14
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	8013      	strh	r3, [r2, #0]
 80043da:	e3b5      	b.n	8004b48 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80043dc:	463b      	mov	r3, r7
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	7b1b      	ldrb	r3, [r3, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f040 8090 	bne.w	8004508 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80043e8:	463b      	mov	r3, r7
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	463b      	mov	r3, r7
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d90e      	bls.n	8004416 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80043f8:	463b      	mov	r3, r7
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004402:	463b      	mov	r3, r7
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699a      	ldr	r2, [r3, #24]
 8004408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800440c:	1ad2      	subs	r2, r2, r3
 800440e:	463b      	mov	r3, r7
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	619a      	str	r2, [r3, #24]
 8004414:	e008      	b.n	8004428 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004416:	463b      	mov	r3, r7
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004420:	463b      	mov	r3, r7
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2200      	movs	r2, #0
 8004426:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004428:	1d3b      	adds	r3, r7, #4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004430:	1d3b      	adds	r3, r7, #4
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004438:	b29b      	uxth	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004440:	4413      	add	r3, r2
 8004442:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004446:	463b      	mov	r3, r7
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	011a      	lsls	r2, r3, #4
 800444e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004452:	4413      	add	r3, r2
 8004454:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004458:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800445c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d116      	bne.n	8004492 <USB_EPStartXfer+0xb7e>
 8004464:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	b29b      	uxth	r3, r3
 800446c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004470:	b29a      	uxth	r2, r3
 8004472:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004476:	801a      	strh	r2, [r3, #0]
 8004478:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29b      	uxth	r3, r3
 8004480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004488:	b29a      	uxth	r2, r3
 800448a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	e32c      	b.n	8004aec <USB_EPStartXfer+0x11d8>
 8004492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004496:	2b3e      	cmp	r3, #62	; 0x3e
 8004498:	d818      	bhi.n	80044cc <USB_EPStartXfer+0xbb8>
 800449a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800449e:	085b      	lsrs	r3, r3, #1
 80044a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80044a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d004      	beq.n	80044ba <USB_EPStartXfer+0xba6>
 80044b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044b4:	3301      	adds	r3, #1
 80044b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80044ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044be:	b29b      	uxth	r3, r3
 80044c0:	029b      	lsls	r3, r3, #10
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044c8:	801a      	strh	r2, [r3, #0]
 80044ca:	e30f      	b.n	8004aec <USB_EPStartXfer+0x11d8>
 80044cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80044d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <USB_EPStartXfer+0xbd8>
 80044e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044e6:	3b01      	subs	r3, #1
 80044e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80044ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	029b      	lsls	r3, r3, #10
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044fe:	b29a      	uxth	r2, r3
 8004500:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004504:	801a      	strh	r2, [r3, #0]
 8004506:	e2f1      	b.n	8004aec <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004508:	463b      	mov	r3, r7
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	78db      	ldrb	r3, [r3, #3]
 800450e:	2b02      	cmp	r3, #2
 8004510:	f040 818f 	bne.w	8004832 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004514:	463b      	mov	r3, r7
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	785b      	ldrb	r3, [r3, #1]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d175      	bne.n	800460a <USB_EPStartXfer+0xcf6>
 800451e:	1d3b      	adds	r3, r7, #4
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004526:	1d3b      	adds	r3, r7, #4
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800452e:	b29b      	uxth	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004536:	4413      	add	r3, r2
 8004538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800453c:	463b      	mov	r3, r7
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	011a      	lsls	r2, r3, #4
 8004544:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004548:	4413      	add	r3, r2
 800454a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800454e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004552:	463b      	mov	r3, r7
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d116      	bne.n	800458a <USB_EPStartXfer+0xc76>
 800455c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004568:	b29a      	uxth	r2, r3
 800456a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800456e:	801a      	strh	r2, [r3, #0]
 8004570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800457c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004580:	b29a      	uxth	r2, r3
 8004582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004586:	801a      	strh	r2, [r3, #0]
 8004588:	e065      	b.n	8004656 <USB_EPStartXfer+0xd42>
 800458a:	463b      	mov	r3, r7
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b3e      	cmp	r3, #62	; 0x3e
 8004592:	d81a      	bhi.n	80045ca <USB_EPStartXfer+0xcb6>
 8004594:	463b      	mov	r3, r7
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045a0:	463b      	mov	r3, r7
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <USB_EPStartXfer+0xca4>
 80045ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045b2:	3301      	adds	r3, #1
 80045b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045bc:	b29b      	uxth	r3, r3
 80045be:	029b      	lsls	r3, r3, #10
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045c6:	801a      	strh	r2, [r3, #0]
 80045c8:	e045      	b.n	8004656 <USB_EPStartXfer+0xd42>
 80045ca:	463b      	mov	r3, r7
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045d6:	463b      	mov	r3, r7
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d104      	bne.n	80045ee <USB_EPStartXfer+0xcda>
 80045e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045e8:	3b01      	subs	r3, #1
 80045ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	029b      	lsls	r3, r3, #10
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004600:	b29a      	uxth	r2, r3
 8004602:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004606:	801a      	strh	r2, [r3, #0]
 8004608:	e025      	b.n	8004656 <USB_EPStartXfer+0xd42>
 800460a:	463b      	mov	r3, r7
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d120      	bne.n	8004656 <USB_EPStartXfer+0xd42>
 8004614:	1d3b      	adds	r3, r7, #4
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800461c:	1d3b      	adds	r3, r7, #4
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004624:	b29b      	uxth	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800462c:	4413      	add	r3, r2
 800462e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004632:	463b      	mov	r3, r7
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	011a      	lsls	r2, r3, #4
 800463a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800463e:	4413      	add	r3, r2
 8004640:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004648:	463b      	mov	r3, r7
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	b29a      	uxth	r2, r3
 8004650:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004654:	801a      	strh	r2, [r3, #0]
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800465e:	463b      	mov	r3, r7
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	785b      	ldrb	r3, [r3, #1]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d175      	bne.n	8004754 <USB_EPStartXfer+0xe40>
 8004668:	1d3b      	adds	r3, r7, #4
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004670:	1d3b      	adds	r3, r7, #4
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004678:	b29b      	uxth	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004680:	4413      	add	r3, r2
 8004682:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004686:	463b      	mov	r3, r7
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	011a      	lsls	r2, r3, #4
 800468e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004692:	4413      	add	r3, r2
 8004694:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800469c:	463b      	mov	r3, r7
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d116      	bne.n	80046d4 <USB_EPStartXfer+0xdc0>
 80046a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046b8:	801a      	strh	r2, [r3, #0]
 80046ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046d0:	801a      	strh	r2, [r3, #0]
 80046d2:	e061      	b.n	8004798 <USB_EPStartXfer+0xe84>
 80046d4:	463b      	mov	r3, r7
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b3e      	cmp	r3, #62	; 0x3e
 80046dc:	d81a      	bhi.n	8004714 <USB_EPStartXfer+0xe00>
 80046de:	463b      	mov	r3, r7
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046ea:	463b      	mov	r3, r7
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d004      	beq.n	8004702 <USB_EPStartXfer+0xdee>
 80046f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fc:	3301      	adds	r3, #1
 80046fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004706:	b29b      	uxth	r3, r3
 8004708:	029b      	lsls	r3, r3, #10
 800470a:	b29a      	uxth	r2, r3
 800470c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004710:	801a      	strh	r2, [r3, #0]
 8004712:	e041      	b.n	8004798 <USB_EPStartXfer+0xe84>
 8004714:	463b      	mov	r3, r7
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004720:	463b      	mov	r3, r7
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <USB_EPStartXfer+0xe24>
 800472e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004732:	3b01      	subs	r3, #1
 8004734:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473c:	b29b      	uxth	r3, r3
 800473e:	029b      	lsls	r3, r3, #10
 8004740:	b29b      	uxth	r3, r3
 8004742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800474a:	b29a      	uxth	r2, r3
 800474c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004750:	801a      	strh	r2, [r3, #0]
 8004752:	e021      	b.n	8004798 <USB_EPStartXfer+0xe84>
 8004754:	463b      	mov	r3, r7
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	785b      	ldrb	r3, [r3, #1]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d11c      	bne.n	8004798 <USB_EPStartXfer+0xe84>
 800475e:	1d3b      	adds	r3, r7, #4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004766:	b29b      	uxth	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800476e:	4413      	add	r3, r2
 8004770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004774:	463b      	mov	r3, r7
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	011a      	lsls	r2, r3, #4
 800477c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004780:	4413      	add	r3, r2
 8004782:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800478a:	463b      	mov	r3, r7
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	b29a      	uxth	r2, r3
 8004792:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004796:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004798:	463b      	mov	r3, r7
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 81a4 	beq.w	8004aec <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80047a4:	1d3b      	adds	r3, r7, #4
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	463b      	mov	r3, r7
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80047b8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80047bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <USB_EPStartXfer+0xebc>
 80047c4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80047c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10d      	bne.n	80047ec <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80047d0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80047d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f040 8187 	bne.w	8004aec <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80047de:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f040 8180 	bne.w	8004aec <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80047ec:	1d3b      	adds	r3, r7, #4
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	463b      	mov	r3, r7
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004806:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800480a:	1d3b      	adds	r3, r7, #4
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	463b      	mov	r3, r7
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	441a      	add	r2, r3
 8004818:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800481c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004828:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800482c:	b29b      	uxth	r3, r3
 800482e:	8013      	strh	r3, [r2, #0]
 8004830:	e15c      	b.n	8004aec <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004832:	463b      	mov	r3, r7
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	78db      	ldrb	r3, [r3, #3]
 8004838:	2b01      	cmp	r3, #1
 800483a:	f040 8155 	bne.w	8004ae8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800483e:	463b      	mov	r3, r7
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	463b      	mov	r3, r7
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	429a      	cmp	r2, r3
 800484c:	d90e      	bls.n	800486c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800484e:	463b      	mov	r3, r7
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004858:	463b      	mov	r3, r7
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004862:	1ad2      	subs	r2, r2, r3
 8004864:	463b      	mov	r3, r7
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	619a      	str	r2, [r3, #24]
 800486a:	e008      	b.n	800487e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800486c:	463b      	mov	r3, r7
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004876:	463b      	mov	r3, r7
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2200      	movs	r2, #0
 800487c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800487e:	463b      	mov	r3, r7
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	785b      	ldrb	r3, [r3, #1]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d16f      	bne.n	8004968 <USB_EPStartXfer+0x1054>
 8004888:	1d3b      	adds	r3, r7, #4
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004890:	1d3b      	adds	r3, r7, #4
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004898:	b29b      	uxth	r3, r3
 800489a:	461a      	mov	r2, r3
 800489c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80048a0:	4413      	add	r3, r2
 80048a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048a6:	463b      	mov	r3, r7
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	011a      	lsls	r2, r3, #4
 80048ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80048b2:	4413      	add	r3, r2
 80048b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d116      	bne.n	80048f2 <USB_EPStartXfer+0xfde>
 80048c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048d6:	801a      	strh	r2, [r3, #0]
 80048d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048ee:	801a      	strh	r2, [r3, #0]
 80048f0:	e05f      	b.n	80049b2 <USB_EPStartXfer+0x109e>
 80048f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f6:	2b3e      	cmp	r3, #62	; 0x3e
 80048f8:	d818      	bhi.n	800492c <USB_EPStartXfer+0x1018>
 80048fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048fe:	085b      	lsrs	r3, r3, #1
 8004900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d004      	beq.n	800491a <USB_EPStartXfer+0x1006>
 8004910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004914:	3301      	adds	r3, #1
 8004916:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800491a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800491e:	b29b      	uxth	r3, r3
 8004920:	029b      	lsls	r3, r3, #10
 8004922:	b29a      	uxth	r2, r3
 8004924:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004928:	801a      	strh	r2, [r3, #0]
 800492a:	e042      	b.n	80049b2 <USB_EPStartXfer+0x109e>
 800492c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2b00      	cmp	r3, #0
 8004940:	d104      	bne.n	800494c <USB_EPStartXfer+0x1038>
 8004942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004946:	3b01      	subs	r3, #1
 8004948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800494c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004950:	b29b      	uxth	r3, r3
 8004952:	029b      	lsls	r3, r3, #10
 8004954:	b29b      	uxth	r3, r3
 8004956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800495a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800495e:	b29a      	uxth	r2, r3
 8004960:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004964:	801a      	strh	r2, [r3, #0]
 8004966:	e024      	b.n	80049b2 <USB_EPStartXfer+0x109e>
 8004968:	463b      	mov	r3, r7
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	785b      	ldrb	r3, [r3, #1]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d11f      	bne.n	80049b2 <USB_EPStartXfer+0x109e>
 8004972:	1d3b      	adds	r3, r7, #4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800497a:	1d3b      	adds	r3, r7, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004982:	b29b      	uxth	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800498a:	4413      	add	r3, r2
 800498c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004990:	463b      	mov	r3, r7
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	011a      	lsls	r2, r3, #4
 8004998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800499c:	4413      	add	r3, r2
 800499e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80049a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	1d3b      	adds	r3, r7, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049ba:	463b      	mov	r3, r7
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	785b      	ldrb	r3, [r3, #1]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d16f      	bne.n	8004aa4 <USB_EPStartXfer+0x1190>
 80049c4:	1d3b      	adds	r3, r7, #4
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049cc:	1d3b      	adds	r3, r7, #4
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049dc:	4413      	add	r3, r2
 80049de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049e2:	463b      	mov	r3, r7
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	011a      	lsls	r2, r3, #4
 80049ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049ee:	4413      	add	r3, r2
 80049f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80049f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d116      	bne.n	8004a2e <USB_EPStartXfer+0x111a>
 8004a00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a12:	801a      	strh	r2, [r3, #0]
 8004a14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a2a:	801a      	strh	r2, [r3, #0]
 8004a2c:	e05e      	b.n	8004aec <USB_EPStartXfer+0x11d8>
 8004a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a32:	2b3e      	cmp	r3, #62	; 0x3e
 8004a34:	d818      	bhi.n	8004a68 <USB_EPStartXfer+0x1154>
 8004a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <USB_EPStartXfer+0x1142>
 8004a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a50:	3301      	adds	r3, #1
 8004a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	029b      	lsls	r3, r3, #10
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a64:	801a      	strh	r2, [r3, #0]
 8004a66:	e041      	b.n	8004aec <USB_EPStartXfer+0x11d8>
 8004a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a6c:	095b      	lsrs	r3, r3, #5
 8004a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d104      	bne.n	8004a88 <USB_EPStartXfer+0x1174>
 8004a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a82:	3b01      	subs	r3, #1
 8004a84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	029b      	lsls	r3, r3, #10
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004aa0:	801a      	strh	r2, [r3, #0]
 8004aa2:	e023      	b.n	8004aec <USB_EPStartXfer+0x11d8>
 8004aa4:	463b      	mov	r3, r7
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d11e      	bne.n	8004aec <USB_EPStartXfer+0x11d8>
 8004aae:	1d3b      	adds	r3, r7, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004abe:	4413      	add	r3, r2
 8004ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ac4:	463b      	mov	r3, r7
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	011a      	lsls	r2, r3, #4
 8004acc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ad6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ae4:	801a      	strh	r2, [r3, #0]
 8004ae6:	e001      	b.n	8004aec <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e02e      	b.n	8004b4a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004aec:	1d3b      	adds	r3, r7, #4
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	463b      	mov	r3, r7
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b06:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004b0a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004b0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b12:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004b16:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004b1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b1e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004b22:	1d3b      	adds	r3, r7, #4
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	463b      	mov	r3, r7
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	441a      	add	r2, r3
 8004b30:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	785b      	ldrb	r3, [r3, #1]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d020      	beq.n	8004ba8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b7c:	81bb      	strh	r3, [r7, #12]
 8004b7e:	89bb      	ldrh	r3, [r7, #12]
 8004b80:	f083 0310 	eor.w	r3, r3, #16
 8004b84:	81bb      	strh	r3, [r7, #12]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	441a      	add	r2, r3
 8004b90:	89bb      	ldrh	r3, [r7, #12]
 8004b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	8013      	strh	r3, [r2, #0]
 8004ba6:	e01f      	b.n	8004be8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbe:	81fb      	strh	r3, [r7, #14]
 8004bc0:	89fb      	ldrh	r3, [r7, #14]
 8004bc2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bc6:	81fb      	strh	r3, [r7, #14]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	441a      	add	r2, r3
 8004bd2:	89fb      	ldrh	r3, [r7, #14]
 8004bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr

08004bf4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	7b1b      	ldrb	r3, [r3, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f040 809d 	bne.w	8004d42 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	785b      	ldrb	r3, [r3, #1]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d04c      	beq.n	8004caa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	823b      	strh	r3, [r7, #16]
 8004c1e:	8a3b      	ldrh	r3, [r7, #16]
 8004c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01b      	beq.n	8004c60 <USB_EPClearStall+0x6c>
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3e:	81fb      	strh	r3, [r7, #14]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	441a      	add	r2, r3
 8004c4a:	89fb      	ldrh	r3, [r7, #14]
 8004c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	78db      	ldrb	r3, [r3, #3]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d06c      	beq.n	8004d42 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c7e:	81bb      	strh	r3, [r7, #12]
 8004c80:	89bb      	ldrh	r3, [r7, #12]
 8004c82:	f083 0320 	eor.w	r3, r3, #32
 8004c86:	81bb      	strh	r3, [r7, #12]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	89bb      	ldrh	r3, [r7, #12]
 8004c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	8013      	strh	r3, [r2, #0]
 8004ca8:	e04b      	b.n	8004d42 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	82fb      	strh	r3, [r7, #22]
 8004cb8:	8afb      	ldrh	r3, [r7, #22]
 8004cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01b      	beq.n	8004cfa <USB_EPClearStall+0x106>
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd8:	82bb      	strh	r3, [r7, #20]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	441a      	add	r2, r3
 8004ce4:	8abb      	ldrh	r3, [r7, #20]
 8004ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d10:	827b      	strh	r3, [r7, #18]
 8004d12:	8a7b      	ldrh	r3, [r7, #18]
 8004d14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d18:	827b      	strh	r3, [r7, #18]
 8004d1a:	8a7b      	ldrh	r3, [r7, #18]
 8004d1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d20:	827b      	strh	r3, [r7, #18]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	441a      	add	r2, r3
 8004d2c:	8a7b      	ldrh	r3, [r7, #18]
 8004d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	371c      	adds	r7, #28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr

08004d4e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	460b      	mov	r3, r1
 8004d58:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d103      	bne.n	8004d68 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2280      	movs	r2, #128	; 0x80
 8004d64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr

08004d74 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004dae:	68fb      	ldr	r3, [r7, #12]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr

08004dba <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b08d      	sub	sp, #52	; 0x34
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	4611      	mov	r1, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	460b      	mov	r3, r1
 8004de0:	80fb      	strh	r3, [r7, #6]
 8004de2:	4613      	mov	r3, r2
 8004de4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004de6:	88bb      	ldrh	r3, [r7, #4]
 8004de8:	3301      	adds	r3, #1
 8004dea:	085b      	lsrs	r3, r3, #1
 8004dec:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	005a      	lsls	r2, r3, #1
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e02:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e08:	e01e      	b.n	8004e48 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	3301      	adds	r3, #1
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	3302      	adds	r3, #2
 8004e34:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	3302      	adds	r3, #2
 8004e3a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	3301      	adds	r3, #1
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	3b01      	subs	r3, #1
 8004e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1dd      	bne.n	8004e0a <USB_WritePMA+0x3a>
  }
}
 8004e4e:	bf00      	nop
 8004e50:	bf00      	nop
 8004e52:	3734      	adds	r7, #52	; 0x34
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr

08004e5a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b08b      	sub	sp, #44	; 0x2c
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	4611      	mov	r1, r2
 8004e66:	461a      	mov	r2, r3
 8004e68:	460b      	mov	r3, r1
 8004e6a:	80fb      	strh	r3, [r7, #6]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004e70:	88bb      	ldrh	r3, [r7, #4]
 8004e72:	085b      	lsrs	r3, r3, #1
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	005a      	lsls	r2, r3, #1
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e8c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
 8004e92:	e01b      	b.n	8004ecc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	3302      	adds	r3, #2
 8004ea0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	3301      	adds	r3, #1
 8004eae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	0a1b      	lsrs	r3, r3, #8
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	3302      	adds	r3, #2
 8004ec4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e0      	bne.n	8004e94 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004ed2:	88bb      	ldrh	r3, [r7, #4]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d007      	beq.n	8004eee <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	701a      	strb	r2, [r3, #0]
  }
}
 8004eee:	bf00      	nop
 8004ef0:	372c      	adds	r7, #44	; 0x2c
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bc80      	pop	{r7}
 8004ef6:	4770      	bx	lr

08004ef8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004f04:	2304      	movs	r3, #4
 8004f06:	2203      	movs	r2, #3
 8004f08:	2181      	movs	r1, #129	; 0x81
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f004 f957 	bl	80091be <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004f16:	2010      	movs	r0, #16
 8004f18:	f004 fa66 	bl	80093e8 <USBD_static_malloc>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e005      	b.n	8004f3e <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f38:	2200      	movs	r2, #0
 8004f3a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b082      	sub	sp, #8
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	460b      	mov	r3, r1
 8004f50:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004f52:	2181      	movs	r1, #129	; 0x81
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f004 f958 	bl	800920a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d009      	beq.n	8004f7e <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f70:	4618      	mov	r0, r3
 8004f72:	f004 fa45 	bl	8009400 <USBD_static_free>
    pdev->pClassData = NULL;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f98:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d045      	beq.n	8005042 <USBD_HID_Setup+0xba>
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	f040 80d3 	bne.w	8005162 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	785b      	ldrb	r3, [r3, #1]
 8004fc0:	3b02      	subs	r3, #2
 8004fc2:	2b09      	cmp	r3, #9
 8004fc4:	d835      	bhi.n	8005032 <USBD_HID_Setup+0xaa>
 8004fc6:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <USBD_HID_Setup+0x44>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08005023 	.word	0x08005023
 8004fd0:	08005003 	.word	0x08005003
 8004fd4:	08005033 	.word	0x08005033
 8004fd8:	08005033 	.word	0x08005033
 8004fdc:	08005033 	.word	0x08005033
 8004fe0:	08005033 	.word	0x08005033
 8004fe4:	08005033 	.word	0x08005033
 8004fe8:	08005033 	.word	0x08005033
 8004fec:	08005011 	.word	0x08005011
 8004ff0:	08004ff5 	.word	0x08004ff5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	885b      	ldrh	r3, [r3, #2]
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	601a      	str	r2, [r3, #0]
          break;
 8005000:	e01e      	b.n	8005040 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	2201      	movs	r2, #1
 8005006:	4619      	mov	r1, r3
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f001 f944 	bl	8006296 <USBD_CtlSendData>
          break;
 800500e:	e017      	b.n	8005040 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	885b      	ldrh	r3, [r3, #2]
 8005014:	0a1b      	lsrs	r3, r3, #8
 8005016:	b29b      	uxth	r3, r3
 8005018:	b2db      	uxtb	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	605a      	str	r2, [r3, #4]
          break;
 8005020:	e00e      	b.n	8005040 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	3304      	adds	r3, #4
 8005026:	2201      	movs	r2, #1
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f001 f933 	bl	8006296 <USBD_CtlSendData>
          break;
 8005030:	e006      	b.n	8005040 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8005032:	6839      	ldr	r1, [r7, #0]
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f001 f8c4 	bl	80061c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800503a:	2302      	movs	r3, #2
 800503c:	75fb      	strb	r3, [r7, #23]
          break;
 800503e:	bf00      	nop
      }
      break;
 8005040:	e096      	b.n	8005170 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	785b      	ldrb	r3, [r3, #1]
 8005046:	2b0b      	cmp	r3, #11
 8005048:	f200 8083 	bhi.w	8005152 <USBD_HID_Setup+0x1ca>
 800504c:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <USBD_HID_Setup+0xcc>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	08005085 	.word	0x08005085
 8005058:	08005153 	.word	0x08005153
 800505c:	08005153 	.word	0x08005153
 8005060:	08005153 	.word	0x08005153
 8005064:	08005153 	.word	0x08005153
 8005068:	08005153 	.word	0x08005153
 800506c:	080050ad 	.word	0x080050ad
 8005070:	08005153 	.word	0x08005153
 8005074:	08005153 	.word	0x08005153
 8005078:	08005153 	.word	0x08005153
 800507c:	08005105 	.word	0x08005105
 8005080:	0800512d 	.word	0x0800512d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800508a:	2b03      	cmp	r3, #3
 800508c:	d107      	bne.n	800509e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800508e:	f107 030e 	add.w	r3, r7, #14
 8005092:	2202      	movs	r2, #2
 8005094:	4619      	mov	r1, r3
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f001 f8fd 	bl	8006296 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800509c:	e060      	b.n	8005160 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800509e:	6839      	ldr	r1, [r7, #0]
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f001 f88e 	bl	80061c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80050a6:	2302      	movs	r3, #2
 80050a8:	75fb      	strb	r3, [r7, #23]
          break;
 80050aa:	e059      	b.n	8005160 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	885b      	ldrh	r3, [r3, #2]
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b22      	cmp	r3, #34	; 0x22
 80050b6:	d108      	bne.n	80050ca <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_KEYBOARD_REPORT_DESC_SIZE, req->wLength);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	88db      	ldrh	r3, [r3, #6]
 80050bc:	2b3f      	cmp	r3, #63	; 0x3f
 80050be:	bf28      	it	cs
 80050c0:	233f      	movcs	r3, #63	; 0x3f
 80050c2:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KEYBOARD_ReportDesc;
 80050c4:	4b2d      	ldr	r3, [pc, #180]	; (800517c <USBD_HID_Setup+0x1f4>)
 80050c6:	61bb      	str	r3, [r7, #24]
 80050c8:	e015      	b.n	80050f6 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	885b      	ldrh	r3, [r3, #2]
 80050ce:	0a1b      	lsrs	r3, r3, #8
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	2b21      	cmp	r3, #33	; 0x21
 80050d4:	d108      	bne.n	80050e8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80050d6:	4b2a      	ldr	r3, [pc, #168]	; (8005180 <USBD_HID_Setup+0x1f8>)
 80050d8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	88db      	ldrh	r3, [r3, #6]
 80050de:	2b09      	cmp	r3, #9
 80050e0:	bf28      	it	cs
 80050e2:	2309      	movcs	r3, #9
 80050e4:	83fb      	strh	r3, [r7, #30]
 80050e6:	e006      	b.n	80050f6 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f001 f869 	bl	80061c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80050f0:	2302      	movs	r3, #2
 80050f2:	75fb      	strb	r3, [r7, #23]
            break;
 80050f4:	e034      	b.n	8005160 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80050f6:	8bfb      	ldrh	r3, [r7, #30]
 80050f8:	461a      	mov	r2, r3
 80050fa:	69b9      	ldr	r1, [r7, #24]
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f001 f8ca 	bl	8006296 <USBD_CtlSendData>
          break;
 8005102:	e02d      	b.n	8005160 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800510a:	2b03      	cmp	r3, #3
 800510c:	d107      	bne.n	800511e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	3308      	adds	r3, #8
 8005112:	2201      	movs	r2, #1
 8005114:	4619      	mov	r1, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f001 f8bd 	bl	8006296 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800511c:	e020      	b.n	8005160 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800511e:	6839      	ldr	r1, [r7, #0]
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f001 f84e 	bl	80061c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005126:	2302      	movs	r3, #2
 8005128:	75fb      	strb	r3, [r7, #23]
          break;
 800512a:	e019      	b.n	8005160 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005132:	2b03      	cmp	r3, #3
 8005134:	d106      	bne.n	8005144 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	885b      	ldrh	r3, [r3, #2]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	461a      	mov	r2, r3
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005142:	e00d      	b.n	8005160 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005144:	6839      	ldr	r1, [r7, #0]
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f001 f83b 	bl	80061c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800514c:	2302      	movs	r3, #2
 800514e:	75fb      	strb	r3, [r7, #23]
          break;
 8005150:	e006      	b.n	8005160 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f001 f834 	bl	80061c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800515a:	2302      	movs	r3, #2
 800515c:	75fb      	strb	r3, [r7, #23]
          break;
 800515e:	bf00      	nop
      }
      break;
 8005160:	e006      	b.n	8005170 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8005162:	6839      	ldr	r1, [r7, #0]
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f001 f82c 	bl	80061c2 <USBD_CtlError>
      ret = USBD_FAIL;
 800516a:	2302      	movs	r3, #2
 800516c:	75fb      	strb	r3, [r7, #23]
      break;
 800516e:	bf00      	nop
  }

  return ret;
 8005170:	7dfb      	ldrb	r3, [r7, #23]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	200000c8 	.word	0x200000c8
 8005180:	200000b0 	.word	0x200000b0

08005184 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	4613      	mov	r3, r2
 8005190:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005198:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d10c      	bne.n	80051be <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	7b1b      	ldrb	r3, [r3, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d108      	bne.n	80051be <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2201      	movs	r2, #1
 80051b0:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	2181      	movs	r1, #129	; 0x81
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f004 f8ce 	bl	800935a <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2222      	movs	r2, #34	; 0x22
 80051d4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80051d6:	4b03      	ldr	r3, [pc, #12]	; (80051e4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc80      	pop	{r7}
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000044 	.word	0x20000044

080051e8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2222      	movs	r2, #34	; 0x22
 80051f4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80051f6:	4b03      	ldr	r3, [pc, #12]	; (8005204 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	20000068 	.word	0x20000068

08005208 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2222      	movs	r2, #34	; 0x22
 8005214:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005216:	4b03      	ldr	r3, [pc, #12]	; (8005224 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005218:	4618      	mov	r0, r3
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	2000008c 	.word	0x2000008c

08005228 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800523a:	2200      	movs	r2, #0
 800523c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr
	...

0800524c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	220a      	movs	r2, #10
 8005258:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800525a:	4b03      	ldr	r3, [pc, #12]	; (8005268 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	200000bc 	.word	0x200000bc

0800526c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005280:	2302      	movs	r3, #2
 8005282:	e01a      	b.n	80052ba <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	79fa      	ldrb	r2, [r7, #7]
 80052b0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f003 ff20 	bl	80090f8 <USBD_LL_Init>

  return USBD_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d006      	beq.n	80052e4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	73fb      	strb	r3, [r7, #15]
 80052e2:	e001      	b.n	80052e8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80052e4:	2302      	movs	r3, #2
 80052e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f003 ff43 	bl	8009188 <USBD_LL_Start>

  return USBD_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800532c:	2302      	movs	r3, #2
 800532e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00c      	beq.n	8005354 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	78fa      	ldrb	r2, [r7, #3]
 8005344:	4611      	mov	r1, r2
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	4798      	blx	r3
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005354:	7bfb      	ldrb	r3, [r7, #15]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	460b      	mov	r3, r1
 8005368:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	78fa      	ldrb	r2, [r7, #3]
 8005374:	4611      	mov	r1, r2
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	4798      	blx	r3

  return USBD_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fed7 	bl	800614a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80053aa:	461a      	mov	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80053b8:	f003 031f 	and.w	r3, r3, #31
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d016      	beq.n	80053ee <USBD_LL_SetupStage+0x6a>
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d81c      	bhi.n	80053fe <USBD_LL_SetupStage+0x7a>
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <USBD_LL_SetupStage+0x4a>
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d008      	beq.n	80053de <USBD_LL_SetupStage+0x5a>
 80053cc:	e017      	b.n	80053fe <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f9ca 	bl	8005770 <USBD_StdDevReq>
      break;
 80053dc:	e01a      	b.n	8005414 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fa2c 	bl	8005844 <USBD_StdItfReq>
      break;
 80053ec:	e012      	b.n	8005414 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053f4:	4619      	mov	r1, r3
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fa6c 	bl	80058d4 <USBD_StdEPReq>
      break;
 80053fc:	e00a      	b.n	8005414 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005404:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005408:	b2db      	uxtb	r3, r3
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f003 ff1b 	bl	8009248 <USBD_LL_StallEP>
      break;
 8005412:	bf00      	nop
  }

  return USBD_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b086      	sub	sp, #24
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	460b      	mov	r3, r1
 8005428:	607a      	str	r2, [r7, #4]
 800542a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800542c:	7afb      	ldrb	r3, [r7, #11]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d14b      	bne.n	80054ca <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005438:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005440:	2b03      	cmp	r3, #3
 8005442:	d134      	bne.n	80054ae <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	429a      	cmp	r2, r3
 800544e:	d919      	bls.n	8005484 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	1ad2      	subs	r2, r2, r3
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005466:	429a      	cmp	r2, r3
 8005468:	d203      	bcs.n	8005472 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800546e:	b29b      	uxth	r3, r3
 8005470:	e002      	b.n	8005478 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005476:	b29b      	uxth	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 ff38 	bl	80062f2 <USBD_CtlContinueRx>
 8005482:	e038      	b.n	80054f6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005496:	2b03      	cmp	r3, #3
 8005498:	d105      	bne.n	80054a6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 ff35 	bl	8006316 <USBD_CtlSendStatus>
 80054ac:	e023      	b.n	80054f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054b4:	2b05      	cmp	r3, #5
 80054b6:	d11e      	bne.n	80054f6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80054c0:	2100      	movs	r1, #0
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f003 fec0 	bl	8009248 <USBD_LL_StallEP>
 80054c8:	e015      	b.n	80054f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00d      	beq.n	80054f2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d108      	bne.n	80054f2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	7afa      	ldrb	r2, [r7, #11]
 80054ea:	4611      	mov	r1, r2
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	4798      	blx	r3
 80054f0:	e001      	b.n	80054f6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80054f2:	2302      	movs	r3, #2
 80054f4:	e000      	b.n	80054f8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	460b      	mov	r3, r1
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800550e:	7afb      	ldrb	r3, [r7, #11]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d17f      	bne.n	8005614 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3314      	adds	r3, #20
 8005518:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005520:	2b02      	cmp	r3, #2
 8005522:	d15c      	bne.n	80055de <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	429a      	cmp	r2, r3
 800552e:	d915      	bls.n	800555c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	1ad2      	subs	r2, r2, r3
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	b29b      	uxth	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 fec0 	bl	80062ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800554e:	2300      	movs	r3, #0
 8005550:	2200      	movs	r2, #0
 8005552:	2100      	movs	r1, #0
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f003 ff23 	bl	80093a0 <USBD_LL_PrepareReceive>
 800555a:	e04e      	b.n	80055fa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	6912      	ldr	r2, [r2, #16]
 8005564:	fbb3 f1f2 	udiv	r1, r3, r2
 8005568:	fb02 f201 	mul.w	r2, r2, r1
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d11c      	bne.n	80055ac <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800557a:	429a      	cmp	r2, r3
 800557c:	d316      	bcc.n	80055ac <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005588:	429a      	cmp	r2, r3
 800558a:	d20f      	bcs.n	80055ac <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800558c:	2200      	movs	r2, #0
 800558e:	2100      	movs	r1, #0
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 fe9c 	bl	80062ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800559e:	2300      	movs	r3, #0
 80055a0:	2200      	movs	r2, #0
 80055a2:	2100      	movs	r1, #0
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f003 fefb 	bl	80093a0 <USBD_LL_PrepareReceive>
 80055aa:	e026      	b.n	80055fa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d105      	bne.n	80055ce <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80055ce:	2180      	movs	r1, #128	; 0x80
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f003 fe39 	bl	8009248 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 feb0 	bl	800633c <USBD_CtlReceiveStatus>
 80055dc:	e00d      	b.n	80055fa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d004      	beq.n	80055f2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80055f2:	2180      	movs	r1, #128	; 0x80
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f003 fe27 	bl	8009248 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005600:	2b01      	cmp	r3, #1
 8005602:	d11d      	bne.n	8005640 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7ff fe81 	bl	800530c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005612:	e015      	b.n	8005640 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00d      	beq.n	800563c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005626:	2b03      	cmp	r3, #3
 8005628:	d108      	bne.n	800563c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	7afa      	ldrb	r2, [r7, #11]
 8005634:	4611      	mov	r1, r2
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	4798      	blx	r3
 800563a:	e001      	b.n	8005640 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800563c:	2302      	movs	r3, #2
 800563e:	e000      	b.n	8005642 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005652:	2340      	movs	r3, #64	; 0x40
 8005654:	2200      	movs	r2, #0
 8005656:	2100      	movs	r1, #0
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f003 fdb0 	bl	80091be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2240      	movs	r2, #64	; 0x40
 800566a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800566e:	2340      	movs	r3, #64	; 0x40
 8005670:	2200      	movs	r2, #0
 8005672:	2180      	movs	r1, #128	; 0x80
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f003 fda2 	bl	80091be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2240      	movs	r2, #64	; 0x40
 8005684:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6852      	ldr	r2, [r2, #4]
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	4611      	mov	r1, r2
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	4798      	blx	r3
  }

  return USBD_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	78fa      	ldrb	r2, [r7, #3]
 80056dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr

080056ea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2204      	movs	r2, #4
 8005702:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr

08005712 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005720:	2b04      	cmp	r3, #4
 8005722:	d105      	bne.n	8005730 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr

0800573c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800574a:	2b03      	cmp	r3, #3
 800574c:	d10b      	bne.n	8005766 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d005      	beq.n	8005796 <USBD_StdDevReq+0x26>
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d84f      	bhi.n	800582e <USBD_StdDevReq+0xbe>
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <USBD_StdDevReq+0x36>
 8005792:	2b20      	cmp	r3, #32
 8005794:	d14b      	bne.n	800582e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	4798      	blx	r3
      break;
 80057a4:	e048      	b.n	8005838 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	785b      	ldrb	r3, [r3, #1]
 80057aa:	2b09      	cmp	r3, #9
 80057ac:	d839      	bhi.n	8005822 <USBD_StdDevReq+0xb2>
 80057ae:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <USBD_StdDevReq+0x44>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	08005805 	.word	0x08005805
 80057b8:	08005819 	.word	0x08005819
 80057bc:	08005823 	.word	0x08005823
 80057c0:	0800580f 	.word	0x0800580f
 80057c4:	08005823 	.word	0x08005823
 80057c8:	080057e7 	.word	0x080057e7
 80057cc:	080057dd 	.word	0x080057dd
 80057d0:	08005823 	.word	0x08005823
 80057d4:	080057fb 	.word	0x080057fb
 80057d8:	080057f1 	.word	0x080057f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f9dc 	bl	8005b9c <USBD_GetDescriptor>
          break;
 80057e4:	e022      	b.n	800582c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fb3f 	bl	8005e6c <USBD_SetAddress>
          break;
 80057ee:	e01d      	b.n	800582c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fb7e 	bl	8005ef4 <USBD_SetConfig>
          break;
 80057f8:	e018      	b.n	800582c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80057fa:	6839      	ldr	r1, [r7, #0]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fc07 	bl	8006010 <USBD_GetConfig>
          break;
 8005802:	e013      	b.n	800582c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fc37 	bl	800607a <USBD_GetStatus>
          break;
 800580c:	e00e      	b.n	800582c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800580e:	6839      	ldr	r1, [r7, #0]
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fc65 	bl	80060e0 <USBD_SetFeature>
          break;
 8005816:	e009      	b.n	800582c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fc74 	bl	8006108 <USBD_ClrFeature>
          break;
 8005820:	e004      	b.n	800582c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fccc 	bl	80061c2 <USBD_CtlError>
          break;
 800582a:	bf00      	nop
      }
      break;
 800582c:	e004      	b.n	8005838 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fcc6 	bl	80061c2 <USBD_CtlError>
      break;
 8005836:	bf00      	nop
  }

  return ret;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop

08005844 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800585a:	2b40      	cmp	r3, #64	; 0x40
 800585c:	d005      	beq.n	800586a <USBD_StdItfReq+0x26>
 800585e:	2b40      	cmp	r3, #64	; 0x40
 8005860:	d82e      	bhi.n	80058c0 <USBD_StdItfReq+0x7c>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <USBD_StdItfReq+0x26>
 8005866:	2b20      	cmp	r3, #32
 8005868:	d12a      	bne.n	80058c0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005870:	3b01      	subs	r3, #1
 8005872:	2b02      	cmp	r3, #2
 8005874:	d81d      	bhi.n	80058b2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	889b      	ldrh	r3, [r3, #4]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	d813      	bhi.n	80058a8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	6839      	ldr	r1, [r7, #0]
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	4798      	blx	r3
 800588e:	4603      	mov	r3, r0
 8005890:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	88db      	ldrh	r3, [r3, #6]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d110      	bne.n	80058bc <USBD_StdItfReq+0x78>
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10d      	bne.n	80058bc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fd38 	bl	8006316 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80058a6:	e009      	b.n	80058bc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fc89 	bl	80061c2 <USBD_CtlError>
          break;
 80058b0:	e004      	b.n	80058bc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fc84 	bl	80061c2 <USBD_CtlError>
          break;
 80058ba:	e000      	b.n	80058be <USBD_StdItfReq+0x7a>
          break;
 80058bc:	bf00      	nop
      }
      break;
 80058be:	e004      	b.n	80058ca <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fc7d 	bl	80061c2 <USBD_CtlError>
      break;
 80058c8:	bf00      	nop
  }

  return USBD_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	889b      	ldrh	r3, [r3, #4]
 80058e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058f0:	2b40      	cmp	r3, #64	; 0x40
 80058f2:	d007      	beq.n	8005904 <USBD_StdEPReq+0x30>
 80058f4:	2b40      	cmp	r3, #64	; 0x40
 80058f6:	f200 8146 	bhi.w	8005b86 <USBD_StdEPReq+0x2b2>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <USBD_StdEPReq+0x40>
 80058fe:	2b20      	cmp	r3, #32
 8005900:	f040 8141 	bne.w	8005b86 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
      break;
 8005912:	e13d      	b.n	8005b90 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800591c:	2b20      	cmp	r3, #32
 800591e:	d10a      	bne.n	8005936 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	4798      	blx	r3
 800592e:	4603      	mov	r3, r0
 8005930:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	e12d      	b.n	8005b92 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	785b      	ldrb	r3, [r3, #1]
 800593a:	2b03      	cmp	r3, #3
 800593c:	d007      	beq.n	800594e <USBD_StdEPReq+0x7a>
 800593e:	2b03      	cmp	r3, #3
 8005940:	f300 811b 	bgt.w	8005b7a <USBD_StdEPReq+0x2a6>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d072      	beq.n	8005a2e <USBD_StdEPReq+0x15a>
 8005948:	2b01      	cmp	r3, #1
 800594a:	d03a      	beq.n	80059c2 <USBD_StdEPReq+0xee>
 800594c:	e115      	b.n	8005b7a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005954:	2b02      	cmp	r3, #2
 8005956:	d002      	beq.n	800595e <USBD_StdEPReq+0x8a>
 8005958:	2b03      	cmp	r3, #3
 800595a:	d015      	beq.n	8005988 <USBD_StdEPReq+0xb4>
 800595c:	e02b      	b.n	80059b6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800595e:	7bbb      	ldrb	r3, [r7, #14]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00c      	beq.n	800597e <USBD_StdEPReq+0xaa>
 8005964:	7bbb      	ldrb	r3, [r7, #14]
 8005966:	2b80      	cmp	r3, #128	; 0x80
 8005968:	d009      	beq.n	800597e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	4619      	mov	r1, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f003 fc6a 	bl	8009248 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005974:	2180      	movs	r1, #128	; 0x80
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f003 fc66 	bl	8009248 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800597c:	e020      	b.n	80059c0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fc1e 	bl	80061c2 <USBD_CtlError>
              break;
 8005986:	e01b      	b.n	80059c0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	885b      	ldrh	r3, [r3, #2]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10e      	bne.n	80059ae <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005990:	7bbb      	ldrb	r3, [r7, #14]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00b      	beq.n	80059ae <USBD_StdEPReq+0xda>
 8005996:	7bbb      	ldrb	r3, [r7, #14]
 8005998:	2b80      	cmp	r3, #128	; 0x80
 800599a:	d008      	beq.n	80059ae <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	88db      	ldrh	r3, [r3, #6]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d104      	bne.n	80059ae <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80059a4:	7bbb      	ldrb	r3, [r7, #14]
 80059a6:	4619      	mov	r1, r3
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f003 fc4d 	bl	8009248 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fcb1 	bl	8006316 <USBD_CtlSendStatus>

              break;
 80059b4:	e004      	b.n	80059c0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80059b6:	6839      	ldr	r1, [r7, #0]
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fc02 	bl	80061c2 <USBD_CtlError>
              break;
 80059be:	bf00      	nop
          }
          break;
 80059c0:	e0e0      	b.n	8005b84 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d002      	beq.n	80059d2 <USBD_StdEPReq+0xfe>
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d015      	beq.n	80059fc <USBD_StdEPReq+0x128>
 80059d0:	e026      	b.n	8005a20 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059d2:	7bbb      	ldrb	r3, [r7, #14]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00c      	beq.n	80059f2 <USBD_StdEPReq+0x11e>
 80059d8:	7bbb      	ldrb	r3, [r7, #14]
 80059da:	2b80      	cmp	r3, #128	; 0x80
 80059dc:	d009      	beq.n	80059f2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80059de:	7bbb      	ldrb	r3, [r7, #14]
 80059e0:	4619      	mov	r1, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f003 fc30 	bl	8009248 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80059e8:	2180      	movs	r1, #128	; 0x80
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f003 fc2c 	bl	8009248 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059f0:	e01c      	b.n	8005a2c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fbe4 	bl	80061c2 <USBD_CtlError>
              break;
 80059fa:	e017      	b.n	8005a2c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	885b      	ldrh	r3, [r3, #2]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d112      	bne.n	8005a2a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a04:	7bbb      	ldrb	r3, [r7, #14]
 8005a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d004      	beq.n	8005a18 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a0e:	7bbb      	ldrb	r3, [r7, #14]
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f003 fc37 	bl	8009286 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fc7c 	bl	8006316 <USBD_CtlSendStatus>
              }
              break;
 8005a1e:	e004      	b.n	8005a2a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fbcd 	bl	80061c2 <USBD_CtlError>
              break;
 8005a28:	e000      	b.n	8005a2c <USBD_StdEPReq+0x158>
              break;
 8005a2a:	bf00      	nop
          }
          break;
 8005a2c:	e0aa      	b.n	8005b84 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d002      	beq.n	8005a3e <USBD_StdEPReq+0x16a>
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d032      	beq.n	8005aa2 <USBD_StdEPReq+0x1ce>
 8005a3c:	e097      	b.n	8005b6e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a3e:	7bbb      	ldrb	r3, [r7, #14]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d007      	beq.n	8005a54 <USBD_StdEPReq+0x180>
 8005a44:	7bbb      	ldrb	r3, [r7, #14]
 8005a46:	2b80      	cmp	r3, #128	; 0x80
 8005a48:	d004      	beq.n	8005a54 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fbb8 	bl	80061c2 <USBD_CtlError>
                break;
 8005a52:	e091      	b.n	8005b78 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	da0b      	bge.n	8005a74 <USBD_StdEPReq+0x1a0>
 8005a5c:	7bbb      	ldrb	r3, [r7, #14]
 8005a5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a62:	4613      	mov	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	3310      	adds	r3, #16
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	4413      	add	r3, r2
 8005a70:	3304      	adds	r3, #4
 8005a72:	e00b      	b.n	8005a8c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a74:	7bbb      	ldrb	r3, [r7, #14]
 8005a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4413      	add	r3, r2
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2202      	movs	r2, #2
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fbfb 	bl	8006296 <USBD_CtlSendData>
              break;
 8005aa0:	e06a      	b.n	8005b78 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005aa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	da11      	bge.n	8005ace <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005aaa:	7bbb      	ldrb	r3, [r7, #14]
 8005aac:	f003 020f 	and.w	r2, r3, #15
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	3318      	adds	r3, #24
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d117      	bne.n	8005af4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fb7b 	bl	80061c2 <USBD_CtlError>
                  break;
 8005acc:	e054      	b.n	8005b78 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ace:	7bbb      	ldrb	r3, [r7, #14]
 8005ad0:	f003 020f 	and.w	r2, r3, #15
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d104      	bne.n	8005af4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fb68 	bl	80061c2 <USBD_CtlError>
                  break;
 8005af2:	e041      	b.n	8005b78 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005af4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	da0b      	bge.n	8005b14 <USBD_StdEPReq+0x240>
 8005afc:	7bbb      	ldrb	r3, [r7, #14]
 8005afe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	3310      	adds	r3, #16
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	4413      	add	r3, r2
 8005b10:	3304      	adds	r3, #4
 8005b12:	e00b      	b.n	8005b2c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b14:	7bbb      	ldrb	r3, [r7, #14]
 8005b16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4413      	add	r3, r2
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b2e:	7bbb      	ldrb	r3, [r7, #14]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <USBD_StdEPReq+0x266>
 8005b34:	7bbb      	ldrb	r3, [r7, #14]
 8005b36:	2b80      	cmp	r3, #128	; 0x80
 8005b38:	d103      	bne.n	8005b42 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e00e      	b.n	8005b60 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005b42:	7bbb      	ldrb	r3, [r7, #14]
 8005b44:	4619      	mov	r1, r3
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f003 fbbc 	bl	80092c4 <USBD_LL_IsStallEP>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2201      	movs	r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e002      	b.n	8005b60 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2202      	movs	r2, #2
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fb95 	bl	8006296 <USBD_CtlSendData>
              break;
 8005b6c:	e004      	b.n	8005b78 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8005b6e:	6839      	ldr	r1, [r7, #0]
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fb26 	bl	80061c2 <USBD_CtlError>
              break;
 8005b76:	bf00      	nop
          }
          break;
 8005b78:	e004      	b.n	8005b84 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fb20 	bl	80061c2 <USBD_CtlError>
          break;
 8005b82:	bf00      	nop
      }
      break;
 8005b84:	e004      	b.n	8005b90 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fb1a 	bl	80061c2 <USBD_CtlError>
      break;
 8005b8e:	bf00      	nop
  }

  return ret;
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	885b      	ldrh	r3, [r3, #2]
 8005bb6:	0a1b      	lsrs	r3, r3, #8
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	2b06      	cmp	r3, #6
 8005bbe:	f200 8128 	bhi.w	8005e12 <USBD_GetDescriptor+0x276>
 8005bc2:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <USBD_GetDescriptor+0x2c>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005be5 	.word	0x08005be5
 8005bcc:	08005bfd 	.word	0x08005bfd
 8005bd0:	08005c3d 	.word	0x08005c3d
 8005bd4:	08005e13 	.word	0x08005e13
 8005bd8:	08005e13 	.word	0x08005e13
 8005bdc:	08005db3 	.word	0x08005db3
 8005be0:	08005ddf 	.word	0x08005ddf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	7c12      	ldrb	r2, [r2, #16]
 8005bf0:	f107 0108 	add.w	r1, r7, #8
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	4798      	blx	r3
 8005bf8:	60f8      	str	r0, [r7, #12]
      break;
 8005bfa:	e112      	b.n	8005e22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	7c1b      	ldrb	r3, [r3, #16]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10d      	bne.n	8005c20 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0c:	f107 0208 	add.w	r2, r7, #8
 8005c10:	4610      	mov	r0, r2
 8005c12:	4798      	blx	r3
 8005c14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005c1e:	e100      	b.n	8005e22 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	f107 0208 	add.w	r2, r7, #8
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4798      	blx	r3
 8005c30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3301      	adds	r3, #1
 8005c36:	2202      	movs	r2, #2
 8005c38:	701a      	strb	r2, [r3, #0]
      break;
 8005c3a:	e0f2      	b.n	8005e22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	885b      	ldrh	r3, [r3, #2]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b05      	cmp	r3, #5
 8005c44:	f200 80ac 	bhi.w	8005da0 <USBD_GetDescriptor+0x204>
 8005c48:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <USBD_GetDescriptor+0xb4>)
 8005c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4e:	bf00      	nop
 8005c50:	08005c69 	.word	0x08005c69
 8005c54:	08005c9d 	.word	0x08005c9d
 8005c58:	08005cd1 	.word	0x08005cd1
 8005c5c:	08005d05 	.word	0x08005d05
 8005c60:	08005d39 	.word	0x08005d39
 8005c64:	08005d6d 	.word	0x08005d6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	7c12      	ldrb	r2, [r2, #16]
 8005c80:	f107 0108 	add.w	r1, r7, #8
 8005c84:	4610      	mov	r0, r2
 8005c86:	4798      	blx	r3
 8005c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c8a:	e091      	b.n	8005db0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c8c:	6839      	ldr	r1, [r7, #0]
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fa97 	bl	80061c2 <USBD_CtlError>
            err++;
 8005c94:	7afb      	ldrb	r3, [r7, #11]
 8005c96:	3301      	adds	r3, #1
 8005c98:	72fb      	strb	r3, [r7, #11]
          break;
 8005c9a:	e089      	b.n	8005db0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00b      	beq.n	8005cc0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	7c12      	ldrb	r2, [r2, #16]
 8005cb4:	f107 0108 	add.w	r1, r7, #8
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4798      	blx	r3
 8005cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cbe:	e077      	b.n	8005db0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fa7d 	bl	80061c2 <USBD_CtlError>
            err++;
 8005cc8:	7afb      	ldrb	r3, [r7, #11]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8005cce:	e06f      	b.n	8005db0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00b      	beq.n	8005cf4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	7c12      	ldrb	r2, [r2, #16]
 8005ce8:	f107 0108 	add.w	r1, r7, #8
 8005cec:	4610      	mov	r0, r2
 8005cee:	4798      	blx	r3
 8005cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cf2:	e05d      	b.n	8005db0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cf4:	6839      	ldr	r1, [r7, #0]
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fa63 	bl	80061c2 <USBD_CtlError>
            err++;
 8005cfc:	7afb      	ldrb	r3, [r7, #11]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	72fb      	strb	r3, [r7, #11]
          break;
 8005d02:	e055      	b.n	8005db0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00b      	beq.n	8005d28 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	7c12      	ldrb	r2, [r2, #16]
 8005d1c:	f107 0108 	add.w	r1, r7, #8
 8005d20:	4610      	mov	r0, r2
 8005d22:	4798      	blx	r3
 8005d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d26:	e043      	b.n	8005db0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fa49 	bl	80061c2 <USBD_CtlError>
            err++;
 8005d30:	7afb      	ldrb	r3, [r7, #11]
 8005d32:	3301      	adds	r3, #1
 8005d34:	72fb      	strb	r3, [r7, #11]
          break;
 8005d36:	e03b      	b.n	8005db0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00b      	beq.n	8005d5c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	7c12      	ldrb	r2, [r2, #16]
 8005d50:	f107 0108 	add.w	r1, r7, #8
 8005d54:	4610      	mov	r0, r2
 8005d56:	4798      	blx	r3
 8005d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d5a:	e029      	b.n	8005db0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa2f 	bl	80061c2 <USBD_CtlError>
            err++;
 8005d64:	7afb      	ldrb	r3, [r7, #11]
 8005d66:	3301      	adds	r3, #1
 8005d68:	72fb      	strb	r3, [r7, #11]
          break;
 8005d6a:	e021      	b.n	8005db0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00b      	beq.n	8005d90 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	7c12      	ldrb	r2, [r2, #16]
 8005d84:	f107 0108 	add.w	r1, r7, #8
 8005d88:	4610      	mov	r0, r2
 8005d8a:	4798      	blx	r3
 8005d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d8e:	e00f      	b.n	8005db0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fa15 	bl	80061c2 <USBD_CtlError>
            err++;
 8005d98:	7afb      	ldrb	r3, [r7, #11]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d9e:	e007      	b.n	8005db0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005da0:	6839      	ldr	r1, [r7, #0]
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fa0d 	bl	80061c2 <USBD_CtlError>
          err++;
 8005da8:	7afb      	ldrb	r3, [r7, #11]
 8005daa:	3301      	adds	r3, #1
 8005dac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005dae:	e038      	b.n	8005e22 <USBD_GetDescriptor+0x286>
 8005db0:	e037      	b.n	8005e22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	7c1b      	ldrb	r3, [r3, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	f107 0208 	add.w	r2, r7, #8
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	4798      	blx	r3
 8005dca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005dcc:	e029      	b.n	8005e22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005dce:	6839      	ldr	r1, [r7, #0]
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f9f6 	bl	80061c2 <USBD_CtlError>
        err++;
 8005dd6:	7afb      	ldrb	r3, [r7, #11]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	72fb      	strb	r3, [r7, #11]
      break;
 8005ddc:	e021      	b.n	8005e22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	7c1b      	ldrb	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10d      	bne.n	8005e02 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	f107 0208 	add.w	r2, r7, #8
 8005df2:	4610      	mov	r0, r2
 8005df4:	4798      	blx	r3
 8005df6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	2207      	movs	r2, #7
 8005dfe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e00:	e00f      	b.n	8005e22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e02:	6839      	ldr	r1, [r7, #0]
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f9dc 	bl	80061c2 <USBD_CtlError>
        err++;
 8005e0a:	7afb      	ldrb	r3, [r7, #11]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	72fb      	strb	r3, [r7, #11]
      break;
 8005e10:	e007      	b.n	8005e22 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f9d4 	bl	80061c2 <USBD_CtlError>
      err++;
 8005e1a:	7afb      	ldrb	r3, [r7, #11]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	72fb      	strb	r3, [r7, #11]
      break;
 8005e20:	bf00      	nop
  }

  if (err != 0U)
 8005e22:	7afb      	ldrb	r3, [r7, #11]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d11c      	bne.n	8005e62 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005e28:	893b      	ldrh	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d011      	beq.n	8005e52 <USBD_GetDescriptor+0x2b6>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	88db      	ldrh	r3, [r3, #6]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00d      	beq.n	8005e52 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	88da      	ldrh	r2, [r3, #6]
 8005e3a:	893b      	ldrh	r3, [r7, #8]
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	bf28      	it	cs
 8005e40:	4613      	movcs	r3, r2
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e46:	893b      	ldrh	r3, [r7, #8]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fa22 	bl	8006296 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	88db      	ldrh	r3, [r3, #6]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d104      	bne.n	8005e64 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fa5b 	bl	8006316 <USBD_CtlSendStatus>
 8005e60:	e000      	b.n	8005e64 <USBD_GetDescriptor+0x2c8>
    return;
 8005e62:	bf00      	nop
    }
  }
}
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop

08005e6c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	889b      	ldrh	r3, [r3, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d130      	bne.n	8005ee0 <USBD_SetAddress+0x74>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	88db      	ldrh	r3, [r3, #6]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d12c      	bne.n	8005ee0 <USBD_SetAddress+0x74>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	885b      	ldrh	r3, [r3, #2]
 8005e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e8c:	d828      	bhi.n	8005ee0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	885b      	ldrh	r3, [r3, #2]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d104      	bne.n	8005eae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f98b 	bl	80061c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eac:	e01d      	b.n	8005eea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	7bfa      	ldrb	r2, [r7, #15]
 8005eb2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f003 fa2e 	bl	800931c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fa28 	bl	8006316 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d004      	beq.n	8005ed6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed4:	e009      	b.n	8005eea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ede:	e004      	b.n	8005eea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f96d 	bl	80061c2 <USBD_CtlError>
  }
}
 8005ee8:	bf00      	nop
 8005eea:	bf00      	nop
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	885b      	ldrh	r3, [r3, #2]
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	4b41      	ldr	r3, [pc, #260]	; (800600c <USBD_SetConfig+0x118>)
 8005f06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f08:	4b40      	ldr	r3, [pc, #256]	; (800600c <USBD_SetConfig+0x118>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d904      	bls.n	8005f1a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f955 	bl	80061c2 <USBD_CtlError>
 8005f18:	e075      	b.n	8006006 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d002      	beq.n	8005f2a <USBD_SetConfig+0x36>
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d023      	beq.n	8005f70 <USBD_SetConfig+0x7c>
 8005f28:	e062      	b.n	8005ff0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005f2a:	4b38      	ldr	r3, [pc, #224]	; (800600c <USBD_SetConfig+0x118>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d01a      	beq.n	8005f68 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005f32:	4b36      	ldr	r3, [pc, #216]	; (800600c <USBD_SetConfig+0x118>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2203      	movs	r2, #3
 8005f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005f44:	4b31      	ldr	r3, [pc, #196]	; (800600c <USBD_SetConfig+0x118>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff f9e8 	bl	8005320 <USBD_SetClassConfig>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d104      	bne.n	8005f60 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f932 	bl	80061c2 <USBD_CtlError>
            return;
 8005f5e:	e052      	b.n	8006006 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f9d8 	bl	8006316 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005f66:	e04e      	b.n	8006006 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f9d4 	bl	8006316 <USBD_CtlSendStatus>
        break;
 8005f6e:	e04a      	b.n	8006006 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005f70:	4b26      	ldr	r3, [pc, #152]	; (800600c <USBD_SetConfig+0x118>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d112      	bne.n	8005f9e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005f80:	4b22      	ldr	r3, [pc, #136]	; (800600c <USBD_SetConfig+0x118>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005f8a:	4b20      	ldr	r3, [pc, #128]	; (800600c <USBD_SetConfig+0x118>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff f9e4 	bl	800535e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f9bd 	bl	8006316 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005f9c:	e033      	b.n	8006006 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005f9e:	4b1b      	ldr	r3, [pc, #108]	; (800600c <USBD_SetConfig+0x118>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d01d      	beq.n	8005fe8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff f9d2 	bl	800535e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005fba:	4b14      	ldr	r3, [pc, #80]	; (800600c <USBD_SetConfig+0x118>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005fc4:	4b11      	ldr	r3, [pc, #68]	; (800600c <USBD_SetConfig+0x118>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff f9a8 	bl	8005320 <USBD_SetClassConfig>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d104      	bne.n	8005fe0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f8f2 	bl	80061c2 <USBD_CtlError>
            return;
 8005fde:	e012      	b.n	8006006 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f998 	bl	8006316 <USBD_CtlSendStatus>
        break;
 8005fe6:	e00e      	b.n	8006006 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f994 	bl	8006316 <USBD_CtlSendStatus>
        break;
 8005fee:	e00a      	b.n	8006006 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f8e5 	bl	80061c2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005ff8:	4b04      	ldr	r3, [pc, #16]	; (800600c <USBD_SetConfig+0x118>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff f9ad 	bl	800535e <USBD_ClrClassConfig>
        break;
 8006004:	bf00      	nop
    }
  }
}
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	20000180 	.word	0x20000180

08006010 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	88db      	ldrh	r3, [r3, #6]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d004      	beq.n	800602c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f8cc 	bl	80061c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800602a:	e022      	b.n	8006072 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006032:	2b02      	cmp	r3, #2
 8006034:	dc02      	bgt.n	800603c <USBD_GetConfig+0x2c>
 8006036:	2b00      	cmp	r3, #0
 8006038:	dc03      	bgt.n	8006042 <USBD_GetConfig+0x32>
 800603a:	e015      	b.n	8006068 <USBD_GetConfig+0x58>
 800603c:	2b03      	cmp	r3, #3
 800603e:	d00b      	beq.n	8006058 <USBD_GetConfig+0x48>
 8006040:	e012      	b.n	8006068 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3308      	adds	r3, #8
 800604c:	2201      	movs	r2, #1
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f920 	bl	8006296 <USBD_CtlSendData>
        break;
 8006056:	e00c      	b.n	8006072 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3304      	adds	r3, #4
 800605c:	2201      	movs	r2, #1
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f918 	bl	8006296 <USBD_CtlSendData>
        break;
 8006066:	e004      	b.n	8006072 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f8a9 	bl	80061c2 <USBD_CtlError>
        break;
 8006070:	bf00      	nop
}
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800608a:	3b01      	subs	r3, #1
 800608c:	2b02      	cmp	r3, #2
 800608e:	d81e      	bhi.n	80060ce <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	88db      	ldrh	r3, [r3, #6]
 8006094:	2b02      	cmp	r3, #2
 8006096:	d004      	beq.n	80060a2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f891 	bl	80061c2 <USBD_CtlError>
        break;
 80060a0:	e01a      	b.n	80060d8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f043 0202 	orr.w	r2, r3, #2
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	330c      	adds	r3, #12
 80060c2:	2202      	movs	r2, #2
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f8e5 	bl	8006296 <USBD_CtlSendData>
      break;
 80060cc:	e004      	b.n	80060d8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f876 	bl	80061c2 <USBD_CtlError>
      break;
 80060d6:	bf00      	nop
  }
}
 80060d8:	bf00      	nop
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	885b      	ldrh	r3, [r3, #2]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d106      	bne.n	8006100 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f90b 	bl	8006316 <USBD_CtlSendStatus>
  }
}
 8006100:	bf00      	nop
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006118:	3b01      	subs	r3, #1
 800611a:	2b02      	cmp	r3, #2
 800611c:	d80b      	bhi.n	8006136 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	885b      	ldrh	r3, [r3, #2]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d10c      	bne.n	8006140 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f8f1 	bl	8006316 <USBD_CtlSendStatus>
      }
      break;
 8006134:	e004      	b.n	8006140 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f842 	bl	80061c2 <USBD_CtlError>
      break;
 800613e:	e000      	b.n	8006142 <USBD_ClrFeature+0x3a>
      break;
 8006140:	bf00      	nop
  }
}
 8006142:	bf00      	nop
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781a      	ldrb	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	785a      	ldrb	r2, [r3, #1]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	3302      	adds	r3, #2
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	b29a      	uxth	r2, r3
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	3303      	adds	r3, #3
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	021b      	lsls	r3, r3, #8
 8006176:	b29b      	uxth	r3, r3
 8006178:	4413      	add	r3, r2
 800617a:	b29a      	uxth	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	3304      	adds	r3, #4
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	b29a      	uxth	r2, r3
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	3305      	adds	r3, #5
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	021b      	lsls	r3, r3, #8
 8006192:	b29b      	uxth	r3, r3
 8006194:	4413      	add	r3, r2
 8006196:	b29a      	uxth	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	3306      	adds	r3, #6
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	3307      	adds	r3, #7
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	4413      	add	r3, r2
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	80da      	strh	r2, [r3, #6]

}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr

080061c2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80061cc:	2180      	movs	r1, #128	; 0x80
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f003 f83a 	bl	8009248 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80061d4:	2100      	movs	r1, #0
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f003 f836 	bl	8009248 <USBD_LL_StallEP>
}
 80061dc:	bf00      	nop
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d032      	beq.n	8006260 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 f834 	bl	8006268 <USBD_GetLen>
 8006200:	4603      	mov	r3, r0
 8006202:	3301      	adds	r3, #1
 8006204:	b29b      	uxth	r3, r3
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800620e:	7dfb      	ldrb	r3, [r7, #23]
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	75fa      	strb	r2, [r7, #23]
 8006214:	461a      	mov	r2, r3
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	4413      	add	r3, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	7812      	ldrb	r2, [r2, #0]
 800621e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	75fa      	strb	r2, [r7, #23]
 8006226:	461a      	mov	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4413      	add	r3, r2
 800622c:	2203      	movs	r2, #3
 800622e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006230:	e012      	b.n	8006258 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	60fa      	str	r2, [r7, #12]
 8006238:	7dfa      	ldrb	r2, [r7, #23]
 800623a:	1c51      	adds	r1, r2, #1
 800623c:	75f9      	strb	r1, [r7, #23]
 800623e:	4611      	mov	r1, r2
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	440a      	add	r2, r1
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006248:	7dfb      	ldrb	r3, [r7, #23]
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	75fa      	strb	r2, [r7, #23]
 800624e:	461a      	mov	r2, r3
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	4413      	add	r3, r2
 8006254:	2200      	movs	r2, #0
 8006256:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e8      	bne.n	8006232 <USBD_GetString+0x4e>
    }
  }
}
 8006260:	bf00      	nop
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006274:	e005      	b.n	8006282 <USBD_GetLen+0x1a>
  {
    len++;
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	3301      	adds	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3301      	adds	r3, #1
 8006280:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f5      	bne.n	8006276 <USBD_GetLen+0xe>
  }

  return len;
 800628a:	7bfb      	ldrb	r3, [r7, #15]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr

08006296 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	4613      	mov	r3, r2
 80062a2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80062ac:	88fa      	ldrh	r2, [r7, #6]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80062b2:	88fa      	ldrh	r2, [r7, #6]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062b8:	88fb      	ldrh	r3, [r7, #6]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	2100      	movs	r1, #0
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f003 f84b 	bl	800935a <USBD_LL_Transmit>

  return USBD_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	4613      	mov	r3, r2
 80062da:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	2100      	movs	r1, #0
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f003 f839 	bl	800935a <USBD_LL_Transmit>

  return USBD_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	4613      	mov	r3, r2
 80062fe:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006300:	88fb      	ldrh	r3, [r7, #6]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	2100      	movs	r1, #0
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f003 f84a 	bl	80093a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2204      	movs	r2, #4
 8006322:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006326:	2300      	movs	r3, #0
 8006328:	2200      	movs	r2, #0
 800632a:	2100      	movs	r1, #0
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f003 f814 	bl	800935a <USBD_LL_Transmit>

  return USBD_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2205      	movs	r2, #5
 8006348:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800634c:	2300      	movs	r3, #0
 800634e:	2200      	movs	r2, #0
 8006350:	2100      	movs	r1, #0
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f003 f824 	bl	80093a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800636a:	f3ef 8305 	mrs	r3, IPSR
 800636e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006370:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10f      	bne.n	8006396 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006376:	f3ef 8310 	mrs	r3, PRIMASK
 800637a:	607b      	str	r3, [r7, #4]
  return(result);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <osKernelInitialize+0x32>
 8006382:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <osKernelInitialize+0x60>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b02      	cmp	r3, #2
 8006388:	d109      	bne.n	800639e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800638a:	f3ef 8311 	mrs	r3, BASEPRI
 800638e:	603b      	str	r3, [r7, #0]
  return(result);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006396:	f06f 0305 	mvn.w	r3, #5
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	e00c      	b.n	80063b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800639e:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <osKernelInitialize+0x60>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d105      	bne.n	80063b2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80063a6:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <osKernelInitialize+0x60>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	e002      	b.n	80063b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80063b2:	f04f 33ff 	mov.w	r3, #4294967295
 80063b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80063b8:	68fb      	ldr	r3, [r7, #12]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr
 80063c4:	20000184 	.word	0x20000184

080063c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ce:	f3ef 8305 	mrs	r3, IPSR
 80063d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80063d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10f      	bne.n	80063fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063da:	f3ef 8310 	mrs	r3, PRIMASK
 80063de:	607b      	str	r3, [r7, #4]
  return(result);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d109      	bne.n	80063fa <osKernelStart+0x32>
 80063e6:	4b11      	ldr	r3, [pc, #68]	; (800642c <osKernelStart+0x64>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d109      	bne.n	8006402 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063ee:	f3ef 8311 	mrs	r3, BASEPRI
 80063f2:	603b      	str	r3, [r7, #0]
  return(result);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <osKernelStart+0x3a>
    stat = osErrorISR;
 80063fa:	f06f 0305 	mvn.w	r3, #5
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	e00e      	b.n	8006420 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006402:	4b0a      	ldr	r3, [pc, #40]	; (800642c <osKernelStart+0x64>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d107      	bne.n	800641a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800640a:	4b08      	ldr	r3, [pc, #32]	; (800642c <osKernelStart+0x64>)
 800640c:	2202      	movs	r2, #2
 800640e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006410:	f001 f878 	bl	8007504 <vTaskStartScheduler>
      stat = osOK;
 8006414:	2300      	movs	r3, #0
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	e002      	b.n	8006420 <osKernelStart+0x58>
    } else {
      stat = osError;
 800641a:	f04f 33ff 	mov.w	r3, #4294967295
 800641e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006420:	68fb      	ldr	r3, [r7, #12]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20000184 	.word	0x20000184

08006430 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006430:	b580      	push	{r7, lr}
 8006432:	b092      	sub	sp, #72	; 0x48
 8006434:	af04      	add	r7, sp, #16
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800643c:	2300      	movs	r3, #0
 800643e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006440:	f3ef 8305 	mrs	r3, IPSR
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006448:	2b00      	cmp	r3, #0
 800644a:	f040 8094 	bne.w	8006576 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800644e:	f3ef 8310 	mrs	r3, PRIMASK
 8006452:	623b      	str	r3, [r7, #32]
  return(result);
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	2b00      	cmp	r3, #0
 8006458:	f040 808d 	bne.w	8006576 <osThreadNew+0x146>
 800645c:	4b48      	ldr	r3, [pc, #288]	; (8006580 <osThreadNew+0x150>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b02      	cmp	r3, #2
 8006462:	d106      	bne.n	8006472 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006464:	f3ef 8311 	mrs	r3, BASEPRI
 8006468:	61fb      	str	r3, [r7, #28]
  return(result);
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f040 8082 	bne.w	8006576 <osThreadNew+0x146>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d07e      	beq.n	8006576 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006478:	2380      	movs	r3, #128	; 0x80
 800647a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800647c:	2318      	movs	r3, #24
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006480:	2300      	movs	r3, #0
 8006482:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006484:	f107 031b 	add.w	r3, r7, #27
 8006488:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800648a:	f04f 33ff 	mov.w	r3, #4294967295
 800648e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d045      	beq.n	8006522 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <osThreadNew+0x74>
        name = attr->name;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d008      	beq.n	80064ca <osThreadNew+0x9a>
 80064b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ba:	2b38      	cmp	r3, #56	; 0x38
 80064bc:	d805      	bhi.n	80064ca <osThreadNew+0x9a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <osThreadNew+0x9e>
        return (NULL);
 80064ca:	2300      	movs	r3, #0
 80064cc:	e054      	b.n	8006578 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	089b      	lsrs	r3, r3, #2
 80064dc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00e      	beq.n	8006504 <osThreadNew+0xd4>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	2b5b      	cmp	r3, #91	; 0x5b
 80064ec:	d90a      	bls.n	8006504 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d006      	beq.n	8006504 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <osThreadNew+0xd4>
        mem = 1;
 80064fe:	2301      	movs	r3, #1
 8006500:	62bb      	str	r3, [r7, #40]	; 0x28
 8006502:	e010      	b.n	8006526 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10c      	bne.n	8006526 <osThreadNew+0xf6>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d108      	bne.n	8006526 <osThreadNew+0xf6>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d104      	bne.n	8006526 <osThreadNew+0xf6>
          mem = 0;
 800651c:	2300      	movs	r3, #0
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006520:	e001      	b.n	8006526 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006522:	2300      	movs	r3, #0
 8006524:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	2b01      	cmp	r3, #1
 800652a:	d110      	bne.n	800654e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006534:	9202      	str	r2, [sp, #8]
 8006536:	9301      	str	r3, [sp, #4]
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006540:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 fe12 	bl	800716c <xTaskCreateStatic>
 8006548:	4603      	mov	r3, r0
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e013      	b.n	8006576 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	2b00      	cmp	r3, #0
 8006552:	d110      	bne.n	8006576 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	b29a      	uxth	r2, r3
 8006558:	f107 0314 	add.w	r3, r7, #20
 800655c:	9301      	str	r3, [sp, #4]
 800655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fe5c 	bl	8007224 <xTaskCreate>
 800656c:	4603      	mov	r3, r0
 800656e:	2b01      	cmp	r3, #1
 8006570:	d001      	beq.n	8006576 <osThreadNew+0x146>
          hTask = NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006576:	697b      	ldr	r3, [r7, #20]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3738      	adds	r7, #56	; 0x38
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20000184 	.word	0x20000184

08006584 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800658c:	f3ef 8305 	mrs	r3, IPSR
 8006590:	613b      	str	r3, [r7, #16]
  return(result);
 8006592:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10f      	bne.n	80065b8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006598:	f3ef 8310 	mrs	r3, PRIMASK
 800659c:	60fb      	str	r3, [r7, #12]
  return(result);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d109      	bne.n	80065b8 <osDelay+0x34>
 80065a4:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <osDelay+0x58>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d109      	bne.n	80065c0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065ac:	f3ef 8311 	mrs	r3, BASEPRI
 80065b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <osDelay+0x3c>
    stat = osErrorISR;
 80065b8:	f06f 0305 	mvn.w	r3, #5
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	e007      	b.n	80065d0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 ff66 	bl	800749c <vTaskDelay>
    }
  }

  return (stat);
 80065d0:	697b      	ldr	r3, [r7, #20]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000184 	.word	0x20000184

080065e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4a06      	ldr	r2, [pc, #24]	; (8006608 <vApplicationGetIdleTaskMemory+0x28>)
 80065f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	4a05      	ldr	r2, [pc, #20]	; (800660c <vApplicationGetIdleTaskMemory+0x2c>)
 80065f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2280      	movs	r2, #128	; 0x80
 80065fc:	601a      	str	r2, [r3, #0]
}
 80065fe:	bf00      	nop
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr
 8006608:	20000188 	.word	0x20000188
 800660c:	200001e4 	.word	0x200001e4

08006610 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4a07      	ldr	r2, [pc, #28]	; (800663c <vApplicationGetTimerTaskMemory+0x2c>)
 8006620:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	4a06      	ldr	r2, [pc, #24]	; (8006640 <vApplicationGetTimerTaskMemory+0x30>)
 8006626:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800662e:	601a      	str	r2, [r3, #0]
}
 8006630:	bf00      	nop
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	bc80      	pop	{r7}
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	200003e4 	.word	0x200003e4
 8006640:	20000440 	.word	0x20000440

08006644 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f103 0208 	add.w	r2, r3, #8
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f04f 32ff 	mov.w	r2, #4294967295
 800665c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f103 0208 	add.w	r2, r3, #8
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f103 0208 	add.w	r2, r3, #8
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	bc80      	pop	{r7}
 8006680:	4770      	bx	lr

08006682 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr

0800669a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	601a      	str	r2, [r3, #0]
}
 80066d6:	bf00      	nop
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	bc80      	pop	{r7}
 80066de:	4770      	bx	lr

080066e0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f6:	d103      	bne.n	8006700 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	e00c      	b.n	800671a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3308      	adds	r3, #8
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	e002      	b.n	800670e <vListInsert+0x2e>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	429a      	cmp	r2, r3
 8006718:	d2f6      	bcs.n	8006708 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	601a      	str	r2, [r3, #0]
}
 8006746:	bf00      	nop
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6892      	ldr	r2, [r2, #8]
 8006766:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6852      	ldr	r2, [r2, #4]
 8006770:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	429a      	cmp	r2, r3
 800677a:	d103      	bne.n	8006784 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	1e5a      	subs	r2, r3, #1
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr
	...

080067a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067ca:	bf00      	nop
 80067cc:	e7fe      	b.n	80067cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80067ce:	f001 ffc5 	bl	800875c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067da:	68f9      	ldr	r1, [r7, #12]
 80067dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067de:	fb01 f303 	mul.w	r3, r1, r3
 80067e2:	441a      	add	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fe:	3b01      	subs	r3, #1
 8006800:	68f9      	ldr	r1, [r7, #12]
 8006802:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	441a      	add	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	22ff      	movs	r2, #255	; 0xff
 8006812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	22ff      	movs	r2, #255	; 0xff
 800681a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d114      	bne.n	800684e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01a      	beq.n	8006862 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3310      	adds	r3, #16
 8006830:	4618      	mov	r0, r3
 8006832:	f001 f8f1 	bl	8007a18 <xTaskRemoveFromEventList>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d012      	beq.n	8006862 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800683c:	4b0c      	ldr	r3, [pc, #48]	; (8006870 <xQueueGenericReset+0xcc>)
 800683e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	e009      	b.n	8006862 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3310      	adds	r3, #16
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff fef6 	bl	8006644 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3324      	adds	r3, #36	; 0x24
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff fef1 	bl	8006644 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006862:	f001 ffab 	bl	80087bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006866:	2301      	movs	r3, #1
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	e000ed04 	.word	0xe000ed04

08006874 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08e      	sub	sp, #56	; 0x38
 8006878:	af02      	add	r7, sp, #8
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10a      	bne.n	800689e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800689a:	bf00      	nop
 800689c:	e7fe      	b.n	800689c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10a      	bne.n	80068ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068b6:	bf00      	nop
 80068b8:	e7fe      	b.n	80068b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <xQueueGenericCreateStatic+0x52>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <xQueueGenericCreateStatic+0x56>
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <xQueueGenericCreateStatic+0x58>
 80068ca:	2300      	movs	r3, #0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	623b      	str	r3, [r7, #32]
}
 80068e2:	bf00      	nop
 80068e4:	e7fe      	b.n	80068e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d102      	bne.n	80068f2 <xQueueGenericCreateStatic+0x7e>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <xQueueGenericCreateStatic+0x82>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e000      	b.n	80068f8 <xQueueGenericCreateStatic+0x84>
 80068f6:	2300      	movs	r3, #0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	61fb      	str	r3, [r7, #28]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006912:	2350      	movs	r3, #80	; 0x50
 8006914:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b50      	cmp	r3, #80	; 0x50
 800691a:	d00a      	beq.n	8006932 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	61bb      	str	r3, [r7, #24]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00d      	beq.n	8006958 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006944:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	4613      	mov	r3, r2
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	68b9      	ldr	r1, [r7, #8]
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 f805 	bl	8006962 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800695a:	4618      	mov	r0, r3
 800695c:	3730      	adds	r7, #48	; 0x30
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	607a      	str	r2, [r7, #4]
 800696e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d103      	bne.n	800697e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	69ba      	ldr	r2, [r7, #24]
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	e002      	b.n	8006984 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006990:	2101      	movs	r1, #1
 8006992:	69b8      	ldr	r0, [r7, #24]
 8006994:	f7ff ff06 	bl	80067a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	78fa      	ldrb	r2, [r7, #3]
 800699c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069a0:	bf00      	nop
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08e      	sub	sp, #56	; 0x38
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069b6:	2300      	movs	r3, #0
 80069b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <xQueueGenericSend+0x32>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069d6:	bf00      	nop
 80069d8:	e7fe      	b.n	80069d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d103      	bne.n	80069e8 <xQueueGenericSend+0x40>
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <xQueueGenericSend+0x44>
 80069e8:	2301      	movs	r3, #1
 80069ea:	e000      	b.n	80069ee <xQueueGenericSend+0x46>
 80069ec:	2300      	movs	r3, #0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <xQueueGenericSend+0x60>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a04:	bf00      	nop
 8006a06:	e7fe      	b.n	8006a06 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d103      	bne.n	8006a16 <xQueueGenericSend+0x6e>
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d101      	bne.n	8006a1a <xQueueGenericSend+0x72>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <xQueueGenericSend+0x74>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <xQueueGenericSend+0x8e>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	623b      	str	r3, [r7, #32]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a36:	f001 f9b1 	bl	8007d9c <xTaskGetSchedulerState>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d102      	bne.n	8006a46 <xQueueGenericSend+0x9e>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <xQueueGenericSend+0xa2>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <xQueueGenericSend+0xa4>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10a      	bne.n	8006a66 <xQueueGenericSend+0xbe>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	61fb      	str	r3, [r7, #28]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a66:	f001 fe79 	bl	800875c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d302      	bcc.n	8006a7c <xQueueGenericSend+0xd4>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d129      	bne.n	8006ad0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	68b9      	ldr	r1, [r7, #8]
 8006a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a82:	f000 fa07 	bl	8006e94 <prvCopyDataToQueue>
 8006a86:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d010      	beq.n	8006ab2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	3324      	adds	r3, #36	; 0x24
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 ffbf 	bl	8007a18 <xTaskRemoveFromEventList>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d013      	beq.n	8006ac8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006aa0:	4b3f      	ldr	r3, [pc, #252]	; (8006ba0 <xQueueGenericSend+0x1f8>)
 8006aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	e00a      	b.n	8006ac8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ab8:	4b39      	ldr	r3, [pc, #228]	; (8006ba0 <xQueueGenericSend+0x1f8>)
 8006aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ac8:	f001 fe78 	bl	80087bc <vPortExitCritical>
				return pdPASS;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e063      	b.n	8006b98 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d103      	bne.n	8006ade <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ad6:	f001 fe71 	bl	80087bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	e05c      	b.n	8006b98 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d106      	bne.n	8006af2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ae4:	f107 0314 	add.w	r3, r7, #20
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 fff9 	bl	8007ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aee:	2301      	movs	r3, #1
 8006af0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006af2:	f001 fe63 	bl	80087bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006af6:	f000 fd6b 	bl	80075d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006afa:	f001 fe2f 	bl	800875c <vPortEnterCritical>
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b04:	b25b      	sxtb	r3, r3
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d103      	bne.n	8006b14 <xQueueGenericSend+0x16c>
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b1a:	b25b      	sxtb	r3, r3
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b20:	d103      	bne.n	8006b2a <xQueueGenericSend+0x182>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b2a:	f001 fe47 	bl	80087bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b2e:	1d3a      	adds	r2, r7, #4
 8006b30:	f107 0314 	add.w	r3, r7, #20
 8006b34:	4611      	mov	r1, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 ffe8 	bl	8007b0c <xTaskCheckForTimeOut>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d124      	bne.n	8006b8c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b44:	f000 fa9e 	bl	8007084 <prvIsQueueFull>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d018      	beq.n	8006b80 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	3310      	adds	r3, #16
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	4611      	mov	r1, r2
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 ff0e 	bl	8007978 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b5e:	f000 fa29 	bl	8006fb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b62:	f000 fd43 	bl	80075ec <xTaskResumeAll>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f47f af7c 	bne.w	8006a66 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006b6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ba0 <xQueueGenericSend+0x1f8>)
 8006b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	e772      	b.n	8006a66 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b82:	f000 fa17 	bl	8006fb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b86:	f000 fd31 	bl	80075ec <xTaskResumeAll>
 8006b8a:	e76c      	b.n	8006a66 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b8e:	f000 fa11 	bl	8006fb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b92:	f000 fd2b 	bl	80075ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b96:	2300      	movs	r3, #0
		}
	}
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3738      	adds	r7, #56	; 0x38
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	e000ed04 	.word	0xe000ed04

08006ba4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08e      	sub	sp, #56	; 0x38
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10a      	bne.n	8006bd2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d103      	bne.n	8006be0 <xQueueGenericSendFromISR+0x3c>
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <xQueueGenericSendFromISR+0x40>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <xQueueGenericSendFromISR+0x42>
 8006be4:	2300      	movs	r3, #0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10a      	bne.n	8006c00 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	623b      	str	r3, [r7, #32]
}
 8006bfc:	bf00      	nop
 8006bfe:	e7fe      	b.n	8006bfe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d103      	bne.n	8006c0e <xQueueGenericSendFromISR+0x6a>
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d101      	bne.n	8006c12 <xQueueGenericSendFromISR+0x6e>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e000      	b.n	8006c14 <xQueueGenericSendFromISR+0x70>
 8006c12:	2300      	movs	r3, #0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10a      	bne.n	8006c2e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	61fb      	str	r3, [r7, #28]
}
 8006c2a:	bf00      	nop
 8006c2c:	e7fe      	b.n	8006c2c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c2e:	f001 fe57 	bl	80088e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c32:	f3ef 8211 	mrs	r2, BASEPRI
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	61ba      	str	r2, [r7, #24]
 8006c48:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c4a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d302      	bcc.n	8006c60 <xQueueGenericSendFromISR+0xbc>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d12c      	bne.n	8006cba <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c70:	f000 f910 	bl	8006e94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c74:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d112      	bne.n	8006ca4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d016      	beq.n	8006cb4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	3324      	adds	r3, #36	; 0x24
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fec4 	bl	8007a18 <xTaskRemoveFromEventList>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00e      	beq.n	8006cb4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00b      	beq.n	8006cb4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	e007      	b.n	8006cb4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ca4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ca8:	3301      	adds	r3, #1
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	b25a      	sxtb	r2, r3
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006cb8:	e001      	b.n	8006cbe <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006cc8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3738      	adds	r7, #56	; 0x38
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08c      	sub	sp, #48	; 0x30
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10a      	bne.n	8006d04 <xQueueReceive+0x30>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	623b      	str	r3, [r7, #32]
}
 8006d00:	bf00      	nop
 8006d02:	e7fe      	b.n	8006d02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d103      	bne.n	8006d12 <xQueueReceive+0x3e>
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <xQueueReceive+0x42>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e000      	b.n	8006d18 <xQueueReceive+0x44>
 8006d16:	2300      	movs	r3, #0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <xQueueReceive+0x5e>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	61fb      	str	r3, [r7, #28]
}
 8006d2e:	bf00      	nop
 8006d30:	e7fe      	b.n	8006d30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d32:	f001 f833 	bl	8007d9c <xTaskGetSchedulerState>
 8006d36:	4603      	mov	r3, r0
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d102      	bne.n	8006d42 <xQueueReceive+0x6e>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <xQueueReceive+0x72>
 8006d42:	2301      	movs	r3, #1
 8006d44:	e000      	b.n	8006d48 <xQueueReceive+0x74>
 8006d46:	2300      	movs	r3, #0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10a      	bne.n	8006d62 <xQueueReceive+0x8e>
	__asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	61bb      	str	r3, [r7, #24]
}
 8006d5e:	bf00      	nop
 8006d60:	e7fe      	b.n	8006d60 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d62:	f001 fcfb 	bl	800875c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d01f      	beq.n	8006db2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d72:	68b9      	ldr	r1, [r7, #8]
 8006d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d76:	f000 f8f7 	bl	8006f68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	1e5a      	subs	r2, r3, #1
 8006d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00f      	beq.n	8006daa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	3310      	adds	r3, #16
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fe42 	bl	8007a18 <xTaskRemoveFromEventList>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d007      	beq.n	8006daa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d9a:	4b3d      	ldr	r3, [pc, #244]	; (8006e90 <xQueueReceive+0x1bc>)
 8006d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006daa:	f001 fd07 	bl	80087bc <vPortExitCritical>
				return pdPASS;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e069      	b.n	8006e86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d103      	bne.n	8006dc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006db8:	f001 fd00 	bl	80087bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e062      	b.n	8006e86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d106      	bne.n	8006dd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dc6:	f107 0310 	add.w	r3, r7, #16
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fe88 	bl	8007ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dd4:	f001 fcf2 	bl	80087bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dd8:	f000 fbfa 	bl	80075d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ddc:	f001 fcbe 	bl	800875c <vPortEnterCritical>
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006de6:	b25b      	sxtb	r3, r3
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dec:	d103      	bne.n	8006df6 <xQueueReceive+0x122>
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dfc:	b25b      	sxtb	r3, r3
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e02:	d103      	bne.n	8006e0c <xQueueReceive+0x138>
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e0c:	f001 fcd6 	bl	80087bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e10:	1d3a      	adds	r2, r7, #4
 8006e12:	f107 0310 	add.w	r3, r7, #16
 8006e16:	4611      	mov	r1, r2
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fe77 	bl	8007b0c <xTaskCheckForTimeOut>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d123      	bne.n	8006e6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e26:	f000 f917 	bl	8007058 <prvIsQueueEmpty>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d017      	beq.n	8006e60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	3324      	adds	r3, #36	; 0x24
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	4611      	mov	r1, r2
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 fd9d 	bl	8007978 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e40:	f000 f8b8 	bl	8006fb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e44:	f000 fbd2 	bl	80075ec <xTaskResumeAll>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d189      	bne.n	8006d62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e4e:	4b10      	ldr	r3, [pc, #64]	; (8006e90 <xQueueReceive+0x1bc>)
 8006e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	e780      	b.n	8006d62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e62:	f000 f8a7 	bl	8006fb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e66:	f000 fbc1 	bl	80075ec <xTaskResumeAll>
 8006e6a:	e77a      	b.n	8006d62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e6e:	f000 f8a1 	bl	8006fb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e72:	f000 fbbb 	bl	80075ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e78:	f000 f8ee 	bl	8007058 <prvIsQueueEmpty>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f43f af6f 	beq.w	8006d62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3730      	adds	r7, #48	; 0x30
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	e000ed04 	.word	0xe000ed04

08006e94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d10d      	bne.n	8006ece <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d14d      	bne.n	8006f56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 ff8a 	bl	8007dd8 <xTaskPriorityDisinherit>
 8006ec4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	605a      	str	r2, [r3, #4]
 8006ecc:	e043      	b.n	8006f56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d119      	bne.n	8006f08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6898      	ldr	r0, [r3, #8]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006edc:	461a      	mov	r2, r3
 8006ede:	68b9      	ldr	r1, [r7, #8]
 8006ee0:	f002 faf2 	bl	80094c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	441a      	add	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d32b      	bcc.n	8006f56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	609a      	str	r2, [r3, #8]
 8006f06:	e026      	b.n	8006f56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	68d8      	ldr	r0, [r3, #12]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	461a      	mov	r2, r3
 8006f12:	68b9      	ldr	r1, [r7, #8]
 8006f14:	f002 fad8 	bl	80094c8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f20:	425b      	negs	r3, r3
 8006f22:	441a      	add	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d207      	bcs.n	8006f44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	425b      	negs	r3, r3
 8006f3e:	441a      	add	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d105      	bne.n	8006f56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f5e:	697b      	ldr	r3, [r7, #20]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3718      	adds	r7, #24
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d018      	beq.n	8006fac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	441a      	add	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d303      	bcc.n	8006f9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68d9      	ldr	r1, [r3, #12]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	6838      	ldr	r0, [r7, #0]
 8006fa8:	f002 fa8e 	bl	80094c8 <memcpy>
	}
}
 8006fac:	bf00      	nop
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fbc:	f001 fbce 	bl	800875c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fc8:	e011      	b.n	8006fee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d012      	beq.n	8006ff8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	3324      	adds	r3, #36	; 0x24
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fd1e 	bl	8007a18 <xTaskRemoveFromEventList>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fe2:	f000 fdf5 	bl	8007bd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	dce9      	bgt.n	8006fca <prvUnlockQueue+0x16>
 8006ff6:	e000      	b.n	8006ffa <prvUnlockQueue+0x46>
					break;
 8006ff8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	22ff      	movs	r2, #255	; 0xff
 8006ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007002:	f001 fbdb 	bl	80087bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007006:	f001 fba9 	bl	800875c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007010:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007012:	e011      	b.n	8007038 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d012      	beq.n	8007042 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3310      	adds	r3, #16
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fcf9 	bl	8007a18 <xTaskRemoveFromEventList>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800702c:	f000 fdd0 	bl	8007bd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	3b01      	subs	r3, #1
 8007034:	b2db      	uxtb	r3, r3
 8007036:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800703c:	2b00      	cmp	r3, #0
 800703e:	dce9      	bgt.n	8007014 <prvUnlockQueue+0x60>
 8007040:	e000      	b.n	8007044 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007042:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	22ff      	movs	r2, #255	; 0xff
 8007048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800704c:	f001 fbb6 	bl	80087bc <vPortExitCritical>
}
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007060:	f001 fb7c 	bl	800875c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	2b00      	cmp	r3, #0
 800706a:	d102      	bne.n	8007072 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800706c:	2301      	movs	r3, #1
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	e001      	b.n	8007076 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007072:	2300      	movs	r3, #0
 8007074:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007076:	f001 fba1 	bl	80087bc <vPortExitCritical>

	return xReturn;
 800707a:	68fb      	ldr	r3, [r7, #12]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800708c:	f001 fb66 	bl	800875c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007098:	429a      	cmp	r2, r3
 800709a:	d102      	bne.n	80070a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800709c:	2301      	movs	r3, #1
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	e001      	b.n	80070a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070a6:	f001 fb89 	bl	80087bc <vPortExitCritical>

	return xReturn;
 80070aa:	68fb      	ldr	r3, [r7, #12]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	e014      	b.n	80070ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070c4:	4a0e      	ldr	r2, [pc, #56]	; (8007100 <vQueueAddToRegistry+0x4c>)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070d0:	490b      	ldr	r1, [pc, #44]	; (8007100 <vQueueAddToRegistry+0x4c>)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070da:	4a09      	ldr	r2, [pc, #36]	; (8007100 <vQueueAddToRegistry+0x4c>)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	4413      	add	r3, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070e6:	e006      	b.n	80070f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3301      	adds	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b07      	cmp	r3, #7
 80070f2:	d9e7      	bls.n	80070c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bc80      	pop	{r7}
 80070fe:	4770      	bx	lr
 8007100:	20001ab0 	.word	0x20001ab0

08007104 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007114:	f001 fb22 	bl	800875c <vPortEnterCritical>
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800711e:	b25b      	sxtb	r3, r3
 8007120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007124:	d103      	bne.n	800712e <vQueueWaitForMessageRestricted+0x2a>
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007134:	b25b      	sxtb	r3, r3
 8007136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713a:	d103      	bne.n	8007144 <vQueueWaitForMessageRestricted+0x40>
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007144:	f001 fb3a 	bl	80087bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714c:	2b00      	cmp	r3, #0
 800714e:	d106      	bne.n	800715e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	3324      	adds	r3, #36	; 0x24
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	68b9      	ldr	r1, [r7, #8]
 8007158:	4618      	mov	r0, r3
 800715a:	f000 fc31 	bl	80079c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800715e:	6978      	ldr	r0, [r7, #20]
 8007160:	f7ff ff28 	bl	8006fb4 <prvUnlockQueue>
	}
 8007164:	bf00      	nop
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08e      	sub	sp, #56	; 0x38
 8007170:	af04      	add	r7, sp, #16
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800717a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	623b      	str	r3, [r7, #32]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10a      	bne.n	80071b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	61fb      	str	r3, [r7, #28]
}
 80071ae:	bf00      	nop
 80071b0:	e7fe      	b.n	80071b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071b2:	235c      	movs	r3, #92	; 0x5c
 80071b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	2b5c      	cmp	r3, #92	; 0x5c
 80071ba:	d00a      	beq.n	80071d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	61bb      	str	r3, [r7, #24]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01e      	beq.n	8007216 <xTaskCreateStatic+0xaa>
 80071d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d01b      	beq.n	8007216 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071f0:	2300      	movs	r3, #0
 80071f2:	9303      	str	r3, [sp, #12]
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	9302      	str	r3, [sp, #8]
 80071f8:	f107 0314 	add.w	r3, r7, #20
 80071fc:	9301      	str	r3, [sp, #4]
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f850 	bl	80072ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800720e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007210:	f000 f8d4 	bl	80073bc <prvAddNewTaskToReadyList>
 8007214:	e001      	b.n	800721a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007216:	2300      	movs	r3, #0
 8007218:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800721a:	697b      	ldr	r3, [r7, #20]
	}
 800721c:	4618      	mov	r0, r3
 800721e:	3728      	adds	r7, #40	; 0x28
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08c      	sub	sp, #48	; 0x30
 8007228:	af04      	add	r7, sp, #16
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	603b      	str	r3, [r7, #0]
 8007230:	4613      	mov	r3, r2
 8007232:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007234:	88fb      	ldrh	r3, [r7, #6]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4618      	mov	r0, r3
 800723a:	f001 fb8f 	bl	800895c <pvPortMalloc>
 800723e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00e      	beq.n	8007264 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007246:	205c      	movs	r0, #92	; 0x5c
 8007248:	f001 fb88 	bl	800895c <pvPortMalloc>
 800724c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	631a      	str	r2, [r3, #48]	; 0x30
 800725a:	e005      	b.n	8007268 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800725c:	6978      	ldr	r0, [r7, #20]
 800725e:	f001 fc41 	bl	8008ae4 <vPortFree>
 8007262:	e001      	b.n	8007268 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d017      	beq.n	800729e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007276:	88fa      	ldrh	r2, [r7, #6]
 8007278:	2300      	movs	r3, #0
 800727a:	9303      	str	r3, [sp, #12]
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	9302      	str	r3, [sp, #8]
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	9301      	str	r3, [sp, #4]
 8007284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 f80e 	bl	80072ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007292:	69f8      	ldr	r0, [r7, #28]
 8007294:	f000 f892 	bl	80073bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007298:	2301      	movs	r3, #1
 800729a:	61bb      	str	r3, [r7, #24]
 800729c:	e002      	b.n	80072a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800729e:	f04f 33ff 	mov.w	r3, #4294967295
 80072a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072a4:	69bb      	ldr	r3, [r7, #24]
	}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3720      	adds	r7, #32
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b088      	sub	sp, #32
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	60b9      	str	r1, [r7, #8]
 80072b8:	607a      	str	r2, [r7, #4]
 80072ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	461a      	mov	r2, r3
 80072c6:	21a5      	movs	r1, #165	; 0xa5
 80072c8:	f002 f90c 	bl	80094e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072d6:	3b01      	subs	r3, #1
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	f023 0307 	bic.w	r3, r3, #7
 80072e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	f003 0307 	and.w	r3, r3, #7
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <prvInitialiseNewTask+0x58>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	617b      	str	r3, [r7, #20]
}
 8007302:	bf00      	nop
 8007304:	e7fe      	b.n	8007304 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007306:	2300      	movs	r3, #0
 8007308:	61fb      	str	r3, [r7, #28]
 800730a:	e012      	b.n	8007332 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	4413      	add	r3, r2
 8007312:	7819      	ldrb	r1, [r3, #0]
 8007314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	4413      	add	r3, r2
 800731a:	3334      	adds	r3, #52	; 0x34
 800731c:	460a      	mov	r2, r1
 800731e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	4413      	add	r3, r2
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d006      	beq.n	800733a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	3301      	adds	r3, #1
 8007330:	61fb      	str	r3, [r7, #28]
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	2b0f      	cmp	r3, #15
 8007336:	d9e9      	bls.n	800730c <prvInitialiseNewTask+0x5e>
 8007338:	e000      	b.n	800733c <prvInitialiseNewTask+0x8e>
		{
			break;
 800733a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007346:	2b37      	cmp	r3, #55	; 0x37
 8007348:	d901      	bls.n	800734e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800734a:	2337      	movs	r3, #55	; 0x37
 800734c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007352:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007358:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	2200      	movs	r2, #0
 800735e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007362:	3304      	adds	r3, #4
 8007364:	4618      	mov	r0, r3
 8007366:	f7ff f98c 	bl	8006682 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	3318      	adds	r3, #24
 800736e:	4618      	mov	r0, r3
 8007370:	f7ff f987 	bl	8006682 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007378:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007382:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007388:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	2200      	movs	r2, #0
 800738e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	68f9      	ldr	r1, [r7, #12]
 800739c:	69b8      	ldr	r0, [r7, #24]
 800739e:	f001 f8ef 	bl	8008580 <pxPortInitialiseStack>
 80073a2:	4602      	mov	r2, r0
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80073a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073b4:	bf00      	nop
 80073b6:	3720      	adds	r7, #32
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073c4:	f001 f9ca 	bl	800875c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073c8:	4b2d      	ldr	r3, [pc, #180]	; (8007480 <prvAddNewTaskToReadyList+0xc4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3301      	adds	r3, #1
 80073ce:	4a2c      	ldr	r2, [pc, #176]	; (8007480 <prvAddNewTaskToReadyList+0xc4>)
 80073d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073d2:	4b2c      	ldr	r3, [pc, #176]	; (8007484 <prvAddNewTaskToReadyList+0xc8>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d109      	bne.n	80073ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073da:	4a2a      	ldr	r2, [pc, #168]	; (8007484 <prvAddNewTaskToReadyList+0xc8>)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073e0:	4b27      	ldr	r3, [pc, #156]	; (8007480 <prvAddNewTaskToReadyList+0xc4>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d110      	bne.n	800740a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073e8:	f000 fc16 	bl	8007c18 <prvInitialiseTaskLists>
 80073ec:	e00d      	b.n	800740a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073ee:	4b26      	ldr	r3, [pc, #152]	; (8007488 <prvAddNewTaskToReadyList+0xcc>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073f6:	4b23      	ldr	r3, [pc, #140]	; (8007484 <prvAddNewTaskToReadyList+0xc8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	429a      	cmp	r2, r3
 8007402:	d802      	bhi.n	800740a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007404:	4a1f      	ldr	r2, [pc, #124]	; (8007484 <prvAddNewTaskToReadyList+0xc8>)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800740a:	4b20      	ldr	r3, [pc, #128]	; (800748c <prvAddNewTaskToReadyList+0xd0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3301      	adds	r3, #1
 8007410:	4a1e      	ldr	r2, [pc, #120]	; (800748c <prvAddNewTaskToReadyList+0xd0>)
 8007412:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007414:	4b1d      	ldr	r3, [pc, #116]	; (800748c <prvAddNewTaskToReadyList+0xd0>)
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007420:	4b1b      	ldr	r3, [pc, #108]	; (8007490 <prvAddNewTaskToReadyList+0xd4>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d903      	bls.n	8007430 <prvAddNewTaskToReadyList+0x74>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	4a18      	ldr	r2, [pc, #96]	; (8007490 <prvAddNewTaskToReadyList+0xd4>)
 800742e:	6013      	str	r3, [r2, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4a15      	ldr	r2, [pc, #84]	; (8007494 <prvAddNewTaskToReadyList+0xd8>)
 800743e:	441a      	add	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3304      	adds	r3, #4
 8007444:	4619      	mov	r1, r3
 8007446:	4610      	mov	r0, r2
 8007448:	f7ff f927 	bl	800669a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800744c:	f001 f9b6 	bl	80087bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007450:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <prvAddNewTaskToReadyList+0xcc>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00e      	beq.n	8007476 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007458:	4b0a      	ldr	r3, [pc, #40]	; (8007484 <prvAddNewTaskToReadyList+0xc8>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007462:	429a      	cmp	r2, r3
 8007464:	d207      	bcs.n	8007476 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007466:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <prvAddNewTaskToReadyList+0xdc>)
 8007468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000d14 	.word	0x20000d14
 8007484:	20000840 	.word	0x20000840
 8007488:	20000d20 	.word	0x20000d20
 800748c:	20000d30 	.word	0x20000d30
 8007490:	20000d1c 	.word	0x20000d1c
 8007494:	20000844 	.word	0x20000844
 8007498:	e000ed04 	.word	0xe000ed04

0800749c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d017      	beq.n	80074de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074ae:	4b13      	ldr	r3, [pc, #76]	; (80074fc <vTaskDelay+0x60>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <vTaskDelay+0x30>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	60bb      	str	r3, [r7, #8]
}
 80074c8:	bf00      	nop
 80074ca:	e7fe      	b.n	80074ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80074cc:	f000 f880 	bl	80075d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074d0:	2100      	movs	r1, #0
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fcee 	bl	8007eb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074d8:	f000 f888 	bl	80075ec <xTaskResumeAll>
 80074dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d107      	bne.n	80074f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80074e4:	4b06      	ldr	r3, [pc, #24]	; (8007500 <vTaskDelay+0x64>)
 80074e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074f4:	bf00      	nop
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	20000d3c 	.word	0x20000d3c
 8007500:	e000ed04 	.word	0xe000ed04

08007504 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08a      	sub	sp, #40	; 0x28
 8007508:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800750a:	2300      	movs	r3, #0
 800750c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800750e:	2300      	movs	r3, #0
 8007510:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007512:	463a      	mov	r2, r7
 8007514:	1d39      	adds	r1, r7, #4
 8007516:	f107 0308 	add.w	r3, r7, #8
 800751a:	4618      	mov	r0, r3
 800751c:	f7ff f860 	bl	80065e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	9202      	str	r2, [sp, #8]
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	2300      	movs	r3, #0
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	2300      	movs	r3, #0
 8007530:	460a      	mov	r2, r1
 8007532:	4921      	ldr	r1, [pc, #132]	; (80075b8 <vTaskStartScheduler+0xb4>)
 8007534:	4821      	ldr	r0, [pc, #132]	; (80075bc <vTaskStartScheduler+0xb8>)
 8007536:	f7ff fe19 	bl	800716c <xTaskCreateStatic>
 800753a:	4603      	mov	r3, r0
 800753c:	4a20      	ldr	r2, [pc, #128]	; (80075c0 <vTaskStartScheduler+0xbc>)
 800753e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007540:	4b1f      	ldr	r3, [pc, #124]	; (80075c0 <vTaskStartScheduler+0xbc>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007548:	2301      	movs	r3, #1
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	e001      	b.n	8007552 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800754e:	2300      	movs	r3, #0
 8007550:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d102      	bne.n	800755e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007558:	f000 fd00 	bl	8007f5c <xTimerCreateTimerTask>
 800755c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d116      	bne.n	8007592 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	613b      	str	r3, [r7, #16]
}
 8007576:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007578:	4b12      	ldr	r3, [pc, #72]	; (80075c4 <vTaskStartScheduler+0xc0>)
 800757a:	f04f 32ff 	mov.w	r2, #4294967295
 800757e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007580:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <vTaskStartScheduler+0xc4>)
 8007582:	2201      	movs	r2, #1
 8007584:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007586:	4b11      	ldr	r3, [pc, #68]	; (80075cc <vTaskStartScheduler+0xc8>)
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800758c:	f001 f874 	bl	8008678 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007590:	e00e      	b.n	80075b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007598:	d10a      	bne.n	80075b0 <vTaskStartScheduler+0xac>
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	60fb      	str	r3, [r7, #12]
}
 80075ac:	bf00      	nop
 80075ae:	e7fe      	b.n	80075ae <vTaskStartScheduler+0xaa>
}
 80075b0:	bf00      	nop
 80075b2:	3718      	adds	r7, #24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	08009540 	.word	0x08009540
 80075bc:	08007be9 	.word	0x08007be9
 80075c0:	20000d38 	.word	0x20000d38
 80075c4:	20000d34 	.word	0x20000d34
 80075c8:	20000d20 	.word	0x20000d20
 80075cc:	20000d18 	.word	0x20000d18

080075d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80075d4:	4b04      	ldr	r3, [pc, #16]	; (80075e8 <vTaskSuspendAll+0x18>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3301      	adds	r3, #1
 80075da:	4a03      	ldr	r2, [pc, #12]	; (80075e8 <vTaskSuspendAll+0x18>)
 80075dc:	6013      	str	r3, [r2, #0]
}
 80075de:	bf00      	nop
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bc80      	pop	{r7}
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	20000d3c 	.word	0x20000d3c

080075ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075fa:	4b42      	ldr	r3, [pc, #264]	; (8007704 <xTaskResumeAll+0x118>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <xTaskResumeAll+0x2c>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	603b      	str	r3, [r7, #0]
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007618:	f001 f8a0 	bl	800875c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800761c:	4b39      	ldr	r3, [pc, #228]	; (8007704 <xTaskResumeAll+0x118>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3b01      	subs	r3, #1
 8007622:	4a38      	ldr	r2, [pc, #224]	; (8007704 <xTaskResumeAll+0x118>)
 8007624:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007626:	4b37      	ldr	r3, [pc, #220]	; (8007704 <xTaskResumeAll+0x118>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d162      	bne.n	80076f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800762e:	4b36      	ldr	r3, [pc, #216]	; (8007708 <xTaskResumeAll+0x11c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d05e      	beq.n	80076f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007636:	e02f      	b.n	8007698 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007638:	4b34      	ldr	r3, [pc, #208]	; (800770c <xTaskResumeAll+0x120>)
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3318      	adds	r3, #24
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff f883 	bl	8006750 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3304      	adds	r3, #4
 800764e:	4618      	mov	r0, r3
 8007650:	f7ff f87e 	bl	8006750 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007658:	4b2d      	ldr	r3, [pc, #180]	; (8007710 <xTaskResumeAll+0x124>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	429a      	cmp	r2, r3
 800765e:	d903      	bls.n	8007668 <xTaskResumeAll+0x7c>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	4a2a      	ldr	r2, [pc, #168]	; (8007710 <xTaskResumeAll+0x124>)
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4a27      	ldr	r2, [pc, #156]	; (8007714 <xTaskResumeAll+0x128>)
 8007676:	441a      	add	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	3304      	adds	r3, #4
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f7ff f80b 	bl	800669a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007688:	4b23      	ldr	r3, [pc, #140]	; (8007718 <xTaskResumeAll+0x12c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	429a      	cmp	r2, r3
 8007690:	d302      	bcc.n	8007698 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007692:	4b22      	ldr	r3, [pc, #136]	; (800771c <xTaskResumeAll+0x130>)
 8007694:	2201      	movs	r2, #1
 8007696:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007698:	4b1c      	ldr	r3, [pc, #112]	; (800770c <xTaskResumeAll+0x120>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1cb      	bne.n	8007638 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076a6:	f000 fb55 	bl	8007d54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80076aa:	4b1d      	ldr	r3, [pc, #116]	; (8007720 <xTaskResumeAll+0x134>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d010      	beq.n	80076d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076b6:	f000 f845 	bl	8007744 <xTaskIncrementTick>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80076c0:	4b16      	ldr	r3, [pc, #88]	; (800771c <xTaskResumeAll+0x130>)
 80076c2:	2201      	movs	r2, #1
 80076c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1f1      	bne.n	80076b6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80076d2:	4b13      	ldr	r3, [pc, #76]	; (8007720 <xTaskResumeAll+0x134>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076d8:	4b10      	ldr	r3, [pc, #64]	; (800771c <xTaskResumeAll+0x130>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d009      	beq.n	80076f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076e0:	2301      	movs	r3, #1
 80076e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076e4:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <xTaskResumeAll+0x138>)
 80076e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076f4:	f001 f862 	bl	80087bc <vPortExitCritical>

	return xAlreadyYielded;
 80076f8:	68bb      	ldr	r3, [r7, #8]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	20000d3c 	.word	0x20000d3c
 8007708:	20000d14 	.word	0x20000d14
 800770c:	20000cd4 	.word	0x20000cd4
 8007710:	20000d1c 	.word	0x20000d1c
 8007714:	20000844 	.word	0x20000844
 8007718:	20000840 	.word	0x20000840
 800771c:	20000d28 	.word	0x20000d28
 8007720:	20000d24 	.word	0x20000d24
 8007724:	e000ed04 	.word	0xe000ed04

08007728 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800772e:	4b04      	ldr	r3, [pc, #16]	; (8007740 <xTaskGetTickCount+0x18>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007734:	687b      	ldr	r3, [r7, #4]
}
 8007736:	4618      	mov	r0, r3
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	bc80      	pop	{r7}
 800773e:	4770      	bx	lr
 8007740:	20000d18 	.word	0x20000d18

08007744 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800774a:	2300      	movs	r3, #0
 800774c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800774e:	4b51      	ldr	r3, [pc, #324]	; (8007894 <xTaskIncrementTick+0x150>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	f040 808e 	bne.w	8007874 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007758:	4b4f      	ldr	r3, [pc, #316]	; (8007898 <xTaskIncrementTick+0x154>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3301      	adds	r3, #1
 800775e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007760:	4a4d      	ldr	r2, [pc, #308]	; (8007898 <xTaskIncrementTick+0x154>)
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d120      	bne.n	80077ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800776c:	4b4b      	ldr	r3, [pc, #300]	; (800789c <xTaskIncrementTick+0x158>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00a      	beq.n	800778c <xTaskIncrementTick+0x48>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	603b      	str	r3, [r7, #0]
}
 8007788:	bf00      	nop
 800778a:	e7fe      	b.n	800778a <xTaskIncrementTick+0x46>
 800778c:	4b43      	ldr	r3, [pc, #268]	; (800789c <xTaskIncrementTick+0x158>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	60fb      	str	r3, [r7, #12]
 8007792:	4b43      	ldr	r3, [pc, #268]	; (80078a0 <xTaskIncrementTick+0x15c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a41      	ldr	r2, [pc, #260]	; (800789c <xTaskIncrementTick+0x158>)
 8007798:	6013      	str	r3, [r2, #0]
 800779a:	4a41      	ldr	r2, [pc, #260]	; (80078a0 <xTaskIncrementTick+0x15c>)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	4b40      	ldr	r3, [pc, #256]	; (80078a4 <xTaskIncrementTick+0x160>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3301      	adds	r3, #1
 80077a6:	4a3f      	ldr	r2, [pc, #252]	; (80078a4 <xTaskIncrementTick+0x160>)
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	f000 fad3 	bl	8007d54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80077ae:	4b3e      	ldr	r3, [pc, #248]	; (80078a8 <xTaskIncrementTick+0x164>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d34e      	bcc.n	8007856 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077b8:	4b38      	ldr	r3, [pc, #224]	; (800789c <xTaskIncrementTick+0x158>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <xTaskIncrementTick+0x82>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <xTaskIncrementTick+0x84>
 80077c6:	2300      	movs	r3, #0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d004      	beq.n	80077d6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077cc:	4b36      	ldr	r3, [pc, #216]	; (80078a8 <xTaskIncrementTick+0x164>)
 80077ce:	f04f 32ff 	mov.w	r2, #4294967295
 80077d2:	601a      	str	r2, [r3, #0]
					break;
 80077d4:	e03f      	b.n	8007856 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80077d6:	4b31      	ldr	r3, [pc, #196]	; (800789c <xTaskIncrementTick+0x158>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d203      	bcs.n	80077f6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077ee:	4a2e      	ldr	r2, [pc, #184]	; (80078a8 <xTaskIncrementTick+0x164>)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6013      	str	r3, [r2, #0]
						break;
 80077f4:	e02f      	b.n	8007856 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	3304      	adds	r3, #4
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe ffa8 	bl	8006750 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007804:	2b00      	cmp	r3, #0
 8007806:	d004      	beq.n	8007812 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	3318      	adds	r3, #24
 800780c:	4618      	mov	r0, r3
 800780e:	f7fe ff9f 	bl	8006750 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007816:	4b25      	ldr	r3, [pc, #148]	; (80078ac <xTaskIncrementTick+0x168>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d903      	bls.n	8007826 <xTaskIncrementTick+0xe2>
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007822:	4a22      	ldr	r2, [pc, #136]	; (80078ac <xTaskIncrementTick+0x168>)
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4a1f      	ldr	r2, [pc, #124]	; (80078b0 <xTaskIncrementTick+0x16c>)
 8007834:	441a      	add	r2, r3
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	3304      	adds	r3, #4
 800783a:	4619      	mov	r1, r3
 800783c:	4610      	mov	r0, r2
 800783e:	f7fe ff2c 	bl	800669a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007846:	4b1b      	ldr	r3, [pc, #108]	; (80078b4 <xTaskIncrementTick+0x170>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784c:	429a      	cmp	r2, r3
 800784e:	d3b3      	bcc.n	80077b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007850:	2301      	movs	r3, #1
 8007852:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007854:	e7b0      	b.n	80077b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007856:	4b17      	ldr	r3, [pc, #92]	; (80078b4 <xTaskIncrementTick+0x170>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785c:	4914      	ldr	r1, [pc, #80]	; (80078b0 <xTaskIncrementTick+0x16c>)
 800785e:	4613      	mov	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	440b      	add	r3, r1
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d907      	bls.n	800787e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800786e:	2301      	movs	r3, #1
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	e004      	b.n	800787e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007874:	4b10      	ldr	r3, [pc, #64]	; (80078b8 <xTaskIncrementTick+0x174>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3301      	adds	r3, #1
 800787a:	4a0f      	ldr	r2, [pc, #60]	; (80078b8 <xTaskIncrementTick+0x174>)
 800787c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800787e:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <xTaskIncrementTick+0x178>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007886:	2301      	movs	r3, #1
 8007888:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800788a:	697b      	ldr	r3, [r7, #20]
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	20000d3c 	.word	0x20000d3c
 8007898:	20000d18 	.word	0x20000d18
 800789c:	20000ccc 	.word	0x20000ccc
 80078a0:	20000cd0 	.word	0x20000cd0
 80078a4:	20000d2c 	.word	0x20000d2c
 80078a8:	20000d34 	.word	0x20000d34
 80078ac:	20000d1c 	.word	0x20000d1c
 80078b0:	20000844 	.word	0x20000844
 80078b4:	20000840 	.word	0x20000840
 80078b8:	20000d24 	.word	0x20000d24
 80078bc:	20000d28 	.word	0x20000d28

080078c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078c6:	4b27      	ldr	r3, [pc, #156]	; (8007964 <vTaskSwitchContext+0xa4>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d003      	beq.n	80078d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80078ce:	4b26      	ldr	r3, [pc, #152]	; (8007968 <vTaskSwitchContext+0xa8>)
 80078d0:	2201      	movs	r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80078d4:	e041      	b.n	800795a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80078d6:	4b24      	ldr	r3, [pc, #144]	; (8007968 <vTaskSwitchContext+0xa8>)
 80078d8:	2200      	movs	r2, #0
 80078da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80078dc:	4b23      	ldr	r3, [pc, #140]	; (800796c <vTaskSwitchContext+0xac>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	60fb      	str	r3, [r7, #12]
 80078e2:	e010      	b.n	8007906 <vTaskSwitchContext+0x46>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10a      	bne.n	8007900 <vTaskSwitchContext+0x40>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	607b      	str	r3, [r7, #4]
}
 80078fc:	bf00      	nop
 80078fe:	e7fe      	b.n	80078fe <vTaskSwitchContext+0x3e>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3b01      	subs	r3, #1
 8007904:	60fb      	str	r3, [r7, #12]
 8007906:	491a      	ldr	r1, [pc, #104]	; (8007970 <vTaskSwitchContext+0xb0>)
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	4613      	mov	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	4413      	add	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	440b      	add	r3, r1
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0e4      	beq.n	80078e4 <vTaskSwitchContext+0x24>
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	4613      	mov	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4a12      	ldr	r2, [pc, #72]	; (8007970 <vTaskSwitchContext+0xb0>)
 8007926:	4413      	add	r3, r2
 8007928:	60bb      	str	r3, [r7, #8]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	605a      	str	r2, [r3, #4]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	3308      	adds	r3, #8
 800793c:	429a      	cmp	r2, r3
 800793e:	d104      	bne.n	800794a <vTaskSwitchContext+0x8a>
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	605a      	str	r2, [r3, #4]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	4a08      	ldr	r2, [pc, #32]	; (8007974 <vTaskSwitchContext+0xb4>)
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	4a05      	ldr	r2, [pc, #20]	; (800796c <vTaskSwitchContext+0xac>)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6013      	str	r3, [r2, #0]
}
 800795a:	bf00      	nop
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	bc80      	pop	{r7}
 8007962:	4770      	bx	lr
 8007964:	20000d3c 	.word	0x20000d3c
 8007968:	20000d28 	.word	0x20000d28
 800796c:	20000d1c 	.word	0x20000d1c
 8007970:	20000844 	.word	0x20000844
 8007974:	20000840 	.word	0x20000840

08007978 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10a      	bne.n	800799e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	60fb      	str	r3, [r7, #12]
}
 800799a:	bf00      	nop
 800799c:	e7fe      	b.n	800799c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800799e:	4b07      	ldr	r3, [pc, #28]	; (80079bc <vTaskPlaceOnEventList+0x44>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3318      	adds	r3, #24
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7fe fe9a 	bl	80066e0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079ac:	2101      	movs	r1, #1
 80079ae:	6838      	ldr	r0, [r7, #0]
 80079b0:	f000 fa80 	bl	8007eb4 <prvAddCurrentTaskToDelayedList>
}
 80079b4:	bf00      	nop
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	20000840 	.word	0x20000840

080079c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10a      	bne.n	80079e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	617b      	str	r3, [r7, #20]
}
 80079e4:	bf00      	nop
 80079e6:	e7fe      	b.n	80079e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079e8:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <vTaskPlaceOnEventListRestricted+0x54>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3318      	adds	r3, #24
 80079ee:	4619      	mov	r1, r3
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f7fe fe52 	bl	800669a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80079fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007a00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a02:	6879      	ldr	r1, [r7, #4]
 8007a04:	68b8      	ldr	r0, [r7, #8]
 8007a06:	f000 fa55 	bl	8007eb4 <prvAddCurrentTaskToDelayedList>
	}
 8007a0a:	bf00      	nop
 8007a0c:	3718      	adds	r7, #24
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20000840 	.word	0x20000840

08007a18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d10a      	bne.n	8007a44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	60fb      	str	r3, [r7, #12]
}
 8007a40:	bf00      	nop
 8007a42:	e7fe      	b.n	8007a42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	3318      	adds	r3, #24
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fe fe81 	bl	8006750 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a4e:	4b1e      	ldr	r3, [pc, #120]	; (8007ac8 <xTaskRemoveFromEventList+0xb0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d11d      	bne.n	8007a92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe fe78 	bl	8006750 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a64:	4b19      	ldr	r3, [pc, #100]	; (8007acc <xTaskRemoveFromEventList+0xb4>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d903      	bls.n	8007a74 <xTaskRemoveFromEventList+0x5c>
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a70:	4a16      	ldr	r2, [pc, #88]	; (8007acc <xTaskRemoveFromEventList+0xb4>)
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a78:	4613      	mov	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4a13      	ldr	r2, [pc, #76]	; (8007ad0 <xTaskRemoveFromEventList+0xb8>)
 8007a82:	441a      	add	r2, r3
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	3304      	adds	r3, #4
 8007a88:	4619      	mov	r1, r3
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	f7fe fe05 	bl	800669a <vListInsertEnd>
 8007a90:	e005      	b.n	8007a9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	3318      	adds	r3, #24
 8007a96:	4619      	mov	r1, r3
 8007a98:	480e      	ldr	r0, [pc, #56]	; (8007ad4 <xTaskRemoveFromEventList+0xbc>)
 8007a9a:	f7fe fdfe 	bl	800669a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa2:	4b0d      	ldr	r3, [pc, #52]	; (8007ad8 <xTaskRemoveFromEventList+0xc0>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d905      	bls.n	8007ab8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007aac:	2301      	movs	r3, #1
 8007aae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ab0:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <xTaskRemoveFromEventList+0xc4>)
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	e001      	b.n	8007abc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007abc:	697b      	ldr	r3, [r7, #20]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20000d3c 	.word	0x20000d3c
 8007acc:	20000d1c 	.word	0x20000d1c
 8007ad0:	20000844 	.word	0x20000844
 8007ad4:	20000cd4 	.word	0x20000cd4
 8007ad8:	20000840 	.word	0x20000840
 8007adc:	20000d28 	.word	0x20000d28

08007ae0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ae8:	4b06      	ldr	r3, [pc, #24]	; (8007b04 <vTaskInternalSetTimeOutState+0x24>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007af0:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <vTaskInternalSetTimeOutState+0x28>)
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	605a      	str	r2, [r3, #4]
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000d2c 	.word	0x20000d2c
 8007b08:	20000d18 	.word	0x20000d18

08007b0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b088      	sub	sp, #32
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10a      	bne.n	8007b32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	613b      	str	r3, [r7, #16]
}
 8007b2e:	bf00      	nop
 8007b30:	e7fe      	b.n	8007b30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10a      	bne.n	8007b4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	60fb      	str	r3, [r7, #12]
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007b4e:	f000 fe05 	bl	800875c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b52:	4b1d      	ldr	r3, [pc, #116]	; (8007bc8 <xTaskCheckForTimeOut+0xbc>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6a:	d102      	bne.n	8007b72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61fb      	str	r3, [r7, #28]
 8007b70:	e023      	b.n	8007bba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	4b15      	ldr	r3, [pc, #84]	; (8007bcc <xTaskCheckForTimeOut+0xc0>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d007      	beq.n	8007b8e <xTaskCheckForTimeOut+0x82>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	69ba      	ldr	r2, [r7, #24]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d302      	bcc.n	8007b8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	61fb      	str	r3, [r7, #28]
 8007b8c:	e015      	b.n	8007bba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d20b      	bcs.n	8007bb0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	1ad2      	subs	r2, r2, r3
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff ff9b 	bl	8007ae0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007baa:	2300      	movs	r3, #0
 8007bac:	61fb      	str	r3, [r7, #28]
 8007bae:	e004      	b.n	8007bba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007bba:	f000 fdff 	bl	80087bc <vPortExitCritical>

	return xReturn;
 8007bbe:	69fb      	ldr	r3, [r7, #28]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3720      	adds	r7, #32
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	20000d18 	.word	0x20000d18
 8007bcc:	20000d2c 	.word	0x20000d2c

08007bd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007bd4:	4b03      	ldr	r3, [pc, #12]	; (8007be4 <vTaskMissedYield+0x14>)
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]
}
 8007bda:	bf00      	nop
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bc80      	pop	{r7}
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	20000d28 	.word	0x20000d28

08007be8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bf0:	f000 f852 	bl	8007c98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007bf4:	4b06      	ldr	r3, [pc, #24]	; (8007c10 <prvIdleTask+0x28>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d9f9      	bls.n	8007bf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007bfc:	4b05      	ldr	r3, [pc, #20]	; (8007c14 <prvIdleTask+0x2c>)
 8007bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c0c:	e7f0      	b.n	8007bf0 <prvIdleTask+0x8>
 8007c0e:	bf00      	nop
 8007c10:	20000844 	.word	0x20000844
 8007c14:	e000ed04 	.word	0xe000ed04

08007c18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c1e:	2300      	movs	r3, #0
 8007c20:	607b      	str	r3, [r7, #4]
 8007c22:	e00c      	b.n	8007c3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	4613      	mov	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4413      	add	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4a12      	ldr	r2, [pc, #72]	; (8007c78 <prvInitialiseTaskLists+0x60>)
 8007c30:	4413      	add	r3, r2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fe fd06 	bl	8006644 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	607b      	str	r3, [r7, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b37      	cmp	r3, #55	; 0x37
 8007c42:	d9ef      	bls.n	8007c24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c44:	480d      	ldr	r0, [pc, #52]	; (8007c7c <prvInitialiseTaskLists+0x64>)
 8007c46:	f7fe fcfd 	bl	8006644 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c4a:	480d      	ldr	r0, [pc, #52]	; (8007c80 <prvInitialiseTaskLists+0x68>)
 8007c4c:	f7fe fcfa 	bl	8006644 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c50:	480c      	ldr	r0, [pc, #48]	; (8007c84 <prvInitialiseTaskLists+0x6c>)
 8007c52:	f7fe fcf7 	bl	8006644 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c56:	480c      	ldr	r0, [pc, #48]	; (8007c88 <prvInitialiseTaskLists+0x70>)
 8007c58:	f7fe fcf4 	bl	8006644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c5c:	480b      	ldr	r0, [pc, #44]	; (8007c8c <prvInitialiseTaskLists+0x74>)
 8007c5e:	f7fe fcf1 	bl	8006644 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c62:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <prvInitialiseTaskLists+0x78>)
 8007c64:	4a05      	ldr	r2, [pc, #20]	; (8007c7c <prvInitialiseTaskLists+0x64>)
 8007c66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c68:	4b0a      	ldr	r3, [pc, #40]	; (8007c94 <prvInitialiseTaskLists+0x7c>)
 8007c6a:	4a05      	ldr	r2, [pc, #20]	; (8007c80 <prvInitialiseTaskLists+0x68>)
 8007c6c:	601a      	str	r2, [r3, #0]
}
 8007c6e:	bf00      	nop
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20000844 	.word	0x20000844
 8007c7c:	20000ca4 	.word	0x20000ca4
 8007c80:	20000cb8 	.word	0x20000cb8
 8007c84:	20000cd4 	.word	0x20000cd4
 8007c88:	20000ce8 	.word	0x20000ce8
 8007c8c:	20000d00 	.word	0x20000d00
 8007c90:	20000ccc 	.word	0x20000ccc
 8007c94:	20000cd0 	.word	0x20000cd0

08007c98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c9e:	e019      	b.n	8007cd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ca0:	f000 fd5c 	bl	800875c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007ca4:	4b10      	ldr	r3, [pc, #64]	; (8007ce8 <prvCheckTasksWaitingTermination+0x50>)
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fe fd4d 	bl	8006750 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	; (8007cec <prvCheckTasksWaitingTermination+0x54>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	4a0b      	ldr	r2, [pc, #44]	; (8007cec <prvCheckTasksWaitingTermination+0x54>)
 8007cbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <prvCheckTasksWaitingTermination+0x58>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	4a0a      	ldr	r2, [pc, #40]	; (8007cf0 <prvCheckTasksWaitingTermination+0x58>)
 8007cc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007cca:	f000 fd77 	bl	80087bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f810 	bl	8007cf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cd4:	4b06      	ldr	r3, [pc, #24]	; (8007cf0 <prvCheckTasksWaitingTermination+0x58>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e1      	bne.n	8007ca0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007cdc:	bf00      	nop
 8007cde:	bf00      	nop
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000ce8 	.word	0x20000ce8
 8007cec:	20000d14 	.word	0x20000d14
 8007cf0:	20000cfc 	.word	0x20000cfc

08007cf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d108      	bne.n	8007d18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 feea 	bl	8008ae4 <vPortFree>
				vPortFree( pxTCB );
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fee7 	bl	8008ae4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d16:	e018      	b.n	8007d4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d103      	bne.n	8007d2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fede 	bl	8008ae4 <vPortFree>
	}
 8007d28:	e00f      	b.n	8007d4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d00a      	beq.n	8007d4a <prvDeleteTCB+0x56>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	60fb      	str	r3, [r7, #12]
}
 8007d46:	bf00      	nop
 8007d48:	e7fe      	b.n	8007d48 <prvDeleteTCB+0x54>
	}
 8007d4a:	bf00      	nop
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d5a:	4b0e      	ldr	r3, [pc, #56]	; (8007d94 <prvResetNextTaskUnblockTime+0x40>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <prvResetNextTaskUnblockTime+0x14>
 8007d64:	2301      	movs	r3, #1
 8007d66:	e000      	b.n	8007d6a <prvResetNextTaskUnblockTime+0x16>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d004      	beq.n	8007d78 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d6e:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <prvResetNextTaskUnblockTime+0x44>)
 8007d70:	f04f 32ff 	mov.w	r2, #4294967295
 8007d74:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d76:	e008      	b.n	8007d8a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007d78:	4b06      	ldr	r3, [pc, #24]	; (8007d94 <prvResetNextTaskUnblockTime+0x40>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	4a04      	ldr	r2, [pc, #16]	; (8007d98 <prvResetNextTaskUnblockTime+0x44>)
 8007d88:	6013      	str	r3, [r2, #0]
}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bc80      	pop	{r7}
 8007d92:	4770      	bx	lr
 8007d94:	20000ccc 	.word	0x20000ccc
 8007d98:	20000d34 	.word	0x20000d34

08007d9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007da2:	4b0b      	ldr	r3, [pc, #44]	; (8007dd0 <xTaskGetSchedulerState+0x34>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d102      	bne.n	8007db0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007daa:	2301      	movs	r3, #1
 8007dac:	607b      	str	r3, [r7, #4]
 8007dae:	e008      	b.n	8007dc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007db0:	4b08      	ldr	r3, [pc, #32]	; (8007dd4 <xTaskGetSchedulerState+0x38>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d102      	bne.n	8007dbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007db8:	2302      	movs	r3, #2
 8007dba:	607b      	str	r3, [r7, #4]
 8007dbc:	e001      	b.n	8007dc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007dc2:	687b      	ldr	r3, [r7, #4]
	}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bc80      	pop	{r7}
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	20000d20 	.word	0x20000d20
 8007dd4:	20000d3c 	.word	0x20000d3c

08007dd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007de4:	2300      	movs	r3, #0
 8007de6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d056      	beq.n	8007e9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007dee:	4b2e      	ldr	r3, [pc, #184]	; (8007ea8 <xTaskPriorityDisinherit+0xd0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d00a      	beq.n	8007e0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	60fb      	str	r3, [r7, #12]
}
 8007e0a:	bf00      	nop
 8007e0c:	e7fe      	b.n	8007e0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10a      	bne.n	8007e2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	60bb      	str	r3, [r7, #8]
}
 8007e28:	bf00      	nop
 8007e2a:	e7fe      	b.n	8007e2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e30:	1e5a      	subs	r2, r3, #1
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d02c      	beq.n	8007e9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d128      	bne.n	8007e9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fe fc7e 	bl	8006750 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e6c:	4b0f      	ldr	r3, [pc, #60]	; (8007eac <xTaskPriorityDisinherit+0xd4>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d903      	bls.n	8007e7c <xTaskPriorityDisinherit+0xa4>
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	4a0c      	ldr	r2, [pc, #48]	; (8007eac <xTaskPriorityDisinherit+0xd4>)
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e80:	4613      	mov	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4a09      	ldr	r2, [pc, #36]	; (8007eb0 <xTaskPriorityDisinherit+0xd8>)
 8007e8a:	441a      	add	r2, r3
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	3304      	adds	r3, #4
 8007e90:	4619      	mov	r1, r3
 8007e92:	4610      	mov	r0, r2
 8007e94:	f7fe fc01 	bl	800669a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e9c:	697b      	ldr	r3, [r7, #20]
	}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20000840 	.word	0x20000840
 8007eac:	20000d1c 	.word	0x20000d1c
 8007eb0:	20000844 	.word	0x20000844

08007eb4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ebe:	4b21      	ldr	r3, [pc, #132]	; (8007f44 <prvAddCurrentTaskToDelayedList+0x90>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ec4:	4b20      	ldr	r3, [pc, #128]	; (8007f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3304      	adds	r3, #4
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe fc40 	bl	8006750 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed6:	d10a      	bne.n	8007eee <prvAddCurrentTaskToDelayedList+0x3a>
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d007      	beq.n	8007eee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ede:	4b1a      	ldr	r3, [pc, #104]	; (8007f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3304      	adds	r3, #4
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	4819      	ldr	r0, [pc, #100]	; (8007f4c <prvAddCurrentTaskToDelayedList+0x98>)
 8007ee8:	f7fe fbd7 	bl	800669a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007eec:	e026      	b.n	8007f3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ef6:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d209      	bcs.n	8007f1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f06:	4b12      	ldr	r3, [pc, #72]	; (8007f50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	4b0f      	ldr	r3, [pc, #60]	; (8007f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	4619      	mov	r1, r3
 8007f12:	4610      	mov	r0, r2
 8007f14:	f7fe fbe4 	bl	80066e0 <vListInsert>
}
 8007f18:	e010      	b.n	8007f3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f1a:	4b0e      	ldr	r3, [pc, #56]	; (8007f54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3304      	adds	r3, #4
 8007f24:	4619      	mov	r1, r3
 8007f26:	4610      	mov	r0, r2
 8007f28:	f7fe fbda 	bl	80066e0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f2c:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d202      	bcs.n	8007f3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f36:	4a08      	ldr	r2, [pc, #32]	; (8007f58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	6013      	str	r3, [r2, #0]
}
 8007f3c:	bf00      	nop
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20000d18 	.word	0x20000d18
 8007f48:	20000840 	.word	0x20000840
 8007f4c:	20000d00 	.word	0x20000d00
 8007f50:	20000cd0 	.word	0x20000cd0
 8007f54:	20000ccc 	.word	0x20000ccc
 8007f58:	20000d34 	.word	0x20000d34

08007f5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08a      	sub	sp, #40	; 0x28
 8007f60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f66:	f000 facb 	bl	8008500 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f6a:	4b1c      	ldr	r3, [pc, #112]	; (8007fdc <xTimerCreateTimerTask+0x80>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d021      	beq.n	8007fb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f7a:	1d3a      	adds	r2, r7, #4
 8007f7c:	f107 0108 	add.w	r1, r7, #8
 8007f80:	f107 030c 	add.w	r3, r7, #12
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fe fb43 	bl	8006610 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f8a:	6879      	ldr	r1, [r7, #4]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	9202      	str	r2, [sp, #8]
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	2302      	movs	r3, #2
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	460a      	mov	r2, r1
 8007f9c:	4910      	ldr	r1, [pc, #64]	; (8007fe0 <xTimerCreateTimerTask+0x84>)
 8007f9e:	4811      	ldr	r0, [pc, #68]	; (8007fe4 <xTimerCreateTimerTask+0x88>)
 8007fa0:	f7ff f8e4 	bl	800716c <xTaskCreateStatic>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	4a10      	ldr	r2, [pc, #64]	; (8007fe8 <xTimerCreateTimerTask+0x8c>)
 8007fa8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007faa:	4b0f      	ldr	r3, [pc, #60]	; (8007fe8 <xTimerCreateTimerTask+0x8c>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10a      	bne.n	8007fd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	613b      	str	r3, [r7, #16]
}
 8007fce:	bf00      	nop
 8007fd0:	e7fe      	b.n	8007fd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007fd2:	697b      	ldr	r3, [r7, #20]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3718      	adds	r7, #24
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	20000d70 	.word	0x20000d70
 8007fe0:	08009548 	.word	0x08009548
 8007fe4:	08008109 	.word	0x08008109
 8007fe8:	20000d74 	.word	0x20000d74

08007fec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08a      	sub	sp, #40	; 0x28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
 8007ff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10a      	bne.n	800801a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	623b      	str	r3, [r7, #32]
}
 8008016:	bf00      	nop
 8008018:	e7fe      	b.n	8008018 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800801a:	4b1a      	ldr	r3, [pc, #104]	; (8008084 <xTimerGenericCommand+0x98>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d02a      	beq.n	8008078 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2b05      	cmp	r3, #5
 8008032:	dc18      	bgt.n	8008066 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008034:	f7ff feb2 	bl	8007d9c <xTaskGetSchedulerState>
 8008038:	4603      	mov	r3, r0
 800803a:	2b02      	cmp	r3, #2
 800803c:	d109      	bne.n	8008052 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800803e:	4b11      	ldr	r3, [pc, #68]	; (8008084 <xTimerGenericCommand+0x98>)
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	f107 0110 	add.w	r1, r7, #16
 8008046:	2300      	movs	r3, #0
 8008048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800804a:	f7fe fcad 	bl	80069a8 <xQueueGenericSend>
 800804e:	6278      	str	r0, [r7, #36]	; 0x24
 8008050:	e012      	b.n	8008078 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008052:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <xTimerGenericCommand+0x98>)
 8008054:	6818      	ldr	r0, [r3, #0]
 8008056:	f107 0110 	add.w	r1, r7, #16
 800805a:	2300      	movs	r3, #0
 800805c:	2200      	movs	r2, #0
 800805e:	f7fe fca3 	bl	80069a8 <xQueueGenericSend>
 8008062:	6278      	str	r0, [r7, #36]	; 0x24
 8008064:	e008      	b.n	8008078 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008066:	4b07      	ldr	r3, [pc, #28]	; (8008084 <xTimerGenericCommand+0x98>)
 8008068:	6818      	ldr	r0, [r3, #0]
 800806a:	f107 0110 	add.w	r1, r7, #16
 800806e:	2300      	movs	r3, #0
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	f7fe fd97 	bl	8006ba4 <xQueueGenericSendFromISR>
 8008076:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800807a:	4618      	mov	r0, r3
 800807c:	3728      	adds	r7, #40	; 0x28
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20000d70 	.word	0x20000d70

08008088 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b088      	sub	sp, #32
 800808c:	af02      	add	r7, sp, #8
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008092:	4b1c      	ldr	r3, [pc, #112]	; (8008104 <prvProcessExpiredTimer+0x7c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	3304      	adds	r3, #4
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fe fb55 	bl	8006750 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d122      	bne.n	80080f4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	699a      	ldr	r2, [r3, #24]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	18d1      	adds	r1, r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	6978      	ldr	r0, [r7, #20]
 80080bc:	f000 f8c8 	bl	8008250 <prvInsertTimerInActiveList>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d016      	beq.n	80080f4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080c6:	2300      	movs	r3, #0
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	2300      	movs	r3, #0
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	2100      	movs	r1, #0
 80080d0:	6978      	ldr	r0, [r7, #20]
 80080d2:	f7ff ff8b 	bl	8007fec <xTimerGenericCommand>
 80080d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10a      	bne.n	80080f4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	60fb      	str	r3, [r7, #12]
}
 80080f0:	bf00      	nop
 80080f2:	e7fe      	b.n	80080f2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	6978      	ldr	r0, [r7, #20]
 80080fa:	4798      	blx	r3
}
 80080fc:	bf00      	nop
 80080fe:	3718      	adds	r7, #24
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	20000d68 	.word	0x20000d68

08008108 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008110:	f107 0308 	add.w	r3, r7, #8
 8008114:	4618      	mov	r0, r3
 8008116:	f000 f857 	bl	80081c8 <prvGetNextExpireTime>
 800811a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	4619      	mov	r1, r3
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 f803 	bl	800812c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008126:	f000 f8d5 	bl	80082d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800812a:	e7f1      	b.n	8008110 <prvTimerTask+0x8>

0800812c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008136:	f7ff fa4b 	bl	80075d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800813a:	f107 0308 	add.w	r3, r7, #8
 800813e:	4618      	mov	r0, r3
 8008140:	f000 f866 	bl	8008210 <prvSampleTimeNow>
 8008144:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d130      	bne.n	80081ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <prvProcessTimerOrBlockTask+0x3c>
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	429a      	cmp	r2, r3
 8008158:	d806      	bhi.n	8008168 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800815a:	f7ff fa47 	bl	80075ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800815e:	68f9      	ldr	r1, [r7, #12]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff ff91 	bl	8008088 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008166:	e024      	b.n	80081b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d008      	beq.n	8008180 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800816e:	4b13      	ldr	r3, [pc, #76]	; (80081bc <prvProcessTimerOrBlockTask+0x90>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	bf0c      	ite	eq
 8008178:	2301      	moveq	r3, #1
 800817a:	2300      	movne	r3, #0
 800817c:	b2db      	uxtb	r3, r3
 800817e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008180:	4b0f      	ldr	r3, [pc, #60]	; (80081c0 <prvProcessTimerOrBlockTask+0x94>)
 8008182:	6818      	ldr	r0, [r3, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	4619      	mov	r1, r3
 800818e:	f7fe ffb9 	bl	8007104 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008192:	f7ff fa2b 	bl	80075ec <xTaskResumeAll>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10a      	bne.n	80081b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800819c:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <prvProcessTimerOrBlockTask+0x98>)
 800819e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	f3bf 8f6f 	isb	sy
}
 80081ac:	e001      	b.n	80081b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80081ae:	f7ff fa1d 	bl	80075ec <xTaskResumeAll>
}
 80081b2:	bf00      	nop
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000d6c 	.word	0x20000d6c
 80081c0:	20000d70 	.word	0x20000d70
 80081c4:	e000ed04 	.word	0xe000ed04

080081c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80081d0:	4b0e      	ldr	r3, [pc, #56]	; (800820c <prvGetNextExpireTime+0x44>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bf0c      	ite	eq
 80081da:	2301      	moveq	r3, #1
 80081dc:	2300      	movne	r3, #0
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	461a      	mov	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d105      	bne.n	80081fa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081ee:	4b07      	ldr	r3, [pc, #28]	; (800820c <prvGetNextExpireTime+0x44>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	e001      	b.n	80081fe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081fe:	68fb      	ldr	r3, [r7, #12]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	bc80      	pop	{r7}
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	20000d68 	.word	0x20000d68

08008210 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008218:	f7ff fa86 	bl	8007728 <xTaskGetTickCount>
 800821c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800821e:	4b0b      	ldr	r3, [pc, #44]	; (800824c <prvSampleTimeNow+0x3c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	429a      	cmp	r2, r3
 8008226:	d205      	bcs.n	8008234 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008228:	f000 f908 	bl	800843c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	e002      	b.n	800823a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800823a:	4a04      	ldr	r2, [pc, #16]	; (800824c <prvSampleTimeNow+0x3c>)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008240:	68fb      	ldr	r3, [r7, #12]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20000d78 	.word	0x20000d78

08008250 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800825e:	2300      	movs	r3, #0
 8008260:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	429a      	cmp	r2, r3
 8008274:	d812      	bhi.n	800829c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	1ad2      	subs	r2, r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	429a      	cmp	r2, r3
 8008282:	d302      	bcc.n	800828a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008284:	2301      	movs	r3, #1
 8008286:	617b      	str	r3, [r7, #20]
 8008288:	e01b      	b.n	80082c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800828a:	4b10      	ldr	r3, [pc, #64]	; (80082cc <prvInsertTimerInActiveList+0x7c>)
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3304      	adds	r3, #4
 8008292:	4619      	mov	r1, r3
 8008294:	4610      	mov	r0, r2
 8008296:	f7fe fa23 	bl	80066e0 <vListInsert>
 800829a:	e012      	b.n	80082c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d206      	bcs.n	80082b2 <prvInsertTimerInActiveList+0x62>
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d302      	bcc.n	80082b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80082ac:	2301      	movs	r3, #1
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	e007      	b.n	80082c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082b2:	4b07      	ldr	r3, [pc, #28]	; (80082d0 <prvInsertTimerInActiveList+0x80>)
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3304      	adds	r3, #4
 80082ba:	4619      	mov	r1, r3
 80082bc:	4610      	mov	r0, r2
 80082be:	f7fe fa0f 	bl	80066e0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80082c2:	697b      	ldr	r3, [r7, #20]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	20000d6c 	.word	0x20000d6c
 80082d0:	20000d68 	.word	0x20000d68

080082d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08e      	sub	sp, #56	; 0x38
 80082d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082da:	e09d      	b.n	8008418 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da18      	bge.n	8008314 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80082e2:	1d3b      	adds	r3, r7, #4
 80082e4:	3304      	adds	r3, #4
 80082e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80082e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10a      	bne.n	8008304 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	61fb      	str	r3, [r7, #28]
}
 8008300:	bf00      	nop
 8008302:	e7fe      	b.n	8008302 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800830a:	6850      	ldr	r0, [r2, #4]
 800830c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800830e:	6892      	ldr	r2, [r2, #8]
 8008310:	4611      	mov	r1, r2
 8008312:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	db7d      	blt.n	8008416 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d004      	beq.n	8008330 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008328:	3304      	adds	r3, #4
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe fa10 	bl	8006750 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008330:	463b      	mov	r3, r7
 8008332:	4618      	mov	r0, r3
 8008334:	f7ff ff6c 	bl	8008210 <prvSampleTimeNow>
 8008338:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b09      	cmp	r3, #9
 800833e:	d86b      	bhi.n	8008418 <prvProcessReceivedCommands+0x144>
 8008340:	a201      	add	r2, pc, #4	; (adr r2, 8008348 <prvProcessReceivedCommands+0x74>)
 8008342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008346:	bf00      	nop
 8008348:	08008371 	.word	0x08008371
 800834c:	08008371 	.word	0x08008371
 8008350:	08008371 	.word	0x08008371
 8008354:	08008419 	.word	0x08008419
 8008358:	080083cd 	.word	0x080083cd
 800835c:	08008405 	.word	0x08008405
 8008360:	08008371 	.word	0x08008371
 8008364:	08008371 	.word	0x08008371
 8008368:	08008419 	.word	0x08008419
 800836c:	080083cd 	.word	0x080083cd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	18d1      	adds	r1, r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800837c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800837e:	f7ff ff67 	bl	8008250 <prvInsertTimerInActiveList>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d047      	beq.n	8008418 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800838e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d13f      	bne.n	8008418 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	441a      	add	r2, r3
 80083a0:	2300      	movs	r3, #0
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	2300      	movs	r3, #0
 80083a6:	2100      	movs	r1, #0
 80083a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083aa:	f7ff fe1f 	bl	8007fec <xTimerGenericCommand>
 80083ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d130      	bne.n	8008418 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	61bb      	str	r3, [r7, #24]
}
 80083c8:	bf00      	nop
 80083ca:	e7fe      	b.n	80083ca <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10a      	bne.n	80083f0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	617b      	str	r3, [r7, #20]
}
 80083ec:	bf00      	nop
 80083ee:	e7fe      	b.n	80083ee <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f2:	699a      	ldr	r2, [r3, #24]
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	18d1      	adds	r1, r2, r3
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083fe:	f7ff ff27 	bl	8008250 <prvInsertTimerInActiveList>
					break;
 8008402:	e009      	b.n	8008418 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008406:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800840a:	2b00      	cmp	r3, #0
 800840c:	d104      	bne.n	8008418 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800840e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008410:	f000 fb68 	bl	8008ae4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008414:	e000      	b.n	8008418 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008416:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008418:	4b07      	ldr	r3, [pc, #28]	; (8008438 <prvProcessReceivedCommands+0x164>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	1d39      	adds	r1, r7, #4
 800841e:	2200      	movs	r2, #0
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe fc57 	bl	8006cd4 <xQueueReceive>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	f47f af57 	bne.w	80082dc <prvProcessReceivedCommands+0x8>
	}
}
 800842e:	bf00      	nop
 8008430:	bf00      	nop
 8008432:	3730      	adds	r7, #48	; 0x30
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	20000d70 	.word	0x20000d70

0800843c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008442:	e045      	b.n	80084d0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008444:	4b2c      	ldr	r3, [pc, #176]	; (80084f8 <prvSwitchTimerLists+0xbc>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800844e:	4b2a      	ldr	r3, [pc, #168]	; (80084f8 <prvSwitchTimerLists+0xbc>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3304      	adds	r3, #4
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe f977 	bl	8006750 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d12e      	bne.n	80084d0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	4413      	add	r3, r2
 800847a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	429a      	cmp	r2, r3
 8008482:	d90e      	bls.n	80084a2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008490:	4b19      	ldr	r3, [pc, #100]	; (80084f8 <prvSwitchTimerLists+0xbc>)
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	3304      	adds	r3, #4
 8008498:	4619      	mov	r1, r3
 800849a:	4610      	mov	r0, r2
 800849c:	f7fe f920 	bl	80066e0 <vListInsert>
 80084a0:	e016      	b.n	80084d0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084a2:	2300      	movs	r3, #0
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	2300      	movs	r3, #0
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	2100      	movs	r1, #0
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f7ff fd9d 	bl	8007fec <xTimerGenericCommand>
 80084b2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10a      	bne.n	80084d0 <prvSwitchTimerLists+0x94>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	603b      	str	r3, [r7, #0]
}
 80084cc:	bf00      	nop
 80084ce:	e7fe      	b.n	80084ce <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084d0:	4b09      	ldr	r3, [pc, #36]	; (80084f8 <prvSwitchTimerLists+0xbc>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1b4      	bne.n	8008444 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084da:	4b07      	ldr	r3, [pc, #28]	; (80084f8 <prvSwitchTimerLists+0xbc>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084e0:	4b06      	ldr	r3, [pc, #24]	; (80084fc <prvSwitchTimerLists+0xc0>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a04      	ldr	r2, [pc, #16]	; (80084f8 <prvSwitchTimerLists+0xbc>)
 80084e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084e8:	4a04      	ldr	r2, [pc, #16]	; (80084fc <prvSwitchTimerLists+0xc0>)
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	6013      	str	r3, [r2, #0]
}
 80084ee:	bf00      	nop
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20000d68 	.word	0x20000d68
 80084fc:	20000d6c 	.word	0x20000d6c

08008500 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008506:	f000 f929 	bl	800875c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800850a:	4b15      	ldr	r3, [pc, #84]	; (8008560 <prvCheckForValidListAndQueue+0x60>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d120      	bne.n	8008554 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008512:	4814      	ldr	r0, [pc, #80]	; (8008564 <prvCheckForValidListAndQueue+0x64>)
 8008514:	f7fe f896 	bl	8006644 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008518:	4813      	ldr	r0, [pc, #76]	; (8008568 <prvCheckForValidListAndQueue+0x68>)
 800851a:	f7fe f893 	bl	8006644 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800851e:	4b13      	ldr	r3, [pc, #76]	; (800856c <prvCheckForValidListAndQueue+0x6c>)
 8008520:	4a10      	ldr	r2, [pc, #64]	; (8008564 <prvCheckForValidListAndQueue+0x64>)
 8008522:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008524:	4b12      	ldr	r3, [pc, #72]	; (8008570 <prvCheckForValidListAndQueue+0x70>)
 8008526:	4a10      	ldr	r2, [pc, #64]	; (8008568 <prvCheckForValidListAndQueue+0x68>)
 8008528:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800852a:	2300      	movs	r3, #0
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	4b11      	ldr	r3, [pc, #68]	; (8008574 <prvCheckForValidListAndQueue+0x74>)
 8008530:	4a11      	ldr	r2, [pc, #68]	; (8008578 <prvCheckForValidListAndQueue+0x78>)
 8008532:	2110      	movs	r1, #16
 8008534:	200a      	movs	r0, #10
 8008536:	f7fe f99d 	bl	8006874 <xQueueGenericCreateStatic>
 800853a:	4603      	mov	r3, r0
 800853c:	4a08      	ldr	r2, [pc, #32]	; (8008560 <prvCheckForValidListAndQueue+0x60>)
 800853e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <prvCheckForValidListAndQueue+0x60>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d005      	beq.n	8008554 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008548:	4b05      	ldr	r3, [pc, #20]	; (8008560 <prvCheckForValidListAndQueue+0x60>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	490b      	ldr	r1, [pc, #44]	; (800857c <prvCheckForValidListAndQueue+0x7c>)
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe fdb0 	bl	80070b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008554:	f000 f932 	bl	80087bc <vPortExitCritical>
}
 8008558:	bf00      	nop
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20000d70 	.word	0x20000d70
 8008564:	20000d40 	.word	0x20000d40
 8008568:	20000d54 	.word	0x20000d54
 800856c:	20000d68 	.word	0x20000d68
 8008570:	20000d6c 	.word	0x20000d6c
 8008574:	20000e1c 	.word	0x20000e1c
 8008578:	20000d7c 	.word	0x20000d7c
 800857c:	08009550 	.word	0x08009550

08008580 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3b04      	subs	r3, #4
 8008590:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3b04      	subs	r3, #4
 800859e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f023 0201 	bic.w	r2, r3, #1
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3b04      	subs	r3, #4
 80085ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085b0:	4a08      	ldr	r2, [pc, #32]	; (80085d4 <pxPortInitialiseStack+0x54>)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3b14      	subs	r3, #20
 80085ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3b20      	subs	r3, #32
 80085c6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085c8:	68fb      	ldr	r3, [r7, #12]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr
 80085d4:	080085d9 	.word	0x080085d9

080085d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80085de:	2300      	movs	r3, #0
 80085e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085e2:	4b12      	ldr	r3, [pc, #72]	; (800862c <prvTaskExitError+0x54>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ea:	d00a      	beq.n	8008602 <prvTaskExitError+0x2a>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	60fb      	str	r3, [r7, #12]
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <prvTaskExitError+0x28>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	60bb      	str	r3, [r7, #8]
}
 8008614:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008616:	bf00      	nop
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d0fc      	beq.n	8008618 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800861e:	bf00      	nop
 8008620:	bf00      	nop
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	bc80      	pop	{r7}
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	20000108 	.word	0x20000108

08008630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008630:	4b07      	ldr	r3, [pc, #28]	; (8008650 <pxCurrentTCBConst2>)
 8008632:	6819      	ldr	r1, [r3, #0]
 8008634:	6808      	ldr	r0, [r1, #0]
 8008636:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800863a:	f380 8809 	msr	PSP, r0
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f04f 0000 	mov.w	r0, #0
 8008646:	f380 8811 	msr	BASEPRI, r0
 800864a:	f04e 0e0d 	orr.w	lr, lr, #13
 800864e:	4770      	bx	lr

08008650 <pxCurrentTCBConst2>:
 8008650:	20000840 	.word	0x20000840
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop

08008658 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008658:	4806      	ldr	r0, [pc, #24]	; (8008674 <prvPortStartFirstTask+0x1c>)
 800865a:	6800      	ldr	r0, [r0, #0]
 800865c:	6800      	ldr	r0, [r0, #0]
 800865e:	f380 8808 	msr	MSP, r0
 8008662:	b662      	cpsie	i
 8008664:	b661      	cpsie	f
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	df00      	svc	0
 8008670:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008672:	bf00      	nop
 8008674:	e000ed08 	.word	0xe000ed08

08008678 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800867e:	4b32      	ldr	r3, [pc, #200]	; (8008748 <xPortStartScheduler+0xd0>)
 8008680:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	22ff      	movs	r2, #255	; 0xff
 800868e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	b2db      	uxtb	r3, r3
 8008696:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	b2db      	uxtb	r3, r3
 800869c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	4b2a      	ldr	r3, [pc, #168]	; (800874c <xPortStartScheduler+0xd4>)
 80086a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086a6:	4b2a      	ldr	r3, [pc, #168]	; (8008750 <xPortStartScheduler+0xd8>)
 80086a8:	2207      	movs	r2, #7
 80086aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086ac:	e009      	b.n	80086c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80086ae:	4b28      	ldr	r3, [pc, #160]	; (8008750 <xPortStartScheduler+0xd8>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3b01      	subs	r3, #1
 80086b4:	4a26      	ldr	r2, [pc, #152]	; (8008750 <xPortStartScheduler+0xd8>)
 80086b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086b8:	78fb      	ldrb	r3, [r7, #3]
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	005b      	lsls	r3, r3, #1
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086c2:	78fb      	ldrb	r3, [r7, #3]
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ca:	2b80      	cmp	r3, #128	; 0x80
 80086cc:	d0ef      	beq.n	80086ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086ce:	4b20      	ldr	r3, [pc, #128]	; (8008750 <xPortStartScheduler+0xd8>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f1c3 0307 	rsb	r3, r3, #7
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	d00a      	beq.n	80086f0 <xPortStartScheduler+0x78>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	60bb      	str	r3, [r7, #8]
}
 80086ec:	bf00      	nop
 80086ee:	e7fe      	b.n	80086ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086f0:	4b17      	ldr	r3, [pc, #92]	; (8008750 <xPortStartScheduler+0xd8>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	021b      	lsls	r3, r3, #8
 80086f6:	4a16      	ldr	r2, [pc, #88]	; (8008750 <xPortStartScheduler+0xd8>)
 80086f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086fa:	4b15      	ldr	r3, [pc, #84]	; (8008750 <xPortStartScheduler+0xd8>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008702:	4a13      	ldr	r2, [pc, #76]	; (8008750 <xPortStartScheduler+0xd8>)
 8008704:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	b2da      	uxtb	r2, r3
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800870e:	4b11      	ldr	r3, [pc, #68]	; (8008754 <xPortStartScheduler+0xdc>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a10      	ldr	r2, [pc, #64]	; (8008754 <xPortStartScheduler+0xdc>)
 8008714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008718:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800871a:	4b0e      	ldr	r3, [pc, #56]	; (8008754 <xPortStartScheduler+0xdc>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a0d      	ldr	r2, [pc, #52]	; (8008754 <xPortStartScheduler+0xdc>)
 8008720:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008724:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008726:	f000 f8b9 	bl	800889c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800872a:	4b0b      	ldr	r3, [pc, #44]	; (8008758 <xPortStartScheduler+0xe0>)
 800872c:	2200      	movs	r2, #0
 800872e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008730:	f7ff ff92 	bl	8008658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008734:	f7ff f8c4 	bl	80078c0 <vTaskSwitchContext>
	prvTaskExitError();
 8008738:	f7ff ff4e 	bl	80085d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	e000e400 	.word	0xe000e400
 800874c:	20000e6c 	.word	0x20000e6c
 8008750:	20000e70 	.word	0x20000e70
 8008754:	e000ed20 	.word	0xe000ed20
 8008758:	20000108 	.word	0x20000108

0800875c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	607b      	str	r3, [r7, #4]
}
 8008774:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008776:	4b0f      	ldr	r3, [pc, #60]	; (80087b4 <vPortEnterCritical+0x58>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3301      	adds	r3, #1
 800877c:	4a0d      	ldr	r2, [pc, #52]	; (80087b4 <vPortEnterCritical+0x58>)
 800877e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008780:	4b0c      	ldr	r3, [pc, #48]	; (80087b4 <vPortEnterCritical+0x58>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d10f      	bne.n	80087a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008788:	4b0b      	ldr	r3, [pc, #44]	; (80087b8 <vPortEnterCritical+0x5c>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	603b      	str	r3, [r7, #0]
}
 80087a4:	bf00      	nop
 80087a6:	e7fe      	b.n	80087a6 <vPortEnterCritical+0x4a>
	}
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bc80      	pop	{r7}
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	20000108 	.word	0x20000108
 80087b8:	e000ed04 	.word	0xe000ed04

080087bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80087c2:	4b11      	ldr	r3, [pc, #68]	; (8008808 <vPortExitCritical+0x4c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10a      	bne.n	80087e0 <vPortExitCritical+0x24>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	607b      	str	r3, [r7, #4]
}
 80087dc:	bf00      	nop
 80087de:	e7fe      	b.n	80087de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80087e0:	4b09      	ldr	r3, [pc, #36]	; (8008808 <vPortExitCritical+0x4c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3b01      	subs	r3, #1
 80087e6:	4a08      	ldr	r2, [pc, #32]	; (8008808 <vPortExitCritical+0x4c>)
 80087e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087ea:	4b07      	ldr	r3, [pc, #28]	; (8008808 <vPortExitCritical+0x4c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d105      	bne.n	80087fe <vPortExitCritical+0x42>
 80087f2:	2300      	movs	r3, #0
 80087f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	f383 8811 	msr	BASEPRI, r3
}
 80087fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80087fe:	bf00      	nop
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr
 8008808:	20000108 	.word	0x20000108
 800880c:	00000000 	.word	0x00000000

08008810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008810:	f3ef 8009 	mrs	r0, PSP
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	4b0d      	ldr	r3, [pc, #52]	; (8008850 <pxCurrentTCBConst>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008820:	6010      	str	r0, [r2, #0]
 8008822:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008826:	f04f 0050 	mov.w	r0, #80	; 0x50
 800882a:	f380 8811 	msr	BASEPRI, r0
 800882e:	f7ff f847 	bl	80078c0 <vTaskSwitchContext>
 8008832:	f04f 0000 	mov.w	r0, #0
 8008836:	f380 8811 	msr	BASEPRI, r0
 800883a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800883e:	6819      	ldr	r1, [r3, #0]
 8008840:	6808      	ldr	r0, [r1, #0]
 8008842:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008846:	f380 8809 	msr	PSP, r0
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	4770      	bx	lr

08008850 <pxCurrentTCBConst>:
 8008850:	20000840 	.word	0x20000840
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop

08008858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	607b      	str	r3, [r7, #4]
}
 8008870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008872:	f7fe ff67 	bl	8007744 <xTaskIncrementTick>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800887c:	4b06      	ldr	r3, [pc, #24]	; (8008898 <xPortSysTickHandler+0x40>)
 800887e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008882:	601a      	str	r2, [r3, #0]
 8008884:	2300      	movs	r3, #0
 8008886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	f383 8811 	msr	BASEPRI, r3
}
 800888e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800889c:	b480      	push	{r7}
 800889e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80088a0:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <vPortSetupTimerInterrupt+0x30>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80088a6:	4b0a      	ldr	r3, [pc, #40]	; (80088d0 <vPortSetupTimerInterrupt+0x34>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80088ac:	4b09      	ldr	r3, [pc, #36]	; (80088d4 <vPortSetupTimerInterrupt+0x38>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a09      	ldr	r2, [pc, #36]	; (80088d8 <vPortSetupTimerInterrupt+0x3c>)
 80088b2:	fba2 2303 	umull	r2, r3, r2, r3
 80088b6:	099b      	lsrs	r3, r3, #6
 80088b8:	4a08      	ldr	r2, [pc, #32]	; (80088dc <vPortSetupTimerInterrupt+0x40>)
 80088ba:	3b01      	subs	r3, #1
 80088bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80088be:	4b03      	ldr	r3, [pc, #12]	; (80088cc <vPortSetupTimerInterrupt+0x30>)
 80088c0:	2207      	movs	r2, #7
 80088c2:	601a      	str	r2, [r3, #0]
}
 80088c4:	bf00      	nop
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bc80      	pop	{r7}
 80088ca:	4770      	bx	lr
 80088cc:	e000e010 	.word	0xe000e010
 80088d0:	e000e018 	.word	0xe000e018
 80088d4:	20000000 	.word	0x20000000
 80088d8:	10624dd3 	.word	0x10624dd3
 80088dc:	e000e014 	.word	0xe000e014

080088e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088e6:	f3ef 8305 	mrs	r3, IPSR
 80088ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b0f      	cmp	r3, #15
 80088f0:	d914      	bls.n	800891c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088f2:	4a16      	ldr	r2, [pc, #88]	; (800894c <vPortValidateInterruptPriority+0x6c>)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4413      	add	r3, r2
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088fc:	4b14      	ldr	r3, [pc, #80]	; (8008950 <vPortValidateInterruptPriority+0x70>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	7afa      	ldrb	r2, [r7, #11]
 8008902:	429a      	cmp	r2, r3
 8008904:	d20a      	bcs.n	800891c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890a:	f383 8811 	msr	BASEPRI, r3
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	607b      	str	r3, [r7, #4]
}
 8008918:	bf00      	nop
 800891a:	e7fe      	b.n	800891a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800891c:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <vPortValidateInterruptPriority+0x74>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008924:	4b0c      	ldr	r3, [pc, #48]	; (8008958 <vPortValidateInterruptPriority+0x78>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	429a      	cmp	r2, r3
 800892a:	d90a      	bls.n	8008942 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800892c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008930:	f383 8811 	msr	BASEPRI, r3
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	603b      	str	r3, [r7, #0]
}
 800893e:	bf00      	nop
 8008940:	e7fe      	b.n	8008940 <vPortValidateInterruptPriority+0x60>
	}
 8008942:	bf00      	nop
 8008944:	3714      	adds	r7, #20
 8008946:	46bd      	mov	sp, r7
 8008948:	bc80      	pop	{r7}
 800894a:	4770      	bx	lr
 800894c:	e000e3f0 	.word	0xe000e3f0
 8008950:	20000e6c 	.word	0x20000e6c
 8008954:	e000ed0c 	.word	0xe000ed0c
 8008958:	20000e70 	.word	0x20000e70

0800895c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08a      	sub	sp, #40	; 0x28
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008964:	2300      	movs	r3, #0
 8008966:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008968:	f7fe fe32 	bl	80075d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800896c:	4b58      	ldr	r3, [pc, #352]	; (8008ad0 <pvPortMalloc+0x174>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008974:	f000 f910 	bl	8008b98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008978:	4b56      	ldr	r3, [pc, #344]	; (8008ad4 <pvPortMalloc+0x178>)
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4013      	ands	r3, r2
 8008980:	2b00      	cmp	r3, #0
 8008982:	f040 808e 	bne.w	8008aa2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01d      	beq.n	80089c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800898c:	2208      	movs	r2, #8
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4413      	add	r3, r2
 8008992:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	2b00      	cmp	r3, #0
 800899c:	d014      	beq.n	80089c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f023 0307 	bic.w	r3, r3, #7
 80089a4:	3308      	adds	r3, #8
 80089a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f003 0307 	and.w	r3, r3, #7
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <pvPortMalloc+0x6c>
	__asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	617b      	str	r3, [r7, #20]
}
 80089c4:	bf00      	nop
 80089c6:	e7fe      	b.n	80089c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d069      	beq.n	8008aa2 <pvPortMalloc+0x146>
 80089ce:	4b42      	ldr	r3, [pc, #264]	; (8008ad8 <pvPortMalloc+0x17c>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d864      	bhi.n	8008aa2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089d8:	4b40      	ldr	r3, [pc, #256]	; (8008adc <pvPortMalloc+0x180>)
 80089da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089dc:	4b3f      	ldr	r3, [pc, #252]	; (8008adc <pvPortMalloc+0x180>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089e2:	e004      	b.n	80089ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d903      	bls.n	8008a00 <pvPortMalloc+0xa4>
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1f1      	bne.n	80089e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008a00:	4b33      	ldr	r3, [pc, #204]	; (8008ad0 <pvPortMalloc+0x174>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d04b      	beq.n	8008aa2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2208      	movs	r2, #8
 8008a10:	4413      	add	r3, r2
 8008a12:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	1ad2      	subs	r2, r2, r3
 8008a24:	2308      	movs	r3, #8
 8008a26:	005b      	lsls	r3, r3, #1
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d91f      	bls.n	8008a6c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4413      	add	r3, r2
 8008a32:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00a      	beq.n	8008a54 <pvPortMalloc+0xf8>
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	613b      	str	r3, [r7, #16]
}
 8008a50:	bf00      	nop
 8008a52:	e7fe      	b.n	8008a52 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	1ad2      	subs	r2, r2, r3
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a66:	69b8      	ldr	r0, [r7, #24]
 8008a68:	f000 f8f8 	bl	8008c5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a6c:	4b1a      	ldr	r3, [pc, #104]	; (8008ad8 <pvPortMalloc+0x17c>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	4a18      	ldr	r2, [pc, #96]	; (8008ad8 <pvPortMalloc+0x17c>)
 8008a78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a7a:	4b17      	ldr	r3, [pc, #92]	; (8008ad8 <pvPortMalloc+0x17c>)
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	4b18      	ldr	r3, [pc, #96]	; (8008ae0 <pvPortMalloc+0x184>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d203      	bcs.n	8008a8e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a86:	4b14      	ldr	r3, [pc, #80]	; (8008ad8 <pvPortMalloc+0x17c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a15      	ldr	r2, [pc, #84]	; (8008ae0 <pvPortMalloc+0x184>)
 8008a8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	4b10      	ldr	r3, [pc, #64]	; (8008ad4 <pvPortMalloc+0x178>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	431a      	orrs	r2, r3
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008aa2:	f7fe fda3 	bl	80075ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	f003 0307 	and.w	r3, r3, #7
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <pvPortMalloc+0x16a>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	60fb      	str	r3, [r7, #12]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <pvPortMalloc+0x168>
	return pvReturn;
 8008ac6:	69fb      	ldr	r3, [r7, #28]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3728      	adds	r7, #40	; 0x28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	20001a7c 	.word	0x20001a7c
 8008ad4:	20001a88 	.word	0x20001a88
 8008ad8:	20001a80 	.word	0x20001a80
 8008adc:	20001a74 	.word	0x20001a74
 8008ae0:	20001a84 	.word	0x20001a84

08008ae4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d048      	beq.n	8008b88 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008af6:	2308      	movs	r3, #8
 8008af8:	425b      	negs	r3, r3
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	4413      	add	r3, r2
 8008afe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	4b21      	ldr	r3, [pc, #132]	; (8008b90 <vPortFree+0xac>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10a      	bne.n	8008b28 <vPortFree+0x44>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	60fb      	str	r3, [r7, #12]
}
 8008b24:	bf00      	nop
 8008b26:	e7fe      	b.n	8008b26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00a      	beq.n	8008b46 <vPortFree+0x62>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	60bb      	str	r3, [r7, #8]
}
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	685a      	ldr	r2, [r3, #4]
 8008b4a:	4b11      	ldr	r3, [pc, #68]	; (8008b90 <vPortFree+0xac>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d019      	beq.n	8008b88 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d115      	bne.n	8008b88 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	685a      	ldr	r2, [r3, #4]
 8008b60:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <vPortFree+0xac>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	43db      	mvns	r3, r3
 8008b66:	401a      	ands	r2, r3
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b6c:	f7fe fd30 	bl	80075d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	4b07      	ldr	r3, [pc, #28]	; (8008b94 <vPortFree+0xb0>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4413      	add	r3, r2
 8008b7a:	4a06      	ldr	r2, [pc, #24]	; (8008b94 <vPortFree+0xb0>)
 8008b7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b7e:	6938      	ldr	r0, [r7, #16]
 8008b80:	f000 f86c 	bl	8008c5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b84:	f7fe fd32 	bl	80075ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b88:	bf00      	nop
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20001a88 	.word	0x20001a88
 8008b94:	20001a80 	.word	0x20001a80

08008b98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008ba2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ba4:	4b27      	ldr	r3, [pc, #156]	; (8008c44 <prvHeapInit+0xac>)
 8008ba6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f003 0307 	and.w	r3, r3, #7
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00c      	beq.n	8008bcc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	3307      	adds	r3, #7
 8008bb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 0307 	bic.w	r3, r3, #7
 8008bbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	4a1f      	ldr	r2, [pc, #124]	; (8008c44 <prvHeapInit+0xac>)
 8008bc8:	4413      	add	r3, r2
 8008bca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bd0:	4a1d      	ldr	r2, [pc, #116]	; (8008c48 <prvHeapInit+0xb0>)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bd6:	4b1c      	ldr	r3, [pc, #112]	; (8008c48 <prvHeapInit+0xb0>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	4413      	add	r3, r2
 8008be2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008be4:	2208      	movs	r2, #8
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	1a9b      	subs	r3, r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f023 0307 	bic.w	r3, r3, #7
 8008bf2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4a15      	ldr	r2, [pc, #84]	; (8008c4c <prvHeapInit+0xb4>)
 8008bf8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bfa:	4b14      	ldr	r3, [pc, #80]	; (8008c4c <prvHeapInit+0xb4>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c02:	4b12      	ldr	r3, [pc, #72]	; (8008c4c <prvHeapInit+0xb4>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2200      	movs	r2, #0
 8008c08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	1ad2      	subs	r2, r2, r3
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c18:	4b0c      	ldr	r3, [pc, #48]	; (8008c4c <prvHeapInit+0xb4>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	4a0a      	ldr	r2, [pc, #40]	; (8008c50 <prvHeapInit+0xb8>)
 8008c26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	4a09      	ldr	r2, [pc, #36]	; (8008c54 <prvHeapInit+0xbc>)
 8008c2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c30:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <prvHeapInit+0xc0>)
 8008c32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c36:	601a      	str	r2, [r3, #0]
}
 8008c38:	bf00      	nop
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bc80      	pop	{r7}
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	20000e74 	.word	0x20000e74
 8008c48:	20001a74 	.word	0x20001a74
 8008c4c:	20001a7c 	.word	0x20001a7c
 8008c50:	20001a84 	.word	0x20001a84
 8008c54:	20001a80 	.word	0x20001a80
 8008c58:	20001a88 	.word	0x20001a88

08008c5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c64:	4b27      	ldr	r3, [pc, #156]	; (8008d04 <prvInsertBlockIntoFreeList+0xa8>)
 8008c66:	60fb      	str	r3, [r7, #12]
 8008c68:	e002      	b.n	8008c70 <prvInsertBlockIntoFreeList+0x14>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	60fb      	str	r3, [r7, #12]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d8f7      	bhi.n	8008c6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	4413      	add	r3, r2
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d108      	bne.n	8008c9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	441a      	add	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	441a      	add	r2, r3
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d118      	bne.n	8008ce4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	4b14      	ldr	r3, [pc, #80]	; (8008d08 <prvInsertBlockIntoFreeList+0xac>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d00d      	beq.n	8008cda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685a      	ldr	r2, [r3, #4]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	441a      	add	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	e008      	b.n	8008cec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cda:	4b0b      	ldr	r3, [pc, #44]	; (8008d08 <prvInsertBlockIntoFreeList+0xac>)
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	e003      	b.n	8008cec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d002      	beq.n	8008cfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cfa:	bf00      	nop
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bc80      	pop	{r7}
 8008d02:	4770      	bx	lr
 8008d04:	20001a74 	.word	0x20001a74
 8008d08:	20001a7c 	.word	0x20001a7c

08008d0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d10:	2200      	movs	r2, #0
 8008d12:	490e      	ldr	r1, [pc, #56]	; (8008d4c <MX_USB_DEVICE_Init+0x40>)
 8008d14:	480e      	ldr	r0, [pc, #56]	; (8008d50 <MX_USB_DEVICE_Init+0x44>)
 8008d16:	f7fc faa9 	bl	800526c <USBD_Init>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d001      	beq.n	8008d24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d20:	f7f7 fb7e 	bl	8000420 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008d24:	490b      	ldr	r1, [pc, #44]	; (8008d54 <MX_USB_DEVICE_Init+0x48>)
 8008d26:	480a      	ldr	r0, [pc, #40]	; (8008d50 <MX_USB_DEVICE_Init+0x44>)
 8008d28:	f7fc facb 	bl	80052c2 <USBD_RegisterClass>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d32:	f7f7 fb75 	bl	8000420 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d36:	4806      	ldr	r0, [pc, #24]	; (8008d50 <MX_USB_DEVICE_Init+0x44>)
 8008d38:	f7fc fadc 	bl	80052f4 <USBD_Start>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008d42:	f7f7 fb6d 	bl	8000420 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d46:	bf00      	nop
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	2000010c 	.word	0x2000010c
 8008d50:	20001af0 	.word	0x20001af0
 8008d54:	2000000c 	.word	0x2000000c

08008d58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	6039      	str	r1, [r7, #0]
 8008d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2212      	movs	r2, #18
 8008d68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d6a:	4b03      	ldr	r3, [pc, #12]	; (8008d78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bc80      	pop	{r7}
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	20000128 	.word	0x20000128

08008d7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	6039      	str	r1, [r7, #0]
 8008d86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2204      	movs	r2, #4
 8008d8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d8e:	4b03      	ldr	r3, [pc, #12]	; (8008d9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bc80      	pop	{r7}
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	2000013c 	.word	0x2000013c

08008da0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	6039      	str	r1, [r7, #0]
 8008daa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dac:	79fb      	ldrb	r3, [r7, #7]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d105      	bne.n	8008dbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	4907      	ldr	r1, [pc, #28]	; (8008dd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008db6:	4808      	ldr	r0, [pc, #32]	; (8008dd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008db8:	f7fd fa14 	bl	80061e4 <USBD_GetString>
 8008dbc:	e004      	b.n	8008dc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	4904      	ldr	r1, [pc, #16]	; (8008dd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008dc2:	4805      	ldr	r0, [pc, #20]	; (8008dd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008dc4:	f7fd fa0e 	bl	80061e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dc8:	4b02      	ldr	r3, [pc, #8]	; (8008dd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20001db4 	.word	0x20001db4
 8008dd8:	08009558 	.word	0x08009558

08008ddc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	6039      	str	r1, [r7, #0]
 8008de6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	4904      	ldr	r1, [pc, #16]	; (8008dfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008dec:	4804      	ldr	r0, [pc, #16]	; (8008e00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008dee:	f7fd f9f9 	bl	80061e4 <USBD_GetString>
  return USBD_StrDesc;
 8008df2:	4b02      	ldr	r3, [pc, #8]	; (8008dfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	20001db4 	.word	0x20001db4
 8008e00:	08009568 	.word	0x08009568

08008e04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	6039      	str	r1, [r7, #0]
 8008e0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	221a      	movs	r2, #26
 8008e14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e16:	f000 f843 	bl	8008ea0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e1a:	4b02      	ldr	r3, [pc, #8]	; (8008e24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	20000140 	.word	0x20000140

08008e28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	4603      	mov	r3, r0
 8008e30:	6039      	str	r1, [r7, #0]
 8008e32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e34:	79fb      	ldrb	r3, [r7, #7]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d105      	bne.n	8008e46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e3a:	683a      	ldr	r2, [r7, #0]
 8008e3c:	4907      	ldr	r1, [pc, #28]	; (8008e5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e3e:	4808      	ldr	r0, [pc, #32]	; (8008e60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e40:	f7fd f9d0 	bl	80061e4 <USBD_GetString>
 8008e44:	e004      	b.n	8008e50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	4904      	ldr	r1, [pc, #16]	; (8008e5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e4a:	4805      	ldr	r0, [pc, #20]	; (8008e60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e4c:	f7fd f9ca 	bl	80061e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e50:	4b02      	ldr	r3, [pc, #8]	; (8008e5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20001db4 	.word	0x20001db4
 8008e60:	0800957c 	.word	0x0800957c

08008e64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	6039      	str	r1, [r7, #0]
 8008e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d105      	bne.n	8008e82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	4907      	ldr	r1, [pc, #28]	; (8008e98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e7a:	4808      	ldr	r0, [pc, #32]	; (8008e9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e7c:	f7fd f9b2 	bl	80061e4 <USBD_GetString>
 8008e80:	e004      	b.n	8008e8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	4904      	ldr	r1, [pc, #16]	; (8008e98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e86:	4805      	ldr	r0, [pc, #20]	; (8008e9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e88:	f7fd f9ac 	bl	80061e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e8c:	4b02      	ldr	r3, [pc, #8]	; (8008e98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20001db4 	.word	0x20001db4
 8008e9c:	08009588 	.word	0x08009588

08008ea0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ea6:	4b0f      	ldr	r3, [pc, #60]	; (8008ee4 <Get_SerialNum+0x44>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008eac:	4b0e      	ldr	r3, [pc, #56]	; (8008ee8 <Get_SerialNum+0x48>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008eb2:	4b0e      	ldr	r3, [pc, #56]	; (8008eec <Get_SerialNum+0x4c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d009      	beq.n	8008eda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ec6:	2208      	movs	r2, #8
 8008ec8:	4909      	ldr	r1, [pc, #36]	; (8008ef0 <Get_SerialNum+0x50>)
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 f814 	bl	8008ef8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ed0:	2204      	movs	r2, #4
 8008ed2:	4908      	ldr	r1, [pc, #32]	; (8008ef4 <Get_SerialNum+0x54>)
 8008ed4:	68b8      	ldr	r0, [r7, #8]
 8008ed6:	f000 f80f 	bl	8008ef8 <IntToUnicode>
  }
}
 8008eda:	bf00      	nop
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	1ffff7e8 	.word	0x1ffff7e8
 8008ee8:	1ffff7ec 	.word	0x1ffff7ec
 8008eec:	1ffff7f0 	.word	0x1ffff7f0
 8008ef0:	20000142 	.word	0x20000142
 8008ef4:	20000152 	.word	0x20000152

08008ef8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b087      	sub	sp, #28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	4613      	mov	r3, r2
 8008f04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f06:	2300      	movs	r3, #0
 8008f08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	75fb      	strb	r3, [r7, #23]
 8008f0e:	e027      	b.n	8008f60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	0f1b      	lsrs	r3, r3, #28
 8008f14:	2b09      	cmp	r3, #9
 8008f16:	d80b      	bhi.n	8008f30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	0f1b      	lsrs	r3, r3, #28
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	7dfb      	ldrb	r3, [r7, #23]
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	4619      	mov	r1, r3
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	440b      	add	r3, r1
 8008f28:	3230      	adds	r2, #48	; 0x30
 8008f2a:	b2d2      	uxtb	r2, r2
 8008f2c:	701a      	strb	r2, [r3, #0]
 8008f2e:	e00a      	b.n	8008f46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	0f1b      	lsrs	r3, r3, #28
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
 8008f38:	005b      	lsls	r3, r3, #1
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	440b      	add	r3, r1
 8008f40:	3237      	adds	r2, #55	; 0x37
 8008f42:	b2d2      	uxtb	r2, r2
 8008f44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	011b      	lsls	r3, r3, #4
 8008f4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	005b      	lsls	r3, r3, #1
 8008f50:	3301      	adds	r3, #1
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	4413      	add	r3, r2
 8008f56:	2200      	movs	r2, #0
 8008f58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	75fb      	strb	r3, [r7, #23]
 8008f60:	7dfa      	ldrb	r2, [r7, #23]
 8008f62:	79fb      	ldrb	r3, [r7, #7]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d3d3      	bcc.n	8008f10 <IntToUnicode+0x18>
  }
}
 8008f68:	bf00      	nop
 8008f6a:	bf00      	nop
 8008f6c:	371c      	adds	r7, #28
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bc80      	pop	{r7}
 8008f72:	4770      	bx	lr

08008f74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a0d      	ldr	r2, [pc, #52]	; (8008fb8 <HAL_PCD_MspInit+0x44>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d113      	bne.n	8008fae <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008f86:	4b0d      	ldr	r3, [pc, #52]	; (8008fbc <HAL_PCD_MspInit+0x48>)
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	4a0c      	ldr	r2, [pc, #48]	; (8008fbc <HAL_PCD_MspInit+0x48>)
 8008f8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f90:	61d3      	str	r3, [r2, #28]
 8008f92:	4b0a      	ldr	r3, [pc, #40]	; (8008fbc <HAL_PCD_MspInit+0x48>)
 8008f94:	69db      	ldr	r3, [r3, #28]
 8008f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	2105      	movs	r1, #5
 8008fa2:	2014      	movs	r0, #20
 8008fa4:	f7f7 fcf1 	bl	800098a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008fa8:	2014      	movs	r0, #20
 8008faa:	f7f7 fd0a 	bl	80009c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008fae:	bf00      	nop
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	40005c00 	.word	0x40005c00
 8008fbc:	40021000 	.word	0x40021000

08008fc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4610      	mov	r0, r2
 8008fd8:	f7fc f9d4 	bl	8005384 <USBD_LL_SetupStage>
}
 8008fdc:	bf00      	nop
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008ff6:	78fa      	ldrb	r2, [r7, #3]
 8008ff8:	6879      	ldr	r1, [r7, #4]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	00db      	lsls	r3, r3, #3
 8009002:	440b      	add	r3, r1
 8009004:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	4619      	mov	r1, r3
 800900e:	f7fc fa06 	bl	800541e <USBD_LL_DataOutStage>
}
 8009012:	bf00      	nop
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	460b      	mov	r3, r1
 8009024:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800902c:	78fa      	ldrb	r2, [r7, #3]
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	00db      	lsls	r3, r3, #3
 8009038:	440b      	add	r3, r1
 800903a:	333c      	adds	r3, #60	; 0x3c
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	4619      	mov	r1, r3
 8009042:	f7fc fa5d 	bl	8005500 <USBD_LL_DataInStage>
}
 8009046:	bf00      	nop
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b082      	sub	sp, #8
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800905c:	4618      	mov	r0, r3
 800905e:	f7fc fb6d 	bl	800573c <USBD_LL_SOF>
}
 8009062:	bf00      	nop
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009072:	2301      	movs	r3, #1
 8009074:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	2b02      	cmp	r3, #2
 800907c:	d001      	beq.n	8009082 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800907e:	f7f7 f9cf 	bl	8000420 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009088:	7bfa      	ldrb	r2, [r7, #15]
 800908a:	4611      	mov	r1, r2
 800908c:	4618      	mov	r0, r3
 800908e:	f7fc fb1d 	bl	80056cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009098:	4618      	mov	r0, r3
 800909a:	f7fc fad6 	bl	800564a <USBD_LL_Reset>
}
 800909e:	bf00      	nop
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fc fb17 	bl	80056ea <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	699b      	ldr	r3, [r3, #24]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d005      	beq.n	80090d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090c4:	4b04      	ldr	r3, [pc, #16]	; (80090d8 <HAL_PCD_SuspendCallback+0x30>)
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	4a03      	ldr	r2, [pc, #12]	; (80090d8 <HAL_PCD_SuspendCallback+0x30>)
 80090ca:	f043 0306 	orr.w	r3, r3, #6
 80090ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	e000ed00 	.word	0xe000ed00

080090dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fc fb11 	bl	8005712 <USBD_LL_Resume>
}
 80090f0:	bf00      	nop
 80090f2:	3708      	adds	r7, #8
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009100:	4a1f      	ldr	r2, [pc, #124]	; (8009180 <USBD_LL_Init+0x88>)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a1d      	ldr	r2, [pc, #116]	; (8009180 <USBD_LL_Init+0x88>)
 800910c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009110:	4b1b      	ldr	r3, [pc, #108]	; (8009180 <USBD_LL_Init+0x88>)
 8009112:	4a1c      	ldr	r2, [pc, #112]	; (8009184 <USBD_LL_Init+0x8c>)
 8009114:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009116:	4b1a      	ldr	r3, [pc, #104]	; (8009180 <USBD_LL_Init+0x88>)
 8009118:	2208      	movs	r2, #8
 800911a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800911c:	4b18      	ldr	r3, [pc, #96]	; (8009180 <USBD_LL_Init+0x88>)
 800911e:	2202      	movs	r2, #2
 8009120:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009122:	4b17      	ldr	r3, [pc, #92]	; (8009180 <USBD_LL_Init+0x88>)
 8009124:	2200      	movs	r2, #0
 8009126:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009128:	4b15      	ldr	r3, [pc, #84]	; (8009180 <USBD_LL_Init+0x88>)
 800912a:	2200      	movs	r2, #0
 800912c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800912e:	4b14      	ldr	r3, [pc, #80]	; (8009180 <USBD_LL_Init+0x88>)
 8009130:	2200      	movs	r2, #0
 8009132:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009134:	4812      	ldr	r0, [pc, #72]	; (8009180 <USBD_LL_Init+0x88>)
 8009136:	f7f7 fe12 	bl	8000d5e <HAL_PCD_Init>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009140:	f7f7 f96e 	bl	8000420 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800914a:	2318      	movs	r3, #24
 800914c:	2200      	movs	r2, #0
 800914e:	2100      	movs	r1, #0
 8009150:	f7f9 f93d 	bl	80023ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800915a:	2358      	movs	r3, #88	; 0x58
 800915c:	2200      	movs	r2, #0
 800915e:	2180      	movs	r1, #128	; 0x80
 8009160:	f7f9 f935 	bl	80023ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800916a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800916e:	2200      	movs	r2, #0
 8009170:	2181      	movs	r1, #129	; 0x81
 8009172:	f7f9 f92c 	bl	80023ce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	20001fb4 	.word	0x20001fb4
 8009184:	40005c00 	.word	0x40005c00

08009188 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009194:	2300      	movs	r3, #0
 8009196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800919e:	4618      	mov	r0, r3
 80091a0:	f7f7 fee8 	bl	8000f74 <HAL_PCD_Start>
 80091a4:	4603      	mov	r3, r0
 80091a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091a8:	7bfb      	ldrb	r3, [r7, #15]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 f93c 	bl	8009428 <USBD_Get_USB_Status>
 80091b0:	4603      	mov	r3, r0
 80091b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	4608      	mov	r0, r1
 80091c8:	4611      	mov	r1, r2
 80091ca:	461a      	mov	r2, r3
 80091cc:	4603      	mov	r3, r0
 80091ce:	70fb      	strb	r3, [r7, #3]
 80091d0:	460b      	mov	r3, r1
 80091d2:	70bb      	strb	r3, [r7, #2]
 80091d4:	4613      	mov	r3, r2
 80091d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091e6:	78bb      	ldrb	r3, [r7, #2]
 80091e8:	883a      	ldrh	r2, [r7, #0]
 80091ea:	78f9      	ldrb	r1, [r7, #3]
 80091ec:	f7f8 f862 	bl	80012b4 <HAL_PCD_EP_Open>
 80091f0:	4603      	mov	r3, r0
 80091f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 f916 	bl	8009428 <USBD_Get_USB_Status>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009200:	7bbb      	ldrb	r3, [r7, #14]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b084      	sub	sp, #16
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	460b      	mov	r3, r1
 8009214:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009224:	78fa      	ldrb	r2, [r7, #3]
 8009226:	4611      	mov	r1, r2
 8009228:	4618      	mov	r0, r3
 800922a:	f7f8 f8a9 	bl	8001380 <HAL_PCD_EP_Close>
 800922e:	4603      	mov	r3, r0
 8009230:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009232:	7bfb      	ldrb	r3, [r7, #15]
 8009234:	4618      	mov	r0, r3
 8009236:	f000 f8f7 	bl	8009428 <USBD_Get_USB_Status>
 800923a:	4603      	mov	r3, r0
 800923c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800923e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009262:	78fa      	ldrb	r2, [r7, #3]
 8009264:	4611      	mov	r1, r2
 8009266:	4618      	mov	r0, r3
 8009268:	f7f8 f952 	bl	8001510 <HAL_PCD_EP_SetStall>
 800926c:	4603      	mov	r3, r0
 800926e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009270:	7bfb      	ldrb	r3, [r7, #15]
 8009272:	4618      	mov	r0, r3
 8009274:	f000 f8d8 	bl	8009428 <USBD_Get_USB_Status>
 8009278:	4603      	mov	r3, r0
 800927a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800927c:	7bbb      	ldrb	r3, [r7, #14]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	460b      	mov	r3, r1
 8009290:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092a0:	78fa      	ldrb	r2, [r7, #3]
 80092a2:	4611      	mov	r1, r2
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7f8 f993 	bl	80015d0 <HAL_PCD_EP_ClrStall>
 80092aa:	4603      	mov	r3, r0
 80092ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 f8b9 	bl	8009428 <USBD_Get_USB_Status>
 80092b6:	4603      	mov	r3, r0
 80092b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	460b      	mov	r3, r1
 80092ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	da0c      	bge.n	80092fa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092e6:	68f9      	ldr	r1, [r7, #12]
 80092e8:	1c5a      	adds	r2, r3, #1
 80092ea:	4613      	mov	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	00db      	lsls	r3, r3, #3
 80092f2:	440b      	add	r3, r1
 80092f4:	3302      	adds	r3, #2
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	e00b      	b.n	8009312 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009300:	68f9      	ldr	r1, [r7, #12]
 8009302:	4613      	mov	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	00db      	lsls	r3, r3, #3
 800930a:	440b      	add	r3, r1
 800930c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009310:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009312:	4618      	mov	r0, r3
 8009314:	3714      	adds	r7, #20
 8009316:	46bd      	mov	sp, r7
 8009318:	bc80      	pop	{r7}
 800931a:	4770      	bx	lr

0800931c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009336:	78fa      	ldrb	r2, [r7, #3]
 8009338:	4611      	mov	r1, r2
 800933a:	4618      	mov	r0, r3
 800933c:	f7f7 ff95 	bl	800126a <HAL_PCD_SetAddress>
 8009340:	4603      	mov	r3, r0
 8009342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f86e 	bl	8009428 <USBD_Get_USB_Status>
 800934c:	4603      	mov	r3, r0
 800934e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009350:	7bbb      	ldrb	r3, [r7, #14]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b086      	sub	sp, #24
 800935e:	af00      	add	r7, sp, #0
 8009360:	60f8      	str	r0, [r7, #12]
 8009362:	607a      	str	r2, [r7, #4]
 8009364:	461a      	mov	r2, r3
 8009366:	460b      	mov	r3, r1
 8009368:	72fb      	strb	r3, [r7, #11]
 800936a:	4613      	mov	r3, r2
 800936c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800937c:	893b      	ldrh	r3, [r7, #8]
 800937e:	7af9      	ldrb	r1, [r7, #11]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	f7f8 f882 	bl	800148a <HAL_PCD_EP_Transmit>
 8009386:	4603      	mov	r3, r0
 8009388:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	4618      	mov	r0, r3
 800938e:	f000 f84b 	bl	8009428 <USBD_Get_USB_Status>
 8009392:	4603      	mov	r3, r0
 8009394:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009396:	7dbb      	ldrb	r3, [r7, #22]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3718      	adds	r7, #24
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	607a      	str	r2, [r7, #4]
 80093aa:	461a      	mov	r2, r3
 80093ac:	460b      	mov	r3, r1
 80093ae:	72fb      	strb	r3, [r7, #11]
 80093b0:	4613      	mov	r3, r2
 80093b2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093b4:	2300      	movs	r3, #0
 80093b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093c2:	893b      	ldrh	r3, [r7, #8]
 80093c4:	7af9      	ldrb	r1, [r7, #11]
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	f7f8 f822 	bl	8001410 <HAL_PCD_EP_Receive>
 80093cc:	4603      	mov	r3, r0
 80093ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093d0:	7dfb      	ldrb	r3, [r7, #23]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 f828 	bl	8009428 <USBD_Get_USB_Status>
 80093d8:	4603      	mov	r3, r0
 80093da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3718      	adds	r7, #24
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
	...

080093e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80093f0:	4b02      	ldr	r3, [pc, #8]	; (80093fc <USBD_static_malloc+0x14>)
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bc80      	pop	{r7}
 80093fa:	4770      	bx	lr
 80093fc:	20001a8c 	.word	0x20001a8c

08009400 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]

}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr

08009412 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009412:	b480      	push	{r7}
 8009414:	b083      	sub	sp, #12
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	460b      	mov	r3, r1
 800941c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800941e:	bf00      	nop
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	bc80      	pop	{r7}
 8009426:	4770      	bx	lr

08009428 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	4603      	mov	r3, r0
 8009430:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009436:	79fb      	ldrb	r3, [r7, #7]
 8009438:	2b03      	cmp	r3, #3
 800943a:	d817      	bhi.n	800946c <USBD_Get_USB_Status+0x44>
 800943c:	a201      	add	r2, pc, #4	; (adr r2, 8009444 <USBD_Get_USB_Status+0x1c>)
 800943e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009442:	bf00      	nop
 8009444:	08009455 	.word	0x08009455
 8009448:	0800945b 	.word	0x0800945b
 800944c:	08009461 	.word	0x08009461
 8009450:	08009467 	.word	0x08009467
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	73fb      	strb	r3, [r7, #15]
    break;
 8009458:	e00b      	b.n	8009472 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800945a:	2302      	movs	r3, #2
 800945c:	73fb      	strb	r3, [r7, #15]
    break;
 800945e:	e008      	b.n	8009472 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009460:	2301      	movs	r3, #1
 8009462:	73fb      	strb	r3, [r7, #15]
    break;
 8009464:	e005      	b.n	8009472 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009466:	2302      	movs	r3, #2
 8009468:	73fb      	strb	r3, [r7, #15]
    break;
 800946a:	e002      	b.n	8009472 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800946c:	2302      	movs	r3, #2
 800946e:	73fb      	strb	r3, [r7, #15]
    break;
 8009470:	bf00      	nop
  }
  return usb_status;
 8009472:	7bfb      	ldrb	r3, [r7, #15]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	bc80      	pop	{r7}
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop

08009480 <__libc_init_array>:
 8009480:	b570      	push	{r4, r5, r6, lr}
 8009482:	2600      	movs	r6, #0
 8009484:	4d0c      	ldr	r5, [pc, #48]	; (80094b8 <__libc_init_array+0x38>)
 8009486:	4c0d      	ldr	r4, [pc, #52]	; (80094bc <__libc_init_array+0x3c>)
 8009488:	1b64      	subs	r4, r4, r5
 800948a:	10a4      	asrs	r4, r4, #2
 800948c:	42a6      	cmp	r6, r4
 800948e:	d109      	bne.n	80094a4 <__libc_init_array+0x24>
 8009490:	f000 f830 	bl	80094f4 <_init>
 8009494:	2600      	movs	r6, #0
 8009496:	4d0a      	ldr	r5, [pc, #40]	; (80094c0 <__libc_init_array+0x40>)
 8009498:	4c0a      	ldr	r4, [pc, #40]	; (80094c4 <__libc_init_array+0x44>)
 800949a:	1b64      	subs	r4, r4, r5
 800949c:	10a4      	asrs	r4, r4, #2
 800949e:	42a6      	cmp	r6, r4
 80094a0:	d105      	bne.n	80094ae <__libc_init_array+0x2e>
 80094a2:	bd70      	pop	{r4, r5, r6, pc}
 80094a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094a8:	4798      	blx	r3
 80094aa:	3601      	adds	r6, #1
 80094ac:	e7ee      	b.n	800948c <__libc_init_array+0xc>
 80094ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b2:	4798      	blx	r3
 80094b4:	3601      	adds	r6, #1
 80094b6:	e7f2      	b.n	800949e <__libc_init_array+0x1e>
 80094b8:	080096a4 	.word	0x080096a4
 80094bc:	080096a4 	.word	0x080096a4
 80094c0:	080096a4 	.word	0x080096a4
 80094c4:	080096a8 	.word	0x080096a8

080094c8 <memcpy>:
 80094c8:	440a      	add	r2, r1
 80094ca:	4291      	cmp	r1, r2
 80094cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80094d0:	d100      	bne.n	80094d4 <memcpy+0xc>
 80094d2:	4770      	bx	lr
 80094d4:	b510      	push	{r4, lr}
 80094d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094da:	4291      	cmp	r1, r2
 80094dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094e0:	d1f9      	bne.n	80094d6 <memcpy+0xe>
 80094e2:	bd10      	pop	{r4, pc}

080094e4 <memset>:
 80094e4:	4603      	mov	r3, r0
 80094e6:	4402      	add	r2, r0
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d100      	bne.n	80094ee <memset+0xa>
 80094ec:	4770      	bx	lr
 80094ee:	f803 1b01 	strb.w	r1, [r3], #1
 80094f2:	e7f9      	b.n	80094e8 <memset+0x4>

080094f4 <_init>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	bf00      	nop
 80094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fa:	bc08      	pop	{r3}
 80094fc:	469e      	mov	lr, r3
 80094fe:	4770      	bx	lr

08009500 <_fini>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr
